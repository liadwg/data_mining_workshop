{"paragraphs":[{"text":"%md\n\n##Infra","user":"plancky","dateUpdated":"2017-03-07T02:42:32+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1488897725955_-1232657031","id":"20170307-144205_929395203","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>Infra</h2>\n"},"dateCreated":"2017-03-07T02:42:05+0000","dateStarted":"2017-03-07T02:42:25+0000","dateFinished":"2017-03-07T02:42:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:995"},{"title":"Data Import","text":"// Categories (for search uses) //\nval facebook_page_categories_df = sqlContext.read.option(\"header\", \"true\").csv(\"s3a://zeppelindata/staging/hw/facebook_page_categories.csv\")\nfacebook_page_categories_df.createOrReplaceTempView(\"facebook_page_categories\")\n\n\n// Pages //\nsqlContext.read.json(\"s3a://zeppelindata/staging/hw/pages240117\").createOrReplaceTempView(\"facebook_homework_pages\")\n// sqlContext.read.parquet(\"s3a://zeppelindata/staging/hw/photos_raw_parquet_amir_fix\").createOrReplaceTempView(\"salame_facebook_homework_photos_with_files\")\n// sqlContext.read.parquet(\"s3a://zeppelindata/staging/hw/pages_raw_parquet070317\").createOrReplaceTempView(\"pages_raw_parquet\")\n// sqlContext.read.json(\"s3a://zeppelindata/staging/hw/pages_raw070317\").createOrReplaceTempView(\"pages_raw\")\nsqlContext.read.json(\"s3a://zeppelindata/staging/hw/pages_raw070317\").createOrReplaceTempView(\"pages_raw\")\nsqlContext.read.json(\"s3a://zeppelindata/staging/hw/pages010317\").createOrReplaceTempView(\"pages_analysis\")\n\n\n// Photos //\nsqlContext.read.parquet(\"s3a://zeppelindata/staging/hw/photos_raw_parquet070317\").createOrReplaceTempView(\"photos_raw_parquet\")\nsqlContext.read.json(\"s3a://zeppelindata/staging/hw/photos_raw070317\").createOrReplaceTempView(\"photos_raw\")\n// sqlContext.read.json(\"s3a://zeppelindata/staging/hw/photos030317\").createOrReplaceTempView(\"facebook_homework_photos_analysis\")\nsqlContext.read.json(\"s3a://zeppelindata/staging/hw/photos070317\").createOrReplaceTempView(\"facebook_homework_photos_analysis\")\n\n\n// Feeds //\nsqlContext.read.parquet(\"s3a://zeppelindata/staging/hw/feeds_raw_parquet\").createOrReplaceTempView(\"feeds_raw_parquet\")\nsqlContext.read.json(\"s3a://zeppelindata/staging/hw/feeds_raw050317\").createOrReplaceTempView(\"feeds_raw\")\n// sqlContext.read.json(\"s3a://zeppelindata/staging/hw/feeds060317\").createOrReplaceTempView(\"facebook_homework_feeds_analysis\")\n// sqlContext.read.json(\"s3a://zeppelindata/staging/hw/feeds070317\").createOrReplaceTempView(\"facebook_homework_feeds_analysis\")\nsqlContext.read.json(\"s3a://zeppelindata/staging/hw/feeds080317\").createOrReplaceTempView(\"facebook_homework_feeds_analysis\")\n\nsqlContext.read.json(\"s3a://zeppelindata/staging/hw/self_feeds070317\").createOrReplaceTempView(\"facebook_homework_self_feeds_analysis\")\nsqlContext.read.json(\"s3a://zeppelindata/staging/hw/not_self_feeds080317\").createOrReplaceTempView(\"facebook_homework_not_self_feeds_analysis\")\n\n\n","user":"plancky","dateUpdated":"2017-03-13T20:00:31+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true,"editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1488457633840_1804205753","id":"20170302-122713_1261852096","result":{"code":"SUCCESS","type":"TEXT","msg":"\nfacebook_page_categories_df: org.apache.spark.sql.DataFrame = [Category: string, Id: string ... 1 more field]\n"},"dateCreated":"2017-03-02T12:27:13+0000","dateStarted":"2017-03-07T08:32:44+0000","dateFinished":"2017-03-07T08:33:26+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:996"},{"title":"Utils","text":"var base_directory = \"staging/hw\"\n\ndef getRandomFacebookUserId(): Long = {\n    var user_ids = List(10153572127214868L, 130419397301277L, 982489488536527L)\n    var current_user_id = scala.util.Random.shuffle(user_ids).head\n\n    return current_user_id\n}\n\n\ndef listSoSet(some_list: Seq[String]): Seq[String] = {\n    return some_list.toSet.toSeq\n}\n\n\nsqlContext.udf.register(\"listSoSet\", (some_list: Seq[String]) => listSoSet(some_list))\n\n\ndef fileExistsInS3(bucket_name: String, file_name: String): Boolean = {\n    var found_file = false\n    try {\n        println(\"Trying to read s3://\" + bucket_name + \"/\" + file_name)\n        var read_file = readFromS3(bucket_name, file_name)\n        if (read_file.size > 0) {\n            found_file = true\n        }\n\n    } catch {\n        case e: com.amazonaws.services.s3.model.AmazonS3Exception => {\n            if (e.getMessage.contains(\"The specified key does not exist\")) {\n                found_file = false\n            } else {\n                throw e\n            }\n        }\n    }\n    \n    println(\"Returning \" + found_file + \" for file s3://\" + bucket_name + \"/\" + file_name)\n    return found_file\n}\n\n\ndef getUrlAsStringWithErrors(inputUrl: String): String = {\n    val client = new org.apache.http.impl.client.DefaultHttpClient()\n    val request = new org.apache.http.client.methods.HttpGet(inputUrl)\n    val response = client.execute(request)\n    val handler = new org.apache.http.impl.client.BasicResponseHandler()\n    var res = new java.io.ByteArrayOutputStream()\n    var code = response.getStatusLine.getStatusCode\n    org.apache.commons.io.IOUtils.copy(response.getEntity.getContent, res)\n    if (code == 200) {\n        return new String(res.toByteArray, \"utf-8\")\n    } else {\n        throw new Exception(\"Failed with body: \" + new String(res.toByteArray, \"utf-8\"))\n    }\n}","user":"plancky","dateUpdated":"2017-03-13T20:00:33+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true,"editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485019375699_1453971197","id":"20170121-172255_1802823802","result":{"code":"SUCCESS","type":"TEXT","msg":"\nbase_directory: String = staging/hw\n\ngetRandomFacebookUserId: ()Long\n\nlistSoSet: (some_list: Seq[String])Seq[String]\n\nres119: org.apache.spark.sql.expressions.UserDefinedFunction = UserDefinedFunction(<function1>,ArrayType(StringType,true),Some(List(ArrayType(StringType,true))))\n\nfileExistsInS3: (bucket_name: String, file_name: String)Boolean\n\nwarning: there were 1 deprecation warning(s); re-run with -deprecation for details\n\ngetUrlAsStringWithErrors: (inputUrl: String)String\n"},"dateCreated":"2017-01-21T05:22:55+0000","dateStarted":"2017-03-07T08:33:30+0000","dateFinished":"2017-03-07T08:33:32+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:997"},{"text":"%md\n\n##Page search and Genral info","user":"plancky","dateUpdated":"2017-03-12T12:07:29+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1488732756637_1765512398","id":"20170305-165236_610676172","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>Page search and Genral info</h2>\n"},"dateCreated":"2017-03-05T04:52:36+0000","dateStarted":"2017-03-07T02:41:14+0000","dateFinished":"2017-03-07T02:41:14+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:998"},{"title":"Search pages by categories","text":"// @RequestMapping(value = \"/searchpages/{userId}\", method = RequestMethod.GET)\n// public Paged<Page> searchPages(@PathVariable(\"userId\") String userId,\n//                               @RequestParam(\"query\") String query,\n//                               @RequestParam(value = \"limit\",required = false) String limit)\n\nvar limit = 100\n\nvar query_terms = sqlContext.sql(\"\"\"\nselect word, count(*) as num_occurs\nfrom (select split(regexp_replace(id, '/', ' '), ' ') as words\n     from facebook_page_categories) t\nlateral view explode (words) w as word\ngroup by word\norder by num_occurs desc\nlimit 10\"\"\").map(a => a.getAs[String](\"word\"))\n\n// var query_terms = List(\"Foo\", \"Bar\", \"Coffee\")\n\nquery_terms\n    .repartition(1)\n    // .collect\n    .foreach(query_term => { \n    \n    var next_page_url = \"\"\n    var max_pages = 10 // Max results are 500 anyway (limit=100 * max_pages=5)\n    var current_user_id = getRandomFacebookUserId()\n\n    var found_file = false\n    try {\n        readFromS3(\"zeppelindata\", base_directory + \"/salame_facebook_homework/\" + query_term + \"/0\")\n        found_file = true\n    } catch {\n        case e: com.amazonaws.services.s3.model.AmazonS3Exception => {\n            if (e.getMessage.contains(\"The specified key does not exist\")) {\n                found_file = false\n            } else {\n                throw e\n            }\n        }\n    }\n    \n    if (!found_file) { // Skip found files\n        import scala.util.control.Breaks._\n        breakable { \n            for (page_number <- 0 to max_pages) {\n                println(\"Working on page \" + page_number + \" in query_term \" + query_term + \" with next_page_url.isEmpty \" + next_page_url.isEmpty)\n                var start_url_to_get = \"https://user:GhNoFZ3CPPUsHQ2WGwCzFBj3m7tcYWf@planckfacebookclient.herokuapp.com/searchpages/\" + current_user_id + \"?query=\" + query_term + \"&limit=\" + limit\n                \n                val objectMapper = new com.fasterxml.jackson.databind.ObjectMapper() with com.fasterxml.jackson.module.scala.experimental.ScalaObjectMapper;\n                objectMapper.registerModule(com.fasterxml.jackson.module.scala.DefaultScalaModule)\n                \n                var current_reply = \"\"\n                if (next_page_url.isEmpty) {\n                    current_reply = getUrlAsString(start_url_to_get)\n                } else {\n                    current_reply = getUrlAsString(next_page_url)\n                }\n        \n                // Write content to s3\n                writeContentToS3(current_reply, \"zeppelindata\", base_directory + \"/salame_facebook_homework/\" + query_term + \"/\" + page_number)\n            \n                // Get next page (or stop trying to fetch)\n                var paging_object_option = objectMapper.readValue[Map[String, Object]](current_reply).get(\"paging\")\n                if (paging_object_option.isEmpty || paging_object_option.get == null) {\n                    // println(\"should break at paging\")\n                    break\n                } else {\n                    var next_page_url_option = paging_object_option.get.asInstanceOf[Map[String, Object]].get(\"next\")\n                    if (next_page_url_option.isEmpty || next_page_url_option.get == null) {\n                        // println(\"should break at next\")\n                        break\n                    } else {\n                        next_page_url = next_page_url_option.get.asInstanceOf[String]\n                    }\n                }\n            }\n        }\n    } else {\n        println(\"Skipped query_term \" + query_term)\n    }\n})\n","user":"plancky","dateUpdated":"2017-03-13T19:58:18+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","lineNumbers":false,"title":true,"editorHide":false,"tableHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485015528093_-602293479","id":"20170121-161848_1549205044","result":{"code":"SUCCESS","type":"TEXT","msg":"\nlimit: Int = 100\n\nquery_terms: org.apache.spark.sql.Dataset[String] = [value: string]\n"},"dateCreated":"2017-01-21T04:18:48+0000","dateStarted":"2017-01-23T08:35:17+0000","dateFinished":"2017-01-23T08:35:18+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:999"},{"title":"Read Page files","text":"// var base_directory = \"staging/hw\"\n// var files_list = listBucketContents(\"zeppelindata\", base_directory + \"/salame_facebook_homework/\")\n// var jsons_with_file_name_df = read_json_with_file_names_from_list2(\"zeppelindata\", files_list, false)\n\n// jsons_with_file_name_df.write.mode(\"overwrite\").parquet(\"s3a://zeppelindata/staging/hw/pages_raw_parquet070317\")\n// sqlContext.read.parquet(\"s3a://zeppelindata/staging/hw/pages_raw_parquet070317\").createOrReplaceTempView(\"pages_raw_parquet\")\n\nsqlContext.sql(\"\"\"\nwith pages_with_page_id as (select  page.id as page_id, page.*,\n                            regexp_extract(file_name, '.*salame_facebook_homework/(.*)/.*', 1) as search_category\n                            from pages_raw_parquet\n                            lateral view explode (content.data) d as page)\nselect *\nfrom pages_with_page_id\n\"\"\").repartition(1).write.mode(\"overwrite\").json(\"s3a://zeppelindata/staging/hw/pages_raw070317\")\nsqlContext.read.json(\"s3a://zeppelindata/staging/hw/pages_raw070317\").createOrReplaceTempView(\"pages_raw\")","user":"plancky","dateUpdated":"2017-03-09T12:24:49+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true,"editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1488996221869_-528159728","id":"20170308-180341_1376068611","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"2017-03-08T06:03:41+0000","dateStarted":"2017-03-09T12:24:33+0000","dateFinished":"2017-03-09T12:24:44+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1000"},{"title":"Basic Category Stats","text":"%sql\n\nwith data as (\n        select  page.id as page_id, page.*, \n        regexp_extract(file_name, '.*salame_facebook_homework/(.*)/.*', 1) as search_category, page.category, page.likes --avg(likes) as avg_likes\nfrom pages_raw_parquet\nlateral view explode (content.data) d as page)\nselect category, count(*) as category_cnt, avg(likes) as avg_likes, max(likes) as max_likes, min(likes) as min_likes\nfrom data\ngroup by category\norder by category_cnt desc\nlimit 20","user":"plancky","dateUpdated":"2017-03-12T12:07:36+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[{"name":"category","index":0,"aggr":"sum"}],"values":[{"name":"category_cnt","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"category","index":0,"aggr":"sum"},"yAxis":{"name":"category_cnt","index":1,"aggr":"sum"}}},"enabled":true,"editorMode":"ace/mode/sql","title":true,"editorHide":false,"tableHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1488996368700_946765051","id":"20170308-180608_1295801277","result":{"code":"SUCCESS","type":"TABLE","msg":"category\tcategory_cnt\tavg_likes\tmax_likes\tmin_likes\nLocal Business\t2517\t46586.510528406834\t4916993\t0\nFood & Beverage Company\t876\t1134528.3025114154\t102762547\t57\nMedia/News Company\t834\t1219358.340527578\t25392302\t0\nCompany\t671\t216312.92697466468\t22341272\t0\nEducation\t614\t128317.68241042345\t3671701\t5\nRestaurant\t586\t56601.36177474403\t2887082\t0\nFinance Company\t548\t331852.299270073\t8855766\t74\nHealth/Beauty\t512\t613136.396484375\t15220541\t0\nNon-Profit Organization\t479\t450118.3841336117\t16035480\t44\nShopping/Retail\t426\t78256.75821596244\t1365042\t0\nGovernment Organization\t392\t347541.5918367347\t13043802\t11\nSports Team\t366\t1181244.150273224\t95624138\t0\nMovie\t296\t2023441.6689189188\t55946195\t0\nEvent Planning Service\t288\t50959.28472222222\t549446\t0\nReligious Organization\t278\t319291.92805755395\t9297724\t0\nOrganization\t267\t167517.1872659176\t5417541\t0\nMining Company\t260\t23983.315384615384\t570129\t511\nArts & Entertainment\t247\t125571.68016194332\t2676919\t2\nSchool\t237\t84685.96624472574\t3957650\t0\nCollege & University\t229\t82113.01310043668\t1788754\t0\n","comment":"","msgTable":[[{"key":"category_cnt","value":"Local Business"},{"key":"category_cnt","value":"2517"},{"key":"category_cnt","value":"46586.510528406834"},{"key":"category_cnt","value":"4916993"},{"key":"category_cnt","value":"0"}],[{"key":"avg_likes","value":"Food & Beverage Company"},{"key":"avg_likes","value":"876"},{"key":"avg_likes","value":"1134528.3025114154"},{"key":"avg_likes","value":"102762547"},{"key":"avg_likes","value":"57"}],[{"key":"max_likes","value":"Media/News Company"},{"key":"max_likes","value":"834"},{"key":"max_likes","value":"1219358.340527578"},{"key":"max_likes","value":"25392302"},{"key":"max_likes","value":"0"}],[{"key":"min_likes","value":"Company"},{"key":"min_likes","value":"671"},{"key":"min_likes","value":"216312.92697466468"},{"key":"min_likes","value":"22341272"},{"key":"min_likes","value":"0"}],[{"value":"Education"},{"value":"614"},{"value":"128317.68241042345"},{"value":"3671701"},{"value":"5"}],[{"value":"Restaurant"},{"value":"586"},{"value":"56601.36177474403"},{"value":"2887082"},{"value":"0"}],[{"value":"Finance Company"},{"value":"548"},{"value":"331852.299270073"},{"value":"8855766"},{"value":"74"}],[{"value":"Health/Beauty"},{"value":"512"},{"value":"613136.396484375"},{"value":"15220541"},{"value":"0"}],[{"value":"Non-Profit Organization"},{"value":"479"},{"value":"450118.3841336117"},{"value":"16035480"},{"value":"44"}],[{"value":"Shopping/Retail"},{"value":"426"},{"value":"78256.75821596244"},{"value":"1365042"},{"value":"0"}],[{"value":"Government Organization"},{"value":"392"},{"value":"347541.5918367347"},{"value":"13043802"},{"value":"11"}],[{"value":"Sports Team"},{"value":"366"},{"value":"1181244.150273224"},{"value":"95624138"},{"value":"0"}],[{"value":"Movie"},{"value":"296"},{"value":"2023441.6689189188"},{"value":"55946195"},{"value":"0"}],[{"value":"Event Planning Service"},{"value":"288"},{"value":"50959.28472222222"},{"value":"549446"},{"value":"0"}],[{"value":"Religious Organization"},{"value":"278"},{"value":"319291.92805755395"},{"value":"9297724"},{"value":"0"}],[{"value":"Organization"},{"value":"267"},{"value":"167517.1872659176"},{"value":"5417541"},{"value":"0"}],[{"value":"Mining Company"},{"value":"260"},{"value":"23983.315384615384"},{"value":"570129"},{"value":"511"}],[{"value":"Arts & Entertainment"},{"value":"247"},{"value":"125571.68016194332"},{"value":"2676919"},{"value":"2"}],[{"value":"School"},{"value":"237"},{"value":"84685.96624472574"},{"value":"3957650"},{"value":"0"}],[{"value":"College & University"},{"value":"229"},{"value":"82113.01310043668"},{"value":"1788754"},{"value":"0"}]],"columnNames":[{"name":"category","index":0,"aggr":"sum"},{"name":"category_cnt","index":1,"aggr":"sum"},{"name":"avg_likes","index":2,"aggr":"sum"},{"name":"max_likes","index":3,"aggr":"sum"},{"name":"min_likes","index":4,"aggr":"sum"}],"rows":[["Local Business","2517","46586.510528406834","4916993","0"],["Food & Beverage Company","876","1134528.3025114154","102762547","57"],["Media/News Company","834","1219358.340527578","25392302","0"],["Company","671","216312.92697466468","22341272","0"],["Education","614","128317.68241042345","3671701","5"],["Restaurant","586","56601.36177474403","2887082","0"],["Finance Company","548","331852.299270073","8855766","74"],["Health/Beauty","512","613136.396484375","15220541","0"],["Non-Profit Organization","479","450118.3841336117","16035480","44"],["Shopping/Retail","426","78256.75821596244","1365042","0"],["Government Organization","392","347541.5918367347","13043802","11"],["Sports Team","366","1181244.150273224","95624138","0"],["Movie","296","2023441.6689189188","55946195","0"],["Event Planning Service","288","50959.28472222222","549446","0"],["Religious Organization","278","319291.92805755395","9297724","0"],["Organization","267","167517.1872659176","5417541","0"],["Mining Company","260","23983.315384615384","570129","511"],["Arts & Entertainment","247","125571.68016194332","2676919","2"],["School","237","84685.96624472574","3957650","0"],["College & University","229","82113.01310043668","1788754","0"]]},"dateCreated":"2017-03-08T06:06:08+0000","dateStarted":"2017-03-08T06:48:52+0000","dateFinished":"2017-03-08T06:48:53+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1001"},{"title":"Basic Page Analysis","text":"%sql\n\nselect  id,\n        name, \n        case when picture.url is null and picture.data is null then 0 else 1 end as has_profile_photo,\n        case when cover.coverId is null then 0 else 1 end as has_cover_photo, \n        location, \n        currentLocation, current_location, \n        hometown, \n        phone, \n        emails,\n        website,\n        founded, \n        description, \n        startInfo, start_info, \n        generalInfo, general_info, \n        isPermanentlyClosed, is_permanently_closed, \n        isUnclaimed, is_unclaimed,\n        isVerified, is_verified,\n        priceRange, price_range, \n        products,\n        fanCount, \n        talkingAboutCount, talking_about_count, \n        wereHereCount, were_here_count,\n        likes,\n        category,\n        case when bio is null then 0 else 1 end as has_bio,\n        case when birthday is null then 0 else 1 end as has_birthday,\n        case when companyOverview is null and company_overview is null then 0 else 1 end as has_company_overview,\n        case when about is null then 0 else 1 end as has_about,\n        case when hours is null then 0 else 1 end as has_hours,\n        checkins,\n        case when paymentOptions is null and payment_options is null then 0 else 1 end as has_payment_options,\n        search_category,\n        case when mission is null then 0 else 1 end as has_mission,\n        case when categoryList is null then size(category_list) else size(categoryList) end as category_list_len\nfrom pages_raw \nlimit 3\n","user":"plancky","dateUpdated":"2017-03-12T12:07:40+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[{"name":"id","index":0,"aggr":"sum"}],"values":[{"name":"name","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"id","index":0,"aggr":"sum"},"yAxis":{"name":"name","index":1,"aggr":"sum"}}},"enabled":true,"editorMode":"ace/mode/sql","title":true,"editorHide":false,"tableHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1488995263043_-1670688294","id":"20170308-174743_1289024349","result":{"code":"SUCCESS","type":"TABLE","msg":"id\tname\tlikes\tcategory\thas_bio\thas_birthday\thas_company_overview\thas_about\thas_hours\tcheckins\thas_payment_options\tsearch_category\tha_mission\tcategory_list_len\tfeatures\n441950582632683\tPublicar Guatemala\t26878\tConsulting Agency\t0\t0\t0\t1\t0\t27\t0\tPublic\t1\t3\tnull\n446650485525864\tClickCerto Propaganda & Publicidade\t26514\tLocal Business\t0\t1\t0\t1\t1\t324\t1\tPublic\t0\t3\tnull\n168001739909847\tDeschutes Brewery Portland Public House\t10646\tRestaurant\t0\t0\t0\t1\t1\t151579\t1\tPublic\t0\t3\tnull\n","comment":"","msgTable":[[{"key":"name","value":"441950582632683"},{"key":"name","value":"Publicar Guatemala"},{"key":"name","value":"26878"},{"key":"name","value":"Consulting Agency"},{"key":"name","value":"0"},{"key":"name","value":"0"},{"key":"name","value":"0"},{"key":"name","value":"1"},{"key":"name","value":"0"},{"key":"name","value":"27"},{"key":"name","value":"0"},{"key":"name","value":"Public"},{"key":"name","value":"1"},{"key":"name","value":"3"},{"key":"name","value":"null"}],[{"key":"likes","value":"446650485525864"},{"key":"likes","value":"ClickCerto Propaganda & Publicidade"},{"key":"likes","value":"26514"},{"key":"likes","value":"Local Business"},{"key":"likes","value":"0"},{"key":"likes","value":"1"},{"key":"likes","value":"0"},{"key":"likes","value":"1"},{"key":"likes","value":"1"},{"key":"likes","value":"324"},{"key":"likes","value":"1"},{"key":"likes","value":"Public"},{"key":"likes","value":"0"},{"key":"likes","value":"3"},{"key":"likes","value":"null"}],[{"key":"category","value":"168001739909847"},{"key":"category","value":"Deschutes Brewery Portland Public House"},{"key":"category","value":"10646"},{"key":"category","value":"Restaurant"},{"key":"category","value":"0"},{"key":"category","value":"0"},{"key":"category","value":"0"},{"key":"category","value":"1"},{"key":"category","value":"1"},{"key":"category","value":"151579"},{"key":"category","value":"1"},{"key":"category","value":"Public"},{"key":"category","value":"0"},{"key":"category","value":"3"},{"key":"category","value":"null"}]],"columnNames":[{"name":"id","index":0,"aggr":"sum"},{"name":"name","index":1,"aggr":"sum"},{"name":"likes","index":2,"aggr":"sum"},{"name":"category","index":3,"aggr":"sum"},{"name":"has_bio","index":4,"aggr":"sum"},{"name":"has_birthday","index":5,"aggr":"sum"},{"name":"has_company_overview","index":6,"aggr":"sum"},{"name":"has_about","index":7,"aggr":"sum"},{"name":"has_hours","index":8,"aggr":"sum"},{"name":"checkins","index":9,"aggr":"sum"},{"name":"has_payment_options","index":10,"aggr":"sum"},{"name":"search_category","index":11,"aggr":"sum"},{"name":"ha_mission","index":12,"aggr":"sum"},{"name":"category_list_len","index":13,"aggr":"sum"},{"name":"features","index":14,"aggr":"sum"}],"rows":[["441950582632683","Publicar Guatemala","26878","Consulting Agency","0","0","0","1","0","27","0","Public","1","3","null"],["446650485525864","ClickCerto Propaganda & Publicidade","26514","Local Business","0","1","0","1","1","324","1","Public","0","3","null"],["168001739909847","Deschutes Brewery Portland Public House","10646","Restaurant","0","0","0","1","1","151579","1","Public","0","3","null"]]},"dateCreated":"2017-03-08T05:47:43+0000","dateStarted":"2017-03-09T12:01:27+0000","dateFinished":"2017-03-09T12:01:27+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1002"},{"title":"Create genral info table","text":"sqlContext.sql(\"\"\"\nselect  id,\n        name, \n        case when picture.url is null and picture.data is null then 0 else 1 end as has_profile_photo,\n        case when cover.coverId is null then 0 else 1 end as has_cover_photo, \n        location, \n        currentLocation, current_location, \n        hometown, \n        phone, \n        emails,\n        website,\n        founded, \n        description, \n        startInfo, start_info, \n        generalInfo, general_info, \n        isPermanentlyClosed, is_permanently_closed, \n        isUnclaimed, is_unclaimed,\n        isVerified, is_verified,\n        priceRange, price_range, \n        products,\n        fanCount, \n        talkingAboutCount, talking_about_count, \n        wereHereCount, were_here_count,\n        likes,\n        category,\n        case when bio is null then 0 else 1 end as has_bio,\n        case when birthday is null then 0 else 1 end as has_birthday,\n        case when companyOverview is null and company_overview is null then 0 else 1 end as has_company_overview,\n        case when about is null then 0 else 1 end as has_about,\n        case when hours is null then 0 else 1 end as has_hours,\n        checkins,\n        case when paymentOptions is null and payment_options is null then 0 else 1 end as has_payment_options,\n        search_category,\n        case when mission is null then 0 else 1 end as has_mission,\n        case when categoryList is null then size(category_list) else size(categoryList) end as category_list_len\nfrom pages_raw \n\"\"\").repartition(1).write.mode(\"overwrite\").json(\"s3a://zeppelindata/staging/hw/pages010317\")\nsqlContext.read.json(\"s3a://zeppelindata/staging/hw/pages010317\").createOrReplaceTempView(\"pages_analysis\")","user":"plancky","dateUpdated":"2017-03-09T12:20:09+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true,"editorHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485283360598_-645945583","id":"20170124-184240_1817418198","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"2017-01-24T06:42:40+0000","dateStarted":"2017-03-09T12:20:09+0000","dateFinished":"2017-03-09T12:20:26+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1003"},{"title":"Get Page Genral Info","text":"// @RequestMapping(value = \"/user/{userId}/page/{pageId}\", method = RequestMethod.GET)\n// public Page getByUserPage(@PathVariable(\"userId\") String userId,\n//                           @PathVariable(\"pageId\") String pageId)\n\n\nvar base_directory = \"staging/hw\"\n\n\nsqlContext.sql(\"\"\"\nselect *\nfrom (select id,\n             row_number() over (order by md5(id)) as rownumb\n      from (select distinct id \n            from facebook_homework_pages\n           )\n     )\n\"\"\").map(a => a.getAs[String](\"id\"))\n    .repartition(4)\n    .foreach(fetched_page_id => {\n\n        var page_id = fetched_page_id\n        var max_pages = 0 \n        var current_user_id = getRandomFacebookUserId()\n\n        var current_done_file = base_directory + \"/page_status/\" + page_id\n        var found_done_file = fileExistsInS3(\"zeppelindata\", current_done_file)\n        \n        var current_last_page_file = base_directory + \"/page/\" + page_id + \"/\" + max_pages\n        var found_last_page_file = fileExistsInS3(\"zeppelindata\", current_last_page_file)\n        \n        if (!found_done_file && !found_last_page_file) {\n    \n            var next_page_url = \"\" \n            \n            import scala.util.control.Breaks._\n            breakable { \n                var page_number = 0\n                var url_to_get = \"\"\n                while (page_number <= max_pages) {\n                    \n                    println(\"Working page \" + page_number + \" in page_id \" + page_id)\n                \n                    val objectMapper = new com.fasterxml.jackson.databind.ObjectMapper() with com.fasterxml.jackson.module.scala.experimental.ScalaObjectMapper;\n                    objectMapper.registerModule(com.fasterxml.jackson.module.scala.DefaultScalaModule)\n\n                    if (page_number == 0) {\n                        url_to_get = \"https://user:GhNoFZ3CPPUsHQ2WGwCzFBj3m7tcYWf@planckfacebookclient.herokuapp.com/user/\" + current_user_id + \"/page/\" + page_id\n                    } \n                    \n                    var current_reply = \"\"\n                    try {\n                        println(url_to_get)\n                        \n                        current_reply = getUrlAsStringWithErrors(url_to_get)\n                        println(current_reply)\n                        page_number += 1\n                        \n                        // Write content to s3\n                        writeContentToS3(current_reply, \"zeppelindata\", base_directory + \"/page/\" + page_id + \"/\" + page_number)\n                    \n                        // Get next page (or stop trying to fetch)\n                        var cursor_object_option = objectMapper.readValue[Map[String, Object]](current_reply).get(\"paging\")\n                        if (cursor_object_option.isEmpty || cursor_object_option.get == null) {\n                            // println(\"should break at cursor\")\n                            writeContentToS3(\"DONE\", \"zeppelindata\", current_done_file)\n                            break\n\n                        } else {\n                            var after_cursor_option = cursor_object_option.get.asInstanceOf[Map[String, Object]].get(\"next\")\n                            if (after_cursor_option.isEmpty || after_cursor_option.get == null) {\n                                // println(\"should break at after_cursor_option\")\n                                writeContentToS3(\"DONE\", \"zeppelindata\", current_done_file)\n                                break\n\n                            } else {\n                                url_to_get = after_cursor_option.get.asInstanceOf[String]\n                            }\n                        }\n\n                    } catch {\n                        case e: Exception => {\n                            println(\"Got for page_id: \" + page_id + \" exception: \" + e.getMessage)\n                            if (e.getMessage.contains(\"was migrated to page ID\")) {\n                                var pattern = \"\"\".* was migrated to page ID (\\d+).*\"\"\".r\n                                var pattern(new_page_id) = e.getMessage\n\n                                println(\"Migraging \" + page_id + \" to \" + new_page_id)\n                                writeContentToS3(\"Migraging \" + page_id + \" to \" + new_page_id, \"zeppelindata\", current_done_file + \"_migrated\")\n                                writeContentToS3(\"DONE\", \"zeppelindata\", current_done_file)\n                                page_number = 0\n                                page_id = new_page_id\n                                \n                            } else if (e.getMessage.matches(\".*cannot be loaded due to missing permissions, or does not support this operation. Please read the Graph API documentation.*\")) {\n                                println(\"Ignoring \" + page_id)\n                                writeContentToS3(e.getMessage, \"zeppelindata\", current_done_file + \"_error\")\n                                writeContentToS3(\"DONE\", \"zeppelindata\", current_done_file)\n                                break\n\n                            } else if (e.getMessage.contains(\"\"\"www.herokucdn.com/error-pages/application-error.html\"\"\")) {\n                                println(\"Ignoring \" + page_id)\n                                writeContentToS3(e.getMessage, \"zeppelindata\", current_done_file + \"_error\")\n                                writeContentToS3(\"DONE\", \"zeppelindata\", current_done_file)\n                                break\n\n                            } else if (e.getMessage.matches(\".*Please reduce the amount of data you're asking for, then retry your request.*\")) {\n                                println(\"Ignoring \" + page_id)\n                                writeContentToS3(e.getMessage, \"zeppelindata\", current_done_file + \"_error\")\n                                writeContentToS3(\"DONE\", \"zeppelindata\", current_done_file)\n                                break\n\n                            } else {\n                                throw new Exception(\"Failed on page \" + page_id + \" and error \" + e.getMessage, e)\n                            }\n                        }\n                    }\n                }\n                \n                writeContentToS3(\"DONE\", \"zeppelindata\", current_done_file)\n\n            }\n        }\n    })","user":"plancky","dateUpdated":"2017-03-12T12:09:55+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","tableHide":true,"title":true,"editorHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1489001722461_-305357896","id":"20170308-193522_825346636","result":{"code":"ERROR","type":"TEXT","msg":"\nbase_directory: String = staging/hw\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\norg.apache.spark.SparkException: Job 149 cancelled part of cancelled job group zeppelin-20170308-193522_825346636\n  at org.apache.spark.scheduler.DAGScheduler.org$apache$spark$scheduler$DAGScheduler$$failJobAndIndependentStages(DAGScheduler.scala:1454)\n  at org.apache.spark.scheduler.DAGScheduler.handleJobCancellation(DAGScheduler.scala:1393)\n  at org.apache.spark.scheduler.DAGScheduler$$anonfun$handleJobGroupCancelled$1.apply$mcVI$sp(DAGScheduler.scala:795)\n  at org.apache.spark.scheduler.DAGScheduler$$anonfun$handleJobGroupCancelled$1.apply(DAGScheduler.scala:795)\n  at org.apache.spark.scheduler.DAGScheduler$$anonfun$handleJobGroupCancelled$1.apply(DAGScheduler.scala:795)\n  at scala.collection.mutable.HashSet.foreach(HashSet.scala:78)\n  at org.apache.spark.scheduler.DAGScheduler.handleJobGroupCancelled(DAGScheduler.scala:795)\n  at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.doOnReceive(DAGScheduler.scala:1642)\n  at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:1622)\n  at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:1611)\n  at org.apache.spark.util.EventLoop$$anon$1.run(EventLoop.scala:48)\n  at org.apache.spark.scheduler.DAGScheduler.runJob(DAGScheduler.scala:632)\n  at org.apache.spark.SparkContext.runJob(SparkContext.scala:1873)\n  at org.apache.spark.SparkContext.runJob(SparkContext.scala:1886)\n  at org.apache.spark.SparkContext.runJob(SparkContext.scala:1899)\n  at org.apache.spark.SparkContext.runJob(SparkContext.scala:1913)\n  at org.apache.spark.rdd.RDD$$anonfun$foreach$1.apply(RDD.scala:894)\n  at org.apache.spark.rdd.RDD$$anonfun$foreach$1.apply(RDD.scala:892)\n  at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:151)\n  at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:112)\n  at org.apache.spark.rdd.RDD.withScope(RDD.scala:358)\n  at org.apache.spark.rdd.RDD.foreach(RDD.scala:892)\n  at org.apache.spark.sql.Dataset$$anonfun$foreach$1.apply$mcV$sp(Dataset.scala:2108)\n  at org.apache.spark.sql.Dataset$$anonfun$foreach$1.apply(Dataset.scala:2108)\n  at org.apache.spark.sql.Dataset$$anonfun$foreach$1.apply(Dataset.scala:2108)\n  at org.apache.spark.sql.execution.SQLExecution$.withNewExecutionId(SQLExecution.scala:57)\n  at org.apache.spark.sql.Dataset.withNewExecutionId(Dataset.scala:2546)\n  at org.apache.spark.sql.Dataset.foreach(Dataset.scala:2107)\n  ... 62 elided\n"},"dateCreated":"2017-03-08T07:35:22+0000","dateStarted":"2017-03-08T11:00:40+0000","dateFinished":"2017-03-08T11:02:09+0000","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:1004"},{"title":"Read Page Genral Info files","text":"// var base_directory = \"staging/hw\"\n// var files_list = listBucketContents(\"zeppelindata\", base_directory + \"/page/\")\n// var jsons_with_file_name_df = read_json_with_file_names_from_list2(\"zeppelindata\", files_list, false)\n\n// jsons_with_file_name_df.write.mode(\"overwrite\").parquet(\"s3a://zeppelindata/staging/hw/pages_raw_parquet080317\")\n// sqlContext.read.parquet(\"s3a://zeppelindata/staging/hw/pages_raw_parquet080317\").createOrReplaceTempView(\"new_pages_raw_parquet\")\n\nsqlContext.sql(\"\"\"\nwith pages_with_page_id as (select regexp_extract(file_name, '.*page/(\\\\d+)/.*', 1) as page_id,\n                                    content.*\n                             from new_pages_raw_parquet)\nselect *\nfrom pages_with_page_id\n\"\"\").repartition(1).write.mode(\"overwrite\").json(\"s3a://zeppelindata/staging/hw/pages_raw080317\")\nsqlContext.read.json(\"s3a://zeppelindata/staging/hw/pages_raw080317\").createOrReplaceTempView(\"new_pages_raw\")\n","user":"plancky","dateUpdated":"2017-03-09T12:24:15+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true,"editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1489002294285_859116681","id":"20170308-194454_1764261823","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"2017-03-08T07:44:54+0000","dateStarted":"2017-03-08T11:08:59+0000","dateFinished":"2017-03-08T11:09:10+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1005"},{"text":"%md\n\n##Photos","user":"plancky","dateUpdated":"2017-03-07T02:42:24+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1488733048020_-1826489654","id":"20170305-165728_1504402586","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>Photos</h2>\n"},"dateCreated":"2017-03-05T04:57:28+0000","dateStarted":"2017-03-07T02:42:24+0000","dateFinished":"2017-03-07T02:42:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1006"},{"title":"Delete photos fetch status of pages","text":"\nsqlContext.sql(\"\"\"\nselect concat('aws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/', id, ' --recursive') as command\nfrom facebook_homework_pages\norder by  md5(id) asc\nlimit 10\n\"\"\").foreach( a => { var statement_to_run = a.getAs[String](\"command\") ......... } )","user":"plancky","dateUpdated":"2017-03-05T05:55:43+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true,"editorHide":true,"tableHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485389009800_1377918270","id":"20170126-000329_1046655867","result":{"code":"SUCCESS","type":"TABLE","msg":"concat(aws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/, id,  --recursive)\naws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/146454158750353 --recursive\naws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/1415864628634163 --recursive\naws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/1824729117784651 --recursive\naws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/705763476210327 --recursive\naws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/202883613067490 --recursive\naws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/114976351852163 --recursive\naws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/835370026515358 --recursive\naws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/142827506122189 --recursive\naws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/135919063162473 --recursive\naws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/590913647738481 --recursive\n","comment":"","msgTable":[[{"value":"aws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/146454158750353 --recursive"}],[{"value":"aws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/1415864628634163 --recursive"}],[{"value":"aws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/1824729117784651 --recursive"}],[{"value":"aws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/705763476210327 --recursive"}],[{"value":"aws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/202883613067490 --recursive"}],[{"value":"aws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/114976351852163 --recursive"}],[{"value":"aws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/835370026515358 --recursive"}],[{"value":"aws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/142827506122189 --recursive"}],[{"value":"aws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/135919063162473 --recursive"}],[{"value":"aws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/590913647738481 --recursive"}]],"columnNames":[{"name":"concat(aws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/, id,  --recursive)","index":0,"aggr":"sum"}],"rows":[["aws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/146454158750353 --recursive"],["aws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/1415864628634163 --recursive"],["aws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/1824729117784651 --recursive"],["aws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/705763476210327 --recursive"],["aws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/202883613067490 --recursive"],["aws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/114976351852163 --recursive"],["aws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/835370026515358 --recursive"],["aws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/142827506122189 --recursive"],["aws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/135919063162473 --recursive"],["aws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/590913647738481 --recursive"]]},"dateCreated":"2017-01-26T12:03:29+0000","dateStarted":"2017-01-26T12:05:36+0000","dateFinished":"2017-01-26T12:05:37+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1007"},{"title":"Facebook call test","text":"def getUrlAsStringWithErrors(inputUrl: String): String = {\n    val client = new org.apache.http.impl.client.DefaultHttpClient()\n    val request = new org.apache.http.client.methods.HttpGet(inputUrl)\n    val response = client.execute(request)\n    val handler = new org.apache.http.impl.client.BasicResponseHandler()\n    var res = new java.io.ByteArrayOutputStream()\n    var code = response.getStatusLine.getStatusCode\n    org.apache.commons.io.IOUtils.copy(response.getEntity.getContent, res)\n    if (code == 200) {\n        return new String(res.toByteArray, \"utf-8\")\n    } else {\n        throw new Exception(\"Failed with body: \" + new String(res.toByteArray, \"utf-8\"))\n    }\n}\n\nvar pre_url  = \"https://user:GhNoFZ3CPPUsHQ2WGwCzFBj3m7tcYWf@planckfacebookclient.herokuapp.com/user/10153572127214868/feed/388715684614122?limit=10&fields=\"\nvar test_url = \"https://user:GhNoFZ3CPPUsHQ2WGwCzFBj3m7tcYWf@planckfacebookclient.herokuapp.com/user/10153572127214868/\"\nvar test_page_id = \"388715684614122\"\n\n// var feed_fields = \"id,created_time,from,is_hidden,is_published,message_tags,place,privacy,status_type,story,story_tags,targeting,to,updated_time,with_tags,comments.limit(200){comment_count,created_time,from,id,like_count,message_tags,likes.limit(200){id}},feed_targeting,link\"//{age_min,age_max}\"//,link{picture}\" //,\"\n\nvar new_feed_fields = \"id,created_time,feed_targeting,from,is_hidden,is_published,link,message_tags,picture,place{id},shares,source,status_type,targeting,to,updated_time,with_tags,comments.summary(true){like_count},likes.summary(true).limit(0),attachments{description_tags,media,target}\"\n\nvar new_photo_field = \"album{type,count},backdated_time,created_time,from,link,name,name_tags,page_story_id,place{id},updated_time,tags.summary(true){created_time,tagging_user},comments.summary(true){like_count},likes.summary(true).limit(0)\"\nvar photo_endpoint = \"photoswithfields/\"\nvar params = \"?limit=10&fields=\"\n\nval encodedfields = java.net.URLEncoder.encode(new_photo_field,\"UTF-8\");\nvar url = test_url + photo_endpoint + test_page_id + params + encodedfields \n\nvar bla = getUrlAsStringWithErrors(url)\nprintln(bla)\n","user":"plancky","dateUpdated":"2017-03-07T02:17:31+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true,"editorHide":true,"tableHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1488726412601_1141393916","id":"20170305-150652_2015382718","result":{"code":"SUCCESS","type":"TEXT","msg":"\nwarning: there were 1 deprecation warning(s); re-run with -deprecation for details\n\ngetUrlAsStringWithErrors: (inputUrl: String)String\n\npre_url: String = https://user:GhNoFZ3CPPUsHQ2WGwCzFBj3m7tcYWf@planckfacebookclient.herokuapp.com/user/10153572127214868/feed/388715684614122?limit=10&fields=\n\ntest_url: String = https://user:GhNoFZ3CPPUsHQ2WGwCzFBj3m7tcYWf@planckfacebookclient.herokuapp.com/user/10153572127214868/\n\ntest_page_id: String = 388715684614122\n\nnew_feed_fields: String = id,created_time,feed_targeting,from,is_hidden,is_published,link,message_tags,picture,place{id},shares,source,status_type,targeting,to,updated_time,with_tags,comments.summary(true){like_count},likes.summary(true).limit(0),attachments{description_tags,media,target}\n\nnew_photo_field: String = album{type,count},backdated_time,created_time,from,link,name,name_tags,page_story_id,place{id},updated_time,tags.summary(true){created_time,tagging_user},comments.summary(true){like_count},likes.summary(true).limit(0)\n\nphoto_endpoint: String = photoswithfields/\n\nparams: String = ?limit=10&fields=\n\nencodedfields: String = album%7Btype%2Ccount%7D%2Cbackdated_time%2Ccreated_time%2Cfrom%2Clink%2Cname%2Cname_tags%2Cpage_story_id%2Cplace%7Bid%7D%2Cupdated_time%2Ctags.summary%28true%29%7Bcreated_time%2Ctagging_user%7D%2Ccomments.summary%28true%29%7Blike_count%7D%2Clikes.summary%28true%29.limit%280%29\n\nurl: String = https://user:GhNoFZ3CPPUsHQ2WGwCzFBj3m7tcYWf@planckfacebookclient.herokuapp.com/user/10153572127214868/photoswithfields/388715684614122?limit=10&fields=album%7Btype%2Ccount%7D%2Cbackdated_time%2Ccreated_time%2Cfrom%2Clink%2Cname%2Cname_tags%2Cpage_story_id%2Cplace%7Bid%7D%2Cupdated_time%2Ctags.summary%28true%29%7Bcreated_time%2Ctagging_user%7D%2Ccomments.summary%28true%29%7Blike_count%7D%2Clikes.summary%28true%29.limit%280%29\nbla: String = {\"data\":[{\"id\":\"646181795534175\",\"metadata\":null,\"type\":null,\"name\":null,\"from\":{\"id\":\"388715684614122\",\"metadata\":null,\"type\":null,\"name\":\"Snow Island Coffee\",\"category\":null},\"picture\":null,\"pageStoryId\":null,\"reactions\":null,\"source\":null,\"height\":null,\"width\":null,\"link\":\"https://www.facebook.com/SnowIslandCoffee/photos/a.388988311253526.1073741827.388715684614122/646181795534175/?type=3\",\"icon\":null,\"album\":{\"id\":\"388988311253526\",\"metadata\":null,\"type\":\"profile\",\"name\":null,\"from\":null,\"description\":null,\"location\":null,\"link\":null,\"count\":7,\"coverPhoto\":null,\"privacy\":null,\"canUpload\":null,\"createdTime\":null,\"updatedTime\":null,\"place\":null,\"event\":null,\"comments\":null,\"picture\":null,\"likes\":null},\"canDelete\":null,\"canTag\":null,\"position\":null,\"event\":null,\"updatedTi...{\"data\":[{\"id\":\"646181795534175\",\"metadata\":null,\"type\":null,\"name\":null,\"from\":{\"id\":\"388715684614122\",\"metadata\":null,\"type\":null,\"name\":\"Snow Island Coffee\",\"category\":null},\"picture\":null,\"pageStoryId\":null,\"reactions\":null,\"source\":null,\"height\":null,\"width\":null,\"link\":\"https://www.facebook.com/SnowIslandCoffee/photos/a.388988311253526.1073741827.388715684614122/646181795534175/?type=3\",\"icon\":null,\"album\":{\"id\":\"388988311253526\",\"metadata\":null,\"type\":\"profile\",\"name\":null,\"from\":null,\"description\":null,\"location\":null,\"link\":null,\"count\":7,\"coverPhoto\":null,\"privacy\":null,\"canUpload\":null,\"createdTime\":null,\"updatedTime\":null,\"place\":null,\"event\":null,\"comments\":null,\"picture\":null,\"likes\":null},\"canDelete\":null,\"canTag\":null,\"position\":null,\"event\":null,\"updatedTime\":1469960273000,\"createdTime\":1469960273000,\"tags\":[],\"comments\":{\"summary\":{\"totalCount\":4,\"order\":\"ranked\",\"canComment\":true},\"data\":[{\"id\":\"646181795534175_646229558862732\",\"metadata\":null,\"type\":null,\"from\":null,\"message\":null,\"createdTime\":null,\"likes\":null,\"likeCount\":0,\"commentCount\":0,\"canRemove\":null,\"userLikes\":null,\"parent\":null,\"canComment\":null,\"canHide\":null,\"canReplyPrivately\":null,\"privateReplyConversation\":null,\"isHidden\":null,\"canLike\":null,\"object\":null,\"comments\":null,\"attachment\":null,\"messageTags\":[]},{\"id\":\"646181795534175_646648215487533\",\"metadata\":null,\"type\":null,\"from\":null,\"message\":null,\"createdTime\":null,\"likes\":null,\"likeCount\":1,\"commentCount\":0,\"canRemove\":null,\"userLikes\":null,\"parent\":null,\"canComment\":null,\"canHide\":null,\"canReplyPrivately\":null,\"privateReplyConversation\":null,\"isHidden\":null,\"canLike\":null,\"object\":null,\"comments\":null,\"attachment\":null,\"messageTags\":[]},{\"id\":\"646181795534175_646197062199315\",\"metadata\":null,\"type\":null,\"from\":null,\"message\":null,\"createdTime\":null,\"likes\":null,\"likeCount\":0,\"commentCount\":0,\"canRemove\":null,\"userLikes\":null,\"parent\":null,\"canComment\":null,\"canHide\":null,\"canReplyPrivately\":null,\"privateReplyConversation\":null,\"isHidden\":null,\"canLike\":null,\"object\":null,\"comments\":null,\"attachment\":null,\"messageTags\":[]}]},\"likes\":{\"summary\":{\"totalCount\":166,\"order\":null,\"canComment\":null},\"data\":[]},\"images\":[],\"nameTags\":[],\"place\":null,\"backdatedTime\":null,\"backdatedTimeGranularity\":null},{\"id\":\"544842302334792\",\"metadata\":null,\"type\":null,\"name\":null,\"from\":{\"id\":\"388715684614122\",\"metadata\":null,\"type\":null,\"name\":\"Snow Island Coffee\",\"category\":null},\"picture\":null,\"pageStoryId\":null,\"reactions\":null,\"source\":null,\"height\":null,\"width\":null,\"link\":\"https://www.facebook.com/SnowIslandCoffee/photos/a.388988311253526.1073741827.388715684614122/544842302334792/?type=3\",\"icon\":null,\"album\":{\"id\":\"388988311253526\",\"metadata\":null,\"type\":\"profile\",\"name\":null,\"from\":null,\"description\":null,\"location\":null,\"link\":null,\"count\":7,\"coverPhoto\":null,\"privacy\":null,\"canUpload\":null,\"createdTime\":null,\"updatedTime\":null,\"place\":null,\"event\":null,\"comments\":null,\"picture\":null,\"likes\":null},\"canDelete\":null,\"canTag\":null,\"position\":null,\"event\":null,\"updatedTime\":1469960270000,\"createdTime\":1448858635000,\"tags\":[],\"comments\":{\"summary\":{\"totalCount\":0,\"order\":\"ranked\",\"canComment\":true},\"data\":[]},\"likes\":{\"summary\":{\"totalCount\":78,\"order\":null,\"canComment\":null},\"data\":[]},\"images\":[],\"nameTags\":[],\"place\":null,\"backdatedTime\":null,\"backdatedTimeGranularity\":null},{\"id\":\"510469055772117\",\"metadata\":null,\"type\":null,\"name\":null,\"from\":{\"id\":\"388715684614122\",\"metadata\":null,\"type\":null,\"name\":\"Snow Island Coffee\",\"category\":null},\"picture\":null,\"pageStoryId\":null,\"reactions\":null,\"source\":null,\"height\":null,\"width\":null,\"link\":\"https://www.facebook.com/SnowIslandCoffee/photos/a.388988311253526.1073741827.388715684614122/510469055772117/?type=3\",\"icon\":null,\"album\":{\"id\":\"388988311253526\",\"metadata\":null,\"type\":\"profile\",\"name\":null,\"from\":null,\"description\":null,\"location\":null,\"link\":null,\"count\":7,\"coverPhoto\":null,\"privacy\":null,\"canUpload\":null,\"createdTime\":null,\"updatedTime\":null,\"place\":null,\"event\":null,\"comments\":null,\"picture\":null,\"likes\":null},\"canDelete\":null,\"canTag\":null,\"position\":null,\"event\":null,\"updatedTime\":1448858636000,\"createdTime\":1440388661000,\"tags\":[],\"comments\":{\"summary\":{\"totalCount\":1,\"order\":\"ranked\",\"canComment\":true},\"data\":[{\"id\":\"510469055772117_518798191605870\",\"metadata\":null,\"type\":null,\"from\":null,\"message\":null,\"createdTime\":null,\"likes\":null,\"likeCount\":1,\"commentCount\":0,\"canRemove\":null,\"userLikes\":null,\"parent\":null,\"canComment\":null,\"canHide\":null,\"canReplyPrivately\":null,\"privateReplyConversation\":null,\"isHidden\":null,\"canLike\":null,\"object\":null,\"comments\":null,\"attachment\":null,\"messageTags\":[]}]},\"likes\":{\"summary\":{\"totalCount\":105,\"order\":null,\"canComment\":null},\"data\":[]},\"images\":[],\"nameTags\":[],\"place\":null,\"backdatedTime\":null,\"backdatedTimeGranularity\":null},{\"id\":\"470948679724155\",\"metadata\":null,\"type\":null,\"name\":null,\"from\":{\"id\":\"388715684614122\",\"metadata\":null,\"type\":null,\"name\":\"Snow Island Coffee\",\"category\":null},\"picture\":null,\"pageStoryId\":null,\"reactions\":null,\"source\":null,\"height\":null,\"width\":null,\"link\":\"https://www.facebook.com/SnowIslandCoffee/photos/a.388988311253526.1073741827.388715684614122/470948679724155/?type=3\",\"icon\":null,\"album\":{\"id\":\"388988311253526\",\"metadata\":null,\"type\":\"profile\",\"name\":null,\"from\":null,\"description\":null,\"location\":null,\"link\":null,\"count\":7,\"coverPhoto\":null,\"privacy\":null,\"canUpload\":null,\"createdTime\":null,\"updatedTime\":null,\"place\":null,\"event\":null,\"comments\":null,\"picture\":null,\"likes\":null},\"canDelete\":null,\"canTag\":null,\"position\":null,\"event\":null,\"updatedTime\":1440388662000,\"createdTime\":1432723246000,\"tags\":[],\"comments\":{\"summary\":{\"totalCount\":1,\"order\":\"ranked\",\"canComment\":true},\"data\":[{\"id\":\"470948679724155_471754546310235\",\"metadata\":null,\"type\":null,\"from\":null,\"message\":null,\"createdTime\":null,\"likes\":null,\"likeCount\":1,\"commentCount\":0,\"canRemove\":null,\"userLikes\":null,\"parent\":null,\"canComment\":null,\"canHide\":null,\"canReplyPrivately\":null,\"privateReplyConversation\":null,\"isHidden\":null,\"canLike\":null,\"object\":null,\"comments\":null,\"attachment\":null,\"messageTags\":[]}]},\"likes\":{\"summary\":{\"totalCount\":32,\"order\":null,\"canComment\":null},\"data\":[]},\"images\":[],\"nameTags\":[],\"place\":null,\"backdatedTime\":null,\"backdatedTimeGranularity\":null},{\"id\":\"400679483417742\",\"metadata\":null,\"type\":null,\"name\":null,\"from\":{\"id\":\"388715684614122\",\"metadata\":null,\"type\":null,\"name\":\"Snow Island Coffee\",\"category\":null},\"picture\":null,\"pageStoryId\":null,\"reactions\":null,\"source\":null,\"height\":null,\"width\":null,\"link\":\"https://www.facebook.com/SnowIslandCoffee/photos/a.388988311253526.1073741827.388715684614122/400679483417742/?type=3\",\"icon\":null,\"album\":{\"id\":\"388988311253526\",\"metadata\":null,\"type\":\"profile\",\"name\":null,\"from\":null,\"description\":null,\"location\":null,\"link\":null,\"count\":7,\"coverPhoto\":null,\"privacy\":null,\"canUpload\":null,\"createdTime\":null,\"updatedTime\":null,\"place\":null,\"event\":null,\"comments\":null,\"picture\":null,\"likes\":null},\"canDelete\":null,\"canTag\":null,\"position\":null,\"event\":null,\"updatedTime\":1432723246000,\"createdTime\":1419422921000,\"tags\":[],\"comments\":{\"summary\":{\"totalCount\":0,\"order\":\"ranked\",\"canComment\":true},\"data\":[]},\"likes\":{\"summary\":{\"totalCount\":10,\"order\":null,\"canComment\":null},\"data\":[]},\"images\":[],\"nameTags\":[],\"place\":null,\"backdatedTime\":null,\"backdatedTimeGranularity\":null},{\"id\":\"390562494429441\",\"metadata\":null,\"type\":null,\"name\":null,\"from\":{\"id\":\"388715684614122\",\"metadata\":null,\"type\":null,\"name\":\"Snow Island Coffee\",\"category\":null},\"picture\":null,\"pageStoryId\":null,\"reactions\":null,\"source\":null,\"height\":null,\"width\":null,\"link\":\"https://www.facebook.com/SnowIslandCoffee/photos/a.388988311253526.1073741827.388715684614122/390562494429441/?type=3\",\"icon\":null,\"album\":{\"id\":\"388988311253526\",\"metadata\":null,\"type\":\"profile\",\"name\":null,\"from\":null,\"description\":null,\"location\":null,\"link\":null,\"count\":7,\"coverPhoto\":null,\"privacy\":null,\"canUpload\":null,\"createdTime\":null,\"updatedTime\":null,\"place\":null,\"event\":null,\"comments\":null,\"picture\":null,\"likes\":null},\"canDelete\":null,\"canTag\":null,\"position\":null,\"event\":null,\"updatedTime\":1417517808000,\"createdTime\":1417517808000,\"tags\":[],\"comments\":{\"summary\":{\"totalCount\":0,\"order\":\"ranked\",\"canComment\":true},\"data\":[]},\"likes\":{\"summary\":{\"totalCount\":8,\"order\":null,\"canComment\":null},\"data\":[]},\"images\":[],\"nameTags\":[],\"place\":null,\"backdatedTime\":null,\"backdatedTimeGranularity\":null},{\"id\":\"388988314586859\",\"metadata\":null,\"type\":null,\"name\":null,\"from\":{\"id\":\"388715684614122\",\"metadata\":null,\"type\":null,\"name\":\"Snow Island Coffee\",\"category\":null},\"picture\":null,\"pageStoryId\":null,\"reactions\":null,\"source\":null,\"height\":null,\"width\":null,\"link\":\"https://www.facebook.com/SnowIslandCoffee/photos/a.388988311253526.1073741827.388715684614122/388988314586859/?type=3\",\"icon\":null,\"album\":{\"id\":\"388988311253526\",\"metadata\":null,\"type\":\"profile\",\"name\":null,\"from\":null,\"description\":null,\"location\":null,\"link\":null,\"count\":7,\"coverPhoto\":null,\"privacy\":null,\"canUpload\":null,\"createdTime\":null,\"updatedTime\":null,\"place\":null,\"event\":null,\"comments\":null,\"picture\":null,\"likes\":null},\"canDelete\":null,\"canTag\":null,\"position\":null,\"event\":null,\"updatedTime\":1417242263000,\"createdTime\":1417242263000,\"tags\":[],\"comments\":{\"summary\":{\"totalCount\":0,\"order\":\"ranked\",\"canComment\":true},\"data\":[]},\"likes\":{\"summary\":{\"totalCount\":8,\"order\":null,\"canComment\":null},\"data\":[]},\"images\":[],\"nameTags\":[],\"place\":null,\"backdatedTime\":null,\"backdatedTimeGranularity\":null}],\"cursor\":{\"afterCursor\":\"Mzg4OTg4MzE0NTg2ODU5\",\"beforeCursor\":\"NjQ2MTgxNzk1NTM0MTc1\"},\"paging\":{\"next\":null,\"previous\":null}}\n"},"dateCreated":"2017-03-05T03:06:52+0000","dateStarted":"2017-03-06T03:44:55+0000","dateFinished":"2017-03-06T03:44:58+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1008"},{"title":"Get page photos","text":"\n// @RequestMapping(value = \"/user/{userId}/photoswithfields/{objectId}\", method = RequestMethod.GET)\n// public Paged<PhotoWithSummary> getOtherPhotosWithFields(@PathVariable(\"userId\") String userId,\n//                                                         @PathVariable(\"objectId\") String objectId,\n//                                                         @RequestParam(value = \"uploaded\", required = false, defaultValue = \"false\") boolean uplaoded,\n//                                                         @RequestParam(value = \"limit\", required = false, defaultValue = \"50\") int limit,\n//                                                         @RequestParam(value = \"fields\", required = false, defaultValue = \"\") String fields,\n//                                                         @RequestParam(value = \"afterCursor\", required = false, defaultValue = \"\") String after,\n//                                                         @RequestParam(value = \"beforeCursor\", required = false, defaultValue = \"\") String before) \n\nvar limit_photos_per_page = 25 // more than this will fail due to too much data being fetched\nvar max_retry = 5\n\nvar new_photo_field = \"album{type,count},backdated_time,created_time,from,link,name,name_tags,page_story_id,place{id},updated_time,tags.summary(true){created_time,tagging_user},comments.summary(true){like_count},likes.summary(true).limit(0)\"\nval encodedfields = java.net.URLEncoder.encode(new_photo_field,\"UTF-8\");\n\nsqlContext.sql(\"\"\"\nselect *\nfrom (select id,\n             row_number() over (order by md5(id)) as rownumb\n      from (select distinct id \n            from facebook_homework_pages\n           )\n     )\nwhere id <> '13856871189'\norder by rand()\n\"\"\").map(a => a.getAs[String](\"id\"))\n    // .collect\n    .repartition(8)\n    .foreach(fetched_page_id => {\n\n        var page_id = fetched_page_id\n        var max_pages = 5 //10 //50\n        var current_user_id = getRandomFacebookUserId()\n        var uploaded_options = List(\"true\", \"false\")\n        var retray_cnt = 0\n        \n        for (uploaded <- uploaded_options) {\n            var current_done_file = base_directory + \"/photos_status/\" + page_id + \"/\" + uploaded\n            var found_done_file = fileExistsInS3(\"zeppelindata\", current_done_file)\n            \n            var current_last_page_file = base_directory + \"/photos/\" + page_id + \"/\" + uploaded + \"/\" + max_pages\n            var found_last_page_file = fileExistsInS3(\"zeppelindata\", current_last_page_file)\n            \n            if (!found_done_file && !found_last_page_file) {\n        \n                //  DO NOT USE NEXT PAGE URL => ONLY USE planckfacebookclient.herokuapp.com CALLS WITH AFTER_CURSOR\n                var after_cursor = \"\"\n                \n                import scala.util.control.Breaks._\n                breakable { \n                    var page_number = 0\n                   \n                    while (page_number <= max_pages) {\n                        \n                    // }\n                    // for (page_number <- 0 to max_pages) {\n                        println(\"Working page \" + page_number + \" in page_id \" + page_id + \" uploaded=\" + uploaded)\n                    \n                        val objectMapper = new com.fasterxml.jackson.databind.ObjectMapper() with com.fasterxml.jackson.module.scala.experimental.ScalaObjectMapper;\n                        objectMapper.registerModule(com.fasterxml.jackson.module.scala.DefaultScalaModule)\n                        \n                        var url_to_get = \"https://user:GhNoFZ3CPPUsHQ2WGwCzFBj3m7tcYWf@planckfacebookclient.herokuapp.com/user/\" + current_user_id + \"/photoswithfields/\" + page_id + \n                                                                                                                                   \"?limit=\" + limit_photos_per_page +\n                                                                                                                                   \"&fields=\" + encodedfields +\n                                                                                                                                   \"&uploaded=\" + uploaded +\n                                                                                                                                   \"&afterCursor=\" + after_cursor\n                        var current_reply = \"\"\n                        try {\n                            println(url_to_get)\n            \n                            // var current_reply = getUrlAsString(url_to_get)\n                            current_reply = getUrlAsStringWithErrors(url_to_get)\n                            page_number += 1\n                            \n                            // Write content to s3\n                            writeContentToS3(current_reply, \"zeppelindata\", base_directory + \"/photos/\" + page_id + \"/\" + uploaded + \"/\" + page_number)\n                        \n                            // Get next page (or stop trying to fetch)\n                            var cursor_object_option = objectMapper.readValue[Map[String, Object]](current_reply).get(\"cursor\")\n                            if (cursor_object_option.isEmpty || cursor_object_option.get == null) {\n                                // println(\"should break at cursor\")\n                                writeContentToS3(\"DONE\", \"zeppelindata\", current_done_file)\n                                break\n    \n                            } else {\n                                var after_cursor_option = cursor_object_option.get.asInstanceOf[Map[String, Object]].get(\"afterCursor\")\n                                if (after_cursor_option.isEmpty || after_cursor_option.get == null) {\n                                    // println(\"should break at after_cursor_option\")\n                                    writeContentToS3(\"DONE\", \"zeppelindata\", current_done_file)\n                                    break\n    \n                                } else {\n                                    after_cursor = after_cursor_option.get.asInstanceOf[String]\n                                }\n                            }\n    \n                        } catch {\n                            case e: Exception => {\n                                println(\"Got for page_id: \" + page_id + \" exception: \" + e.getMessage)\n                                if (e.getMessage.contains(\"was migrated to page ID\")) {\n                                    var pattern = \"\"\".* was migrated to page ID (\\d+).*\"\"\".r\n                                    var pattern(new_page_id) = e.getMessage\n\n                                    println(\"Migraging \" + page_id + \" to \" + new_page_id)\n                                    writeContentToS3(\"Migraging \" + page_id + \" to \" + new_page_id, \"zeppelindata\", current_done_file + \"_migrated\")\n                                    writeContentToS3(\"DONE\", \"zeppelindata\", current_done_file)\n                                    page_number = 0\n                                    page_id = new_page_id\n                                    \n                                } else if (e.getMessage.matches(\".*cannot be loaded due to missing permissions, or does not support this operation. Please read the Graph API documentation.*\")) {\n                                    println(\"Ignoring \" + page_id)\n                                    writeContentToS3(e.getMessage, \"zeppelindata\", current_done_file + \"_error\")\n                                    writeContentToS3(\"DONE\", \"zeppelindata\", current_done_file)\n                                    break\n\n                                } else if (e.getMessage.contains(\"\"\"www.herokucdn.com/error-pages/application-error.html\"\"\")) {\n                                    println(\"Ignoring \" + page_id)\n                                    writeContentToS3(e.getMessage, \"zeppelindata\", current_done_file + \"_error\")\n                                    writeContentToS3(\"DONE\", \"zeppelindata\", current_done_file)\n                                    break\n\n                                } else if (e.getMessage.matches(\".*Please reduce the amount of data you're asking for, then retry your request.*\")) {\n                                    println(\"Ignoring \" + page_id)\n                                    writeContentToS3(e.getMessage, \"zeppelindata\", current_done_file + \"_error\")\n                                    writeContentToS3(\"DONE\", \"zeppelindata\", current_done_file)\n                                    break\n                                    \n                                } else if (e.getMessage.matches(\".*Service temporarily unavailable.*\")){\n                                    if (retray_cnt < max_retry){\n                                        retray_cnt += 1\n                                        println(\"Page ID \" + page_id + \" got Service temporarily unavailabl, retries to get the data\")\n                                    } else {\n                                        throw new Exception(\"Failed on page \" + page_id + \" (after \" +   max_retry + \" retries), with error \" + e.getMessage, e)\n                                    }\n                                } else {\n                                    throw new Exception(\"Failed on page \" + page_id + \" and error \" + e.getMessage, e)\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    })\n","user":"plancky","dateUpdated":"2017-03-12T12:11:07+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true,"editorHide":false,"lineNumbers":true,"tableHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485017063904_-1188656857","id":"20170121-164423_447121102","result":{"code":"ERROR","type":"TEXT","msg":"\nlimit_photos_per_page: Int = 25\n\nmax_retry: Int = 5\n\nnew_photo_field: String = album{type,count},backdated_time,created_time,from,link,name,name_tags,page_story_id,place{id},updated_time,tags.summary(true){created_time,tagging_user},comments.summary(true){like_count},likes.summary(true).limit(0)\n\nencodedfields: String = album%7Btype%2Ccount%7D%2Cbackdated_time%2Ccreated_time%2Cfrom%2Clink%2Cname%2Cname_tags%2Cpage_story_id%2Cplace%7Bid%7D%2Cupdated_time%2Ctags.summary%28true%29%7Bcreated_time%2Ctagging_user%7D%2Ccomments.summary%28true%29%7Blike_count%7D%2Clikes.summary%28true%29.limit%280%29\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\norg.apache.spark.SparkException: Job 134 cancelled part of cancelled job group zeppelin-20170121-164423_447121102\n  at org.apache.spark.scheduler.DAGScheduler.org$apache$spark$scheduler$DAGScheduler$$failJobAndIndependentStages(DAGScheduler.scala:1454)\n  at org.apache.spark.scheduler.DAGScheduler.handleJobCancellation(DAGScheduler.scala:1393)\n  at org.apache.spark.scheduler.DAGScheduler$$anonfun$handleJobGroupCancelled$1.apply$mcVI$sp(DAGScheduler.scala:795)\n  at org.apache.spark.scheduler.DAGScheduler$$anonfun$handleJobGroupCancelled$1.apply(DAGScheduler.scala:795)\n  at org.apache.spark.scheduler.DAGScheduler$$anonfun$handleJobGroupCancelled$1.apply(DAGScheduler.scala:795)\n  at scala.collection.mutable.HashSet.foreach(HashSet.scala:78)\n  at org.apache.spark.scheduler.DAGScheduler.handleJobGroupCancelled(DAGScheduler.scala:795)\n  at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.doOnReceive(DAGScheduler.scala:1642)\n  at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:1622)\n  at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:1611)\n  at org.apache.spark.util.EventLoop$$anon$1.run(EventLoop.scala:48)\n  at org.apache.spark.scheduler.DAGScheduler.runJob(DAGScheduler.scala:632)\n  at org.apache.spark.SparkContext.runJob(SparkContext.scala:1873)\n  at org.apache.spark.SparkContext.runJob(SparkContext.scala:1886)\n  at org.apache.spark.SparkContext.runJob(SparkContext.scala:1899)\n  at org.apache.spark.SparkContext.runJob(SparkContext.scala:1913)\n  at org.apache.spark.rdd.RDD$$anonfun$foreach$1.apply(RDD.scala:894)\n  at org.apache.spark.rdd.RDD$$anonfun$foreach$1.apply(RDD.scala:892)\n  at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:151)\n  at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:112)\n  at org.apache.spark.rdd.RDD.withScope(RDD.scala:358)\n  at org.apache.spark.rdd.RDD.foreach(RDD.scala:892)\n  at org.apache.spark.sql.Dataset$$anonfun$foreach$1.apply$mcV$sp(Dataset.scala:2108)\n  at org.apache.spark.sql.Dataset$$anonfun$foreach$1.apply(Dataset.scala:2108)\n  at org.apache.spark.sql.Dataset$$anonfun$foreach$1.apply(Dataset.scala:2108)\n  at org.apache.spark.sql.execution.SQLExecution$.withNewExecutionId(SQLExecution.scala:57)\n  at org.apache.spark.sql.Dataset.withNewExecutionId(Dataset.scala:2546)\n  at org.apache.spark.sql.Dataset.foreach(Dataset.scala:2107)\n  ... 62 elided\n"},"dateCreated":"2017-01-21T04:44:23+0000","dateStarted":"2017-03-07T11:00:09+0000","dateFinished":"2017-03-07T11:00:12+0000","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:1009"},{"title":"Photos statistics","text":"var base_directory = \"staging/hw\"\nread_json_with_file_names(\"s3a://zeppelindata/\" + base_directory + \"/salame_facebook_homework_photos/*/*\", false, \"salame_facebook_homework_photos_with_files\", true, 16, 16)\nprintln()\n\nsqlContext.sql(\"\"\"\nwith photos_with_page_id as (select regexp_extract(file_name, '.*salame_facebook_homework_photos/(\\\\d+)/.*', 1) as page_id,\n                                    photo.*\n                             from salame_facebook_homework_photos_with_files\n                             lateral view explode (content.data) d as photo),\n     page_stats as (select page_id,\n                           count(*)                  as total_photos, \n                           count(distinct id)        as distinct_photos,\n                           count(distinct `from`.id) as distinct_from,\n                           avg(size(comments))       as avg_comments,\n                           sum(size(comments))       as sum_comments,\n                           avg(size(likes))          as avg_likes,\n                           sum(size(likes))          as sum_likes\n                      from photos_with_page_id\n                      group by page_id)\nselect *\nfrom page_stats\n\"\"\").show\n","user":"plancky","dateUpdated":"2017-03-07T02:22:22+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true,"editorHide":true,"tableHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485024083994_265989710","id":"20170121-184123_921939727","result":{"code":"SUCCESS","type":"TEXT","msg":"\nbase_directory: String = staging/hw\nres145: Any = [content: struct<cursor: struct<afterCursor: string, beforeCursor: string>, data: array<struct<album:struct<canUpload:string,comments:string,count:string,coverPhoto:string,createdTime:bigint,description:string,event:string,from:struct<category:string,id:string,metadata:string,name:string,type:string>,id:string,likes:string,link:string,location:string,metadata:string,name:string,picture:string,place:struct<categoryList:array<string>,id:string,location:struct<city:string,country:string,latitude:double,locatedIn:string,longitude:double,name:string,region:string,state:string,street:string,zip:string>,locationAsString:string,metadata:string,name:string,overallRating:string,type:string>,privacy:string,type:string,updatedTime:bigint>,backdatedTime:bigint,backdatedTimeGranularity:...\n+----------------+------------+---------------+-------------+------------------+------------+------------------+---------+\n|         page_id|total_photos|distinct_photos|distinct_from|      avg_comments|sum_comments|         avg_likes|sum_likes|\n+----------------+------------+---------------+-------------+------------------+------------+------------------+---------+\n|1390998467815508|         277|            277|            1| 0.927797833935018|         257| 7.364620938628159|     2040|\n|1410222549007313|         264|            231|            1|5.2272727272727275|        1380|10.780303030303031|     2846|\n|    168282878593|         280|            280|            1|0.7285714285714285|         204|3.5142857142857142|      984|\n| 459632330778523|         277|            276|            1|2.2274368231046933|         617| 9.566787003610107|     2650|\n| 195290567180525|         277|            277|            1|  1.44043321299639|         399| 23.62815884476534|     6545|\n|1451039891877167|         315|            276|            1| 5.380952380952381|        1695|24.006349206349206|     7562|\n+----------------+------------+---------------+-------------+------------------+------------+------------------+---------+\n\n"},"dateCreated":"2017-01-21T06:41:23+0000","dateStarted":"2017-01-25T01:15:21+0000","dateFinished":"2017-01-25T01:15:30+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1010"},{"title":"Read photo files","text":"// var base_directory = \"staging/hw\"\n// var files_list = listBucketContents(\"zeppelindata\", base_directory + \"/photos/\")\n// var jsons_with_file_name_df = read_json_with_file_names_from_list2(\"zeppelindata\", files_list, false)\n\n// jsons_with_file_name_df.write.mode(\"overwrite\").parquet(\"s3a://zeppelindata/staging/hw/photos_raw_parquet070317\")\n// sqlContext.read.parquet(\"s3a://zeppelindata/staging/hw/photos_raw_parquet070317\").createOrReplaceTempView(\"photos_raw_parquet\")\n\nsqlContext.sql(\"\"\"\nwith photos_with_page_id as (select regexp_extract(file_name, '.*photos/(\\\\d+)/.*', 1) as page_id,\n                                    photo.*\n                             from photos_raw_parquet\n                             lateral view explode (content.data) d as photo)\nselect *\nfrom photos_with_page_id\n\"\"\").repartition(1).write.mode(\"overwrite\").json(\"s3a://zeppelindata/staging/hw/photos_raw070317\")\nsqlContext.read.json(\"s3a://zeppelindata/staging/hw/photos_raw070317\").createOrReplaceTempView(\"photos_raw\")","user":"plancky","dateUpdated":"2017-03-09T12:15:40+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true,"editorHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1488705712441_-83216761","id":"20170305-092152_1381058840","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"2017-03-05T09:21:52+0000","dateStarted":"2017-03-07T12:16:11+0000","dateFinished":"2017-03-07T12:21:04+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1011"},{"title":"Basic photos Analysis","text":"%sql\n\nwith photo_comments as(\n    -- select  page_id,\n    --         id,\n    --         sum(c.likecount) as comments_total_likes,\n    --         count(distinct c.from.id) as distinct_comments_writers\n    -- from facebook_homework_photos\n    -- lateral view explode(comments) as c\n    select page_id, \n           id, \n           sum(comment.likeCount) as comments_total_likes\n    from photos_raw\n    lateral view explode(comments.data) as comment\n    group by page_id, id\n),\nphotos as( \n    select  f.page_id,\n            f.id, --as photo_id,\n            createdTime,\n            `from`.id as from_id,\n            (case when name is not null then 1 else 0 end)  as has_name,\n            (case when place is not null then 1 else 0 end) as has_place,\n            -- (case when event is not null then 1 else 0 end) as has_event,\n            -- event,\n            album,\n            -- size(likes) as like_count,\n            likes.summary.totalCount as like_count,\n            -- size(comments) as comments_count,\n            comments.summary.totalCount as comments_count,\n            size(tags) as tags_count,\n            c.comments_total_likes\n            -- c.distinct_comments_writers\n    from photos_raw f\n    join photo_comments c\n    on f.page_id = c.page_id and\n       f.id = c.id\n)\n\nselect    page_id, \n          count(distinct id)                                                                                                as total_photos,\n          count(distinct from_id)                                                                                           as photo_distinct_uploaders, \n          from_unixtime(min(createdTime/1000))                                                                              as photo_first_photo_time,\n          from_unixtime(max(createdTime/1000))                                                                              as photo_last_photo_time,\n          count(distinct from_unixtime(createdTime/1000, 'yyyy-MM'))                                                        as photo_number_of_different_months_for_photos,\n          datediff(from_unixtime(max(createdTime/1000)), from_unixtime(min(createdTime/1000)))                              as photo_number_of_days_between_first_and_last_photos,\n          sum(has_name)                                                                                                     as photo_count_has_name,\n          sum(has_place)                                                                                                    as photo_count_has_place,\n        --   sum(has_event)                                                                                                    as photo_count_has_event,\n        --   count(distinct event)                                                                                             as photo_count_events_in_photos,\n          max(like_count)                                                                                                   as photo_max_like,\n          min(like_count)                                                                                                   as photo_min_like,\n          avg(like_count)                                                                                                   as photo_avg_likes_per_photo,\n          sum(like_count)                                                                                                   as photo_sum_like_count,\n          avg(tags_count)                                                                                                   as photo_avg_people_tagged_per_photo,\n          avg(case when tags_count > 0 then tags_count else null end)                                                       as photo_avg_people_tagged_per_photo_with_more_than_zero,\n          max(tags_count)                                                                                                   as photo_max_people_tagged,\n          sum(tags_count)                                                                                                   as photo_sum_people_tagged_count,\n          avg(comments_count)                                                                                               as photo_avg_comments_per_photo,\n          sum(comments_count)                                                                                               as photo_sum_comments_count,\n          avg(comments_total_likes)                                                                                         as photo_avg_likes_per_comments,\n          --avg(distinct_comments_writers)                                                                                    as photo_avg_distinct_comments_writers,\n          count(distinct album.id)                                                                                                           as photo_number_of_albums,\n          count(distinct case when album.`type` = 'cover'   then album.id else null end)                                                     as photo_number_of_cover_albums,\n          count(distinct case when album.`type` = 'profile' then album.id else null end)                                                     as photo_number_of_profile_albums,\n          count(distinct case when album.`type` is not null and album.`type` <> 'cover' \n                            and album.`type` <> 'profile' then album.id else null end)                                                       as photo_number_of_other_albums,\n          count(distinct case when album.`type` is null     then album.id else null end)                                                     as photo_number_of_null_albums,\n          count(distinct case when album.`type` = 'cover'   then id else null end)                                                           as photo_number_of_photos_in_cover_albums,\n          count(distinct case when album.`type` = 'profile' then id else null end)                                                           as photo_number_of_photos_in_profile_albums,\n          count(distinct case when album.`type` is not null and album.`type` <> 'cover' and album.`type` <> 'profile' then id else null end) as photo_number_of_photos_in_other_albums,\n          count(distinct case when album.`type` is null     then id else null end)                                                           as photo_number_of_photos_in_null_albums\nfrom photos\ngroup by page_id\nlimit 10\n","user":"plancky","dateUpdated":"2017-03-13T19:54:06+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[{"name":"page_id","index":0,"aggr":"sum"}],"values":[{"name":"total_photos","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"page_id","index":0,"aggr":"sum"}}},"enabled":true,"editorMode":"ace/mode/sql","lineNumbers":true,"title":true,"editorHide":false,"tableHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1488462734254_-1815325023","id":"20170302-135214_1583919250","result":{"code":"SUCCESS","type":"TABLE","msg":"page_id\ttotal_photos\tphoto_distinct_uploaders\tphoto_first_photo_time\tphoto_last_photo_time\tphoto_number_of_different_months_for_photos\tphoto_number_of_days_between_first_and_last_photos\tphoto_count_has_name\tphoto_count_has_place\tphoto_max_like\tphoto_min_like\tphoto_avg_likes_per_photo\tphoto_sum_like_count\tphoto_avg_people_tagged_per_photo\tphoto_avg_people_tagged_per_photo_with_more_than_zero\tphoto_max_people_tagged\tphoto_sum_people_tagged_count\tphoto_avg_comments_per_photo\tphoto_sum_comments_count\tphoto_avg_likes_per_comments\tphoto_number_of_albums\tphoto_number_of_cover_albums\tphoto_number_of_profile_albums\tphoto_number_of_other_albums\tphoto_number_of_null_albums\tphoto_number_of_photos_in_cover_albums\tphoto_number_of_photos_in_profile_albums\tphoto_number_of_photos_in_other_albums\tphoto_number_of_photos_in_null_albums\n573261482778954\t54\t1\t2015-10-15 10:35:19\t2017-03-06 13:04:10\t9\t508\t53\t0\t21430\t2\t1540.0185185185185\t83161\t0.0\tnull\t0\t0\t12.703703703703704\t686\t4.462962962962963\t2\t0\t1\t1\t0\t0\t1\t53\t0\n88388366982\t112\t1\t2010-01-22 17:44:19\t2017-03-05 08:03:55\t10\t2599\t103\t0\t8971\t12\t314.5892857142857\t35234\t0.0\tnull\t0\t0\t11.241071428571429\t1259\t20.267857142857142\t3\t1\t1\t1\t0\t29\t8\t75\t0\n996233940428345\t120\t1\t2016-01-22 06:18:22\t2017-03-05 07:00:00\t13\t408\t115\t1\t1464\t3\t53.95867768595041\t6529\t0.0\tnull\t0\t0\t11.413223140495868\t1381\t5.975206611570248\t4\t1\t1\t2\t0\t3\t2\t115\t0\n999573303447632\t151\t1\t2016-11-23 11:09:10\t2017-03-06 07:49:01\t4\t103\t126\t0\t3376\t3\t999.2384105960265\t150885\t0.0\tnull\t0\t0\t784.1125827814569\t118401\t4.112582781456954\t2\t0\t1\t1\t0\t0\t1\t150\t0\n168282878593\t48\t1\t2009-10-27 15:36:15\t2017-02-28 16:45:07\t19\t2681\t38\t0\t49\t0\t6.458333333333333\t310\t0.0\tnull\t0\t0\t2.6666666666666665\t128\t1.8333333333333333\t3\t1\t1\t1\t0\t15\t4\t29\t0\n100729723318554\t54\t1\t2010-07-27 09:44:20\t2017-02-13 15:19:54\t15\t2393\t33\t0\t2844\t2\t255.90740740740742\t13819\t0.0\tnull\t0\t0\t18.5\t999\t9.333333333333334\t4\t1\t1\t2\t0\t3\t9\t42\t0\n261738857516331\t17\t1\t2016-07-14 03:11:11\t2017-03-05 17:00:31\t7\t234\t10\t0\t111\t0\t36.11764705882353\t614\t0.0\tnull\t0\t0\t3.235294117647059\t55\t1.411764705882353\t3\t1\t0\t2\t0\t2\t0\t15\t0\n283585422954\t54\t1\t2012-01-05 18:59:44\t2017-02-23 19:01:38\t13\t1876\t37\t3\t3389\t1\t302.5740740740741\t16339\t0.16666666666666666\t1.8\t3\t9\t12.25925925925926\t662\t4.037037037037037\t4\t0\t1\t3\t0\t0\t12\t42\t0\n1729953540613315\t61\t1\t2016-07-20 16:18:54\t2017-03-06 07:55:26\t7\t229\t50\t0\t400\t6\t77.40322580645162\t4799\t0.0\tnull\t0\t0\t3.3225806451612905\t206\t0.25806451612903225\t4\t1\t1\t2\t0\t1\t9\t51\t0\n1771627236441961\t30\t1\t2016-08-31 10:25:15\t2017-02-27 03:24:31\t6\t180\t20\t6\t4020\t2\t325.06451612903226\t10077\t0.0\tnull\t0\t0\t10.548387096774194\t327\t5.451612903225806\t4\t1\t1\t2\t0\t2\t1\t27\t0\n","comment":"","msgTable":[[{"key":"total_photos","value":"573261482778954"},{"key":"total_photos","value":"54"},{"key":"total_photos","value":"1"},{"key":"total_photos","value":"2015-10-15 10:35:19"},{"key":"total_photos","value":"2017-03-06 13:04:10"},{"key":"total_photos","value":"9"},{"key":"total_photos","value":"508"},{"key":"total_photos","value":"53"},{"key":"total_photos","value":"0"},{"key":"total_photos","value":"21430"},{"key":"total_photos","value":"2"},{"key":"total_photos","value":"1540.0185185185185"},{"key":"total_photos","value":"83161"},{"key":"total_photos","value":"0.0"},{"key":"total_photos","value":"null"},{"key":"total_photos","value":"0"},{"key":"total_photos","value":"0"},{"key":"total_photos","value":"12.703703703703704"},{"key":"total_photos","value":"686"},{"key":"total_photos","value":"4.462962962962963"},{"key":"total_photos","value":"2"},{"key":"total_photos","value":"0"},{"key":"total_photos","value":"1"},{"key":"total_photos","value":"1"},{"key":"total_photos","value":"0"},{"key":"total_photos","value":"0"},{"key":"total_photos","value":"1"},{"key":"total_photos","value":"53"},{"key":"total_photos","value":"0"}],[{"key":"photo_distinct_uploaders","value":"88388366982"},{"key":"photo_distinct_uploaders","value":"112"},{"key":"photo_distinct_uploaders","value":"1"},{"key":"photo_distinct_uploaders","value":"2010-01-22 17:44:19"},{"key":"photo_distinct_uploaders","value":"2017-03-05 08:03:55"},{"key":"photo_distinct_uploaders","value":"10"},{"key":"photo_distinct_uploaders","value":"2599"},{"key":"photo_distinct_uploaders","value":"103"},{"key":"photo_distinct_uploaders","value":"0"},{"key":"photo_distinct_uploaders","value":"8971"},{"key":"photo_distinct_uploaders","value":"12"},{"key":"photo_distinct_uploaders","value":"314.5892857142857"},{"key":"photo_distinct_uploaders","value":"35234"},{"key":"photo_distinct_uploaders","value":"0.0"},{"key":"photo_distinct_uploaders","value":"null"},{"key":"photo_distinct_uploaders","value":"0"},{"key":"photo_distinct_uploaders","value":"0"},{"key":"photo_distinct_uploaders","value":"11.241071428571429"},{"key":"photo_distinct_uploaders","value":"1259"},{"key":"photo_distinct_uploaders","value":"20.267857142857142"},{"key":"photo_distinct_uploaders","value":"3"},{"key":"photo_distinct_uploaders","value":"1"},{"key":"photo_distinct_uploaders","value":"1"},{"key":"photo_distinct_uploaders","value":"1"},{"key":"photo_distinct_uploaders","value":"0"},{"key":"photo_distinct_uploaders","value":"29"},{"key":"photo_distinct_uploaders","value":"8"},{"key":"photo_distinct_uploaders","value":"75"},{"key":"photo_distinct_uploaders","value":"0"}],[{"key":"photo_first_photo_time","value":"996233940428345"},{"key":"photo_first_photo_time","value":"120"},{"key":"photo_first_photo_time","value":"1"},{"key":"photo_first_photo_time","value":"2016-01-22 06:18:22"},{"key":"photo_first_photo_time","value":"2017-03-05 07:00:00"},{"key":"photo_first_photo_time","value":"13"},{"key":"photo_first_photo_time","value":"408"},{"key":"photo_first_photo_time","value":"115"},{"key":"photo_first_photo_time","value":"1"},{"key":"photo_first_photo_time","value":"1464"},{"key":"photo_first_photo_time","value":"3"},{"key":"photo_first_photo_time","value":"53.95867768595041"},{"key":"photo_first_photo_time","value":"6529"},{"key":"photo_first_photo_time","value":"0.0"},{"key":"photo_first_photo_time","value":"null"},{"key":"photo_first_photo_time","value":"0"},{"key":"photo_first_photo_time","value":"0"},{"key":"photo_first_photo_time","value":"11.413223140495868"},{"key":"photo_first_photo_time","value":"1381"},{"key":"photo_first_photo_time","value":"5.975206611570248"},{"key":"photo_first_photo_time","value":"4"},{"key":"photo_first_photo_time","value":"1"},{"key":"photo_first_photo_time","value":"1"},{"key":"photo_first_photo_time","value":"2"},{"key":"photo_first_photo_time","value":"0"},{"key":"photo_first_photo_time","value":"3"},{"key":"photo_first_photo_time","value":"2"},{"key":"photo_first_photo_time","value":"115"},{"key":"photo_first_photo_time","value":"0"}],[{"key":"photo_last_photo_time","value":"999573303447632"},{"key":"photo_last_photo_time","value":"151"},{"key":"photo_last_photo_time","value":"1"},{"key":"photo_last_photo_time","value":"2016-11-23 11:09:10"},{"key":"photo_last_photo_time","value":"2017-03-06 07:49:01"},{"key":"photo_last_photo_time","value":"4"},{"key":"photo_last_photo_time","value":"103"},{"key":"photo_last_photo_time","value":"126"},{"key":"photo_last_photo_time","value":"0"},{"key":"photo_last_photo_time","value":"3376"},{"key":"photo_last_photo_time","value":"3"},{"key":"photo_last_photo_time","value":"999.2384105960265"},{"key":"photo_last_photo_time","value":"150885"},{"key":"photo_last_photo_time","value":"0.0"},{"key":"photo_last_photo_time","value":"null"},{"key":"photo_last_photo_time","value":"0"},{"key":"photo_last_photo_time","value":"0"},{"key":"photo_last_photo_time","value":"784.1125827814569"},{"key":"photo_last_photo_time","value":"118401"},{"key":"photo_last_photo_time","value":"4.112582781456954"},{"key":"photo_last_photo_time","value":"2"},{"key":"photo_last_photo_time","value":"0"},{"key":"photo_last_photo_time","value":"1"},{"key":"photo_last_photo_time","value":"1"},{"key":"photo_last_photo_time","value":"0"},{"key":"photo_last_photo_time","value":"0"},{"key":"photo_last_photo_time","value":"1"},{"key":"photo_last_photo_time","value":"150"},{"key":"photo_last_photo_time","value":"0"}],[{"key":"photo_number_of_different_months_for_photos","value":"168282878593"},{"key":"photo_number_of_different_months_for_photos","value":"48"},{"key":"photo_number_of_different_months_for_photos","value":"1"},{"key":"photo_number_of_different_months_for_photos","value":"2009-10-27 15:36:15"},{"key":"photo_number_of_different_months_for_photos","value":"2017-02-28 16:45:07"},{"key":"photo_number_of_different_months_for_photos","value":"19"},{"key":"photo_number_of_different_months_for_photos","value":"2681"},{"key":"photo_number_of_different_months_for_photos","value":"38"},{"key":"photo_number_of_different_months_for_photos","value":"0"},{"key":"photo_number_of_different_months_for_photos","value":"49"},{"key":"photo_number_of_different_months_for_photos","value":"0"},{"key":"photo_number_of_different_months_for_photos","value":"6.458333333333333"},{"key":"photo_number_of_different_months_for_photos","value":"310"},{"key":"photo_number_of_different_months_for_photos","value":"0.0"},{"key":"photo_number_of_different_months_for_photos","value":"null"},{"key":"photo_number_of_different_months_for_photos","value":"0"},{"key":"photo_number_of_different_months_for_photos","value":"0"},{"key":"photo_number_of_different_months_for_photos","value":"2.6666666666666665"},{"key":"photo_number_of_different_months_for_photos","value":"128"},{"key":"photo_number_of_different_months_for_photos","value":"1.8333333333333333"},{"key":"photo_number_of_different_months_for_photos","value":"3"},{"key":"photo_number_of_different_months_for_photos","value":"1"},{"key":"photo_number_of_different_months_for_photos","value":"1"},{"key":"photo_number_of_different_months_for_photos","value":"1"},{"key":"photo_number_of_different_months_for_photos","value":"0"},{"key":"photo_number_of_different_months_for_photos","value":"15"},{"key":"photo_number_of_different_months_for_photos","value":"4"},{"key":"photo_number_of_different_months_for_photos","value":"29"},{"key":"photo_number_of_different_months_for_photos","value":"0"}],[{"key":"photo_number_of_days_between_first_and_last_photos","value":"100729723318554"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"54"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"1"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"2010-07-27 09:44:20"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"2017-02-13 15:19:54"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"15"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"2393"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"33"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"0"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"2844"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"2"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"255.90740740740742"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"13819"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"0.0"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"null"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"0"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"0"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"18.5"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"999"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"9.333333333333334"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"4"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"1"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"1"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"2"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"0"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"3"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"9"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"42"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"0"}],[{"key":"photo_count_has_name","value":"261738857516331"},{"key":"photo_count_has_name","value":"17"},{"key":"photo_count_has_name","value":"1"},{"key":"photo_count_has_name","value":"2016-07-14 03:11:11"},{"key":"photo_count_has_name","value":"2017-03-05 17:00:31"},{"key":"photo_count_has_name","value":"7"},{"key":"photo_count_has_name","value":"234"},{"key":"photo_count_has_name","value":"10"},{"key":"photo_count_has_name","value":"0"},{"key":"photo_count_has_name","value":"111"},{"key":"photo_count_has_name","value":"0"},{"key":"photo_count_has_name","value":"36.11764705882353"},{"key":"photo_count_has_name","value":"614"},{"key":"photo_count_has_name","value":"0.0"},{"key":"photo_count_has_name","value":"null"},{"key":"photo_count_has_name","value":"0"},{"key":"photo_count_has_name","value":"0"},{"key":"photo_count_has_name","value":"3.235294117647059"},{"key":"photo_count_has_name","value":"55"},{"key":"photo_count_has_name","value":"1.411764705882353"},{"key":"photo_count_has_name","value":"3"},{"key":"photo_count_has_name","value":"1"},{"key":"photo_count_has_name","value":"0"},{"key":"photo_count_has_name","value":"2"},{"key":"photo_count_has_name","value":"0"},{"key":"photo_count_has_name","value":"2"},{"key":"photo_count_has_name","value":"0"},{"key":"photo_count_has_name","value":"15"},{"key":"photo_count_has_name","value":"0"}],[{"key":"photo_count_has_place","value":"283585422954"},{"key":"photo_count_has_place","value":"54"},{"key":"photo_count_has_place","value":"1"},{"key":"photo_count_has_place","value":"2012-01-05 18:59:44"},{"key":"photo_count_has_place","value":"2017-02-23 19:01:38"},{"key":"photo_count_has_place","value":"13"},{"key":"photo_count_has_place","value":"1876"},{"key":"photo_count_has_place","value":"37"},{"key":"photo_count_has_place","value":"3"},{"key":"photo_count_has_place","value":"3389"},{"key":"photo_count_has_place","value":"1"},{"key":"photo_count_has_place","value":"302.5740740740741"},{"key":"photo_count_has_place","value":"16339"},{"key":"photo_count_has_place","value":"0.16666666666666666"},{"key":"photo_count_has_place","value":"1.8"},{"key":"photo_count_has_place","value":"3"},{"key":"photo_count_has_place","value":"9"},{"key":"photo_count_has_place","value":"12.25925925925926"},{"key":"photo_count_has_place","value":"662"},{"key":"photo_count_has_place","value":"4.037037037037037"},{"key":"photo_count_has_place","value":"4"},{"key":"photo_count_has_place","value":"0"},{"key":"photo_count_has_place","value":"1"},{"key":"photo_count_has_place","value":"3"},{"key":"photo_count_has_place","value":"0"},{"key":"photo_count_has_place","value":"0"},{"key":"photo_count_has_place","value":"12"},{"key":"photo_count_has_place","value":"42"},{"key":"photo_count_has_place","value":"0"}],[{"key":"photo_max_like","value":"1729953540613315"},{"key":"photo_max_like","value":"61"},{"key":"photo_max_like","value":"1"},{"key":"photo_max_like","value":"2016-07-20 16:18:54"},{"key":"photo_max_like","value":"2017-03-06 07:55:26"},{"key":"photo_max_like","value":"7"},{"key":"photo_max_like","value":"229"},{"key":"photo_max_like","value":"50"},{"key":"photo_max_like","value":"0"},{"key":"photo_max_like","value":"400"},{"key":"photo_max_like","value":"6"},{"key":"photo_max_like","value":"77.40322580645162"},{"key":"photo_max_like","value":"4799"},{"key":"photo_max_like","value":"0.0"},{"key":"photo_max_like","value":"null"},{"key":"photo_max_like","value":"0"},{"key":"photo_max_like","value":"0"},{"key":"photo_max_like","value":"3.3225806451612905"},{"key":"photo_max_like","value":"206"},{"key":"photo_max_like","value":"0.25806451612903225"},{"key":"photo_max_like","value":"4"},{"key":"photo_max_like","value":"1"},{"key":"photo_max_like","value":"1"},{"key":"photo_max_like","value":"2"},{"key":"photo_max_like","value":"0"},{"key":"photo_max_like","value":"1"},{"key":"photo_max_like","value":"9"},{"key":"photo_max_like","value":"51"},{"key":"photo_max_like","value":"0"}],[{"key":"photo_min_like","value":"1771627236441961"},{"key":"photo_min_like","value":"30"},{"key":"photo_min_like","value":"1"},{"key":"photo_min_like","value":"2016-08-31 10:25:15"},{"key":"photo_min_like","value":"2017-02-27 03:24:31"},{"key":"photo_min_like","value":"6"},{"key":"photo_min_like","value":"180"},{"key":"photo_min_like","value":"20"},{"key":"photo_min_like","value":"6"},{"key":"photo_min_like","value":"4020"},{"key":"photo_min_like","value":"2"},{"key":"photo_min_like","value":"325.06451612903226"},{"key":"photo_min_like","value":"10077"},{"key":"photo_min_like","value":"0.0"},{"key":"photo_min_like","value":"null"},{"key":"photo_min_like","value":"0"},{"key":"photo_min_like","value":"0"},{"key":"photo_min_like","value":"10.548387096774194"},{"key":"photo_min_like","value":"327"},{"key":"photo_min_like","value":"5.451612903225806"},{"key":"photo_min_like","value":"4"},{"key":"photo_min_like","value":"1"},{"key":"photo_min_like","value":"1"},{"key":"photo_min_like","value":"2"},{"key":"photo_min_like","value":"0"},{"key":"photo_min_like","value":"2"},{"key":"photo_min_like","value":"1"},{"key":"photo_min_like","value":"27"},{"key":"photo_min_like","value":"0"}]],"columnNames":[{"name":"page_id","index":0,"aggr":"sum"},{"name":"total_photos","index":1,"aggr":"sum"},{"name":"photo_distinct_uploaders","index":2,"aggr":"sum"},{"name":"photo_first_photo_time","index":3,"aggr":"sum"},{"name":"photo_last_photo_time","index":4,"aggr":"sum"},{"name":"photo_number_of_different_months_for_photos","index":5,"aggr":"sum"},{"name":"photo_number_of_days_between_first_and_last_photos","index":6,"aggr":"sum"},{"name":"photo_count_has_name","index":7,"aggr":"sum"},{"name":"photo_count_has_place","index":8,"aggr":"sum"},{"name":"photo_max_like","index":9,"aggr":"sum"},{"name":"photo_min_like","index":10,"aggr":"sum"},{"name":"photo_avg_likes_per_photo","index":11,"aggr":"sum"},{"name":"photo_sum_like_count","index":12,"aggr":"sum"},{"name":"photo_avg_people_tagged_per_photo","index":13,"aggr":"sum"},{"name":"photo_avg_people_tagged_per_photo_with_more_than_zero","index":14,"aggr":"sum"},{"name":"photo_max_people_tagged","index":15,"aggr":"sum"},{"name":"photo_sum_people_tagged_count","index":16,"aggr":"sum"},{"name":"photo_avg_comments_per_photo","index":17,"aggr":"sum"},{"name":"photo_sum_comments_count","index":18,"aggr":"sum"},{"name":"photo_avg_likes_per_comments","index":19,"aggr":"sum"},{"name":"photo_number_of_albums","index":20,"aggr":"sum"},{"name":"photo_number_of_cover_albums","index":21,"aggr":"sum"},{"name":"photo_number_of_profile_albums","index":22,"aggr":"sum"},{"name":"photo_number_of_other_albums","index":23,"aggr":"sum"},{"name":"photo_number_of_null_albums","index":24,"aggr":"sum"},{"name":"photo_number_of_photos_in_cover_albums","index":25,"aggr":"sum"},{"name":"photo_number_of_photos_in_profile_albums","index":26,"aggr":"sum"},{"name":"photo_number_of_photos_in_other_albums","index":27,"aggr":"sum"},{"name":"photo_number_of_photos_in_null_albums","index":28,"aggr":"sum"}],"rows":[["573261482778954","54","1","2015-10-15 10:35:19","2017-03-06 13:04:10","9","508","53","0","21430","2","1540.0185185185185","83161","0.0","null","0","0","12.703703703703704","686","4.462962962962963","2","0","1","1","0","0","1","53","0"],["88388366982","112","1","2010-01-22 17:44:19","2017-03-05 08:03:55","10","2599","103","0","8971","12","314.5892857142857","35234","0.0","null","0","0","11.241071428571429","1259","20.267857142857142","3","1","1","1","0","29","8","75","0"],["996233940428345","120","1","2016-01-22 06:18:22","2017-03-05 07:00:00","13","408","115","1","1464","3","53.95867768595041","6529","0.0","null","0","0","11.413223140495868","1381","5.975206611570248","4","1","1","2","0","3","2","115","0"],["999573303447632","151","1","2016-11-23 11:09:10","2017-03-06 07:49:01","4","103","126","0","3376","3","999.2384105960265","150885","0.0","null","0","0","784.1125827814569","118401","4.112582781456954","2","0","1","1","0","0","1","150","0"],["168282878593","48","1","2009-10-27 15:36:15","2017-02-28 16:45:07","19","2681","38","0","49","0","6.458333333333333","310","0.0","null","0","0","2.6666666666666665","128","1.8333333333333333","3","1","1","1","0","15","4","29","0"],["100729723318554","54","1","2010-07-27 09:44:20","2017-02-13 15:19:54","15","2393","33","0","2844","2","255.90740740740742","13819","0.0","null","0","0","18.5","999","9.333333333333334","4","1","1","2","0","3","9","42","0"],["261738857516331","17","1","2016-07-14 03:11:11","2017-03-05 17:00:31","7","234","10","0","111","0","36.11764705882353","614","0.0","null","0","0","3.235294117647059","55","1.411764705882353","3","1","0","2","0","2","0","15","0"],["283585422954","54","1","2012-01-05 18:59:44","2017-02-23 19:01:38","13","1876","37","3","3389","1","302.5740740740741","16339","0.16666666666666666","1.8","3","9","12.25925925925926","662","4.037037037037037","4","0","1","3","0","0","12","42","0"],["1729953540613315","61","1","2016-07-20 16:18:54","2017-03-06 07:55:26","7","229","50","0","400","6","77.40322580645162","4799","0.0","null","0","0","3.3225806451612905","206","0.25806451612903225","4","1","1","2","0","1","9","51","0"],["1771627236441961","30","1","2016-08-31 10:25:15","2017-02-27 03:24:31","6","180","20","6","4020","2","325.06451612903226","10077","0.0","null","0","0","10.548387096774194","327","5.451612903225806","4","1","1","2","0","2","1","27","0"]]},"dateCreated":"2017-03-02T01:52:14+0000","dateStarted":"2017-03-07T12:23:16+0000","dateFinished":"2017-03-07T12:24:04+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1012"},{"title":"Create photos analysis table","text":"sqlContext.sql(\"\"\"\nwith photo_comments as(\n    select page_id, \n           id, \n           sum(comment.likeCount) as comments_total_likes\n    from photos_raw\n    lateral view explode(comments.data) as comment\n    group by page_id, id\n),\nphotos as( \n    select  f.page_id,\n            f.id, --as photo_id,\n            createdTime,\n            `from`.id as from_id,\n            (case when name is not null then 1 else 0 end)  as has_name,\n            (case when place is not null then 1 else 0 end) as has_place,\n            -- (case when event is not null then 1 else 0 end) as has_event,\n            -- event,\n            album,\n            -- size(likes) as like_count,\n            likes.summary.totalCount as like_count,\n            -- size(comments) as comments_count,\n            comments.summary.totalCount as comments_count,\n            size(tags) as tags_count,\n            c.comments_total_likes\n            -- c.distinct_comments_writers\n    from photos_raw f\n    join photo_comments c\n    on f.page_id = c.page_id and\n       f.id = c.id\n)\n\nselect    page_id, \n          count(distinct id)                                                                                                as total_photos,\n          count(distinct from_id)                                                                                           as photo_distinct_uploaders, \n          from_unixtime(min(createdTime/1000))                                                                              as photo_first_photo_time,\n          from_unixtime(max(createdTime/1000))                                                                              as photo_last_photo_time,\n          count(distinct from_unixtime(createdTime/1000, 'yyyy-MM'))                                                        as photo_number_of_different_months_for_photos,\n          datediff(from_unixtime(max(createdTime/1000)), from_unixtime(min(createdTime/1000)))                              as photo_number_of_days_between_first_and_last_photos,\n          sum(has_name)                                                                                                     as photo_count_has_name,\n          sum(has_place)                                                                                                    as photo_count_has_place,\n        --   sum(has_event)                                                                                                    as photo_count_has_event,\n        --   count(distinct event)                                                                                             as photo_count_events_in_photos,\n          max(like_count)                                                                                                   as photo_max_like,\n          min(like_count)                                                                                                   as photo_min_like,\n          avg(like_count)                                                                                                   as photo_avg_likes_per_photo,\n          sum(like_count)                                                                                                   as photo_sum_like_count,\n          avg(tags_count)                                                                                                   as photo_avg_people_tagged_per_photo,\n          avg(case when tags_count > 0 then tags_count else null end)                                                       as photo_avg_people_tagged_per_photo_with_more_than_zero,\n          max(tags_count)                                                                                                   as photo_max_people_tagged,\n          sum(tags_count)                                                                                                   as photo_sum_people_tagged_count,\n          avg(comments_count)                                                                                               as photo_avg_comments_per_photo,\n          sum(comments_count)                                                                                               as photo_sum_comments_count,\n          avg(comments_total_likes)                                                                                         as photo_avg_likes_per_comments,\n          --avg(distinct_comments_writers)                                                                                    as photo_avg_distinct_comments_writers,\n          count(distinct album.id)                                                                                                           as photo_number_of_albums,\n          count(distinct case when album.`type` = 'cover'   then album.id else null end)                                                     as photo_number_of_cover_albums,\n          count(distinct case when album.`type` = 'profile' then album.id else null end)                                                     as photo_number_of_profile_albums,\n          count(distinct case when album.`type` is not null and album.`type` <> 'cover' \n                            and album.`type` <> 'profile' then album.id else null end)                                                       as photo_number_of_other_albums,\n          count(distinct case when album.`type` is null     then album.id else null end)                                                     as photo_number_of_null_albums,\n          count(distinct case when album.`type` = 'cover'   then id else null end)                                                           as photo_number_of_photos_in_cover_albums,\n          count(distinct case when album.`type` = 'profile' then id else null end)                                                           as photo_number_of_photos_in_profile_albums,\n          count(distinct case when album.`type` is not null and album.`type` <> 'cover' and album.`type` <> 'profile' then id else null end) as photo_number_of_photos_in_other_albums,\n          count(distinct case when album.`type` is null     then id else null end)                                                           as photo_number_of_photos_in_null_albums\nfrom photos\ngroup by page_id\n\"\"\").repartition(1).write.mode(\"overwrite\").json(\"s3a://zeppelindata/staging/hw/photos070317\")\nsqlContext.read.json(\"s3a://zeppelindata/staging/hw/photos070317\").createOrReplaceTempView(\"facebook_homework_photos_analysis\")","user":"plancky","dateUpdated":"2017-03-13T19:54:33+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true,"editorHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1488889816304_-276120056","id":"20170307-123016_1492231301","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"2017-03-07T12:30:16+0000","dateStarted":"2017-03-07T12:31:19+0000","dateFinished":"2017-03-07T12:32:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1013"},{"title":"Create photos analysis table (old)","text":"sqlContext.sql(\"\"\"\nwith facebook_homework_photos as (select regexp_extract(file_name, '.*salame_facebook_homework_photos/(\\\\d+)/.*', 1) as page_id,\n                                     photo.*\n                              from salame_facebook_homework_photos_with_files\n                              lateral view explode (content.data) d as photo),\nphoto_comments as(\n    select  page_id,\n            id,\n            sum(c.likecount) as comments_total_likes,\n            count(distinct c.from.id) as distinct_comments_writers\n    from facebook_homework_photos\n    lateral view explode(comments) as c\n    group by page_id, id\n),\nphotos as( \n    select  f.page_id,\n            f.id, --as photo_id,\n            createdTime,\n            `from`.id as from_id,\n            (case when name is not null then 1 else 0 end)  as has_name,\n            (case when place is not null then 1 else 0 end) as has_place,\n            -- (case when event is not null then 1 else 0 end) as has_event,\n            -- event,\n            album,\n            size(likes) as like_count,\n            size(comments) as comments_count,\n            size(tags) as tags_count,\n            c.comments_total_likes,\n            c.distinct_comments_writers\n    from facebook_homework_photos f\n    join photo_comments c\n    on f.page_id = c.page_id and\n       f.id = c.id\n)\n\nselect    page_id, \n          count(distinct id)                                                                                                                       as total_photos,\n          count(distinct from_id)                                                                                                                  as distinct_uploaders, \n          from_unixtime(min(createdTime/1000))                                                                                                     as first_photo_time,\n          from_unixtime(max(createdTime/1000))                                                                                                     as last_photo_time,\n          count(distinct from_unixtime(createdTime/1000, 'yyyy-MM'))                                                                               as number_of_different_months_for_photos,\n          datediff(from_unixtime(max(createdTime/1000)), from_unixtime(min(createdTime/1000)))                                                     as number_of_days_between_first_and_last_photos,\n          sum(has_name)                                                                                                                            as count_has_name,\n          sum(has_place)                                                                                                                           as count_has_place,\n          -- sum(has_event)                                                                                                                           as count_has_event,\n          -- count(distinct event)                                                                                                                    as count_events_in_photos,\n          max(like_count)                                                                                                                          as photo_max_like,\n          min(like_count)                                                                                                                          as photo_min_like,\n          avg(like_count)                                                                                                                          as avg_likes_per_photo,\n          sum(like_count)                                                                                                                          as sum_like_count,\n          avg(tags_count)                                                                                                                          as avg_people_tagged_per_photo,\n          avg(case when tags_count > 0 then tags_count else null end)                                                                              as avg_people_tagged_per_photo_with_more_than_zero,\n          max(tags_count)                                                                                                                          as photo_max_people_tagged,\n          sum(tags_count)                                                                                                                          as sum_people_tagged_count,\n          avg(comments_count)                                                                                                                      as avg_comments_per_photo,\n          sum(comments_count)                                                                                                                      as sum_comments_count,\n          avg(comments_total_likes)                                                                                                                as avg_comments_total_likes,\n          avg(distinct_comments_writers)                                                                                                           as avg_distinct_comments_writers,\n          count(distinct album.id)                                                                                                                 as number_of_albums,\n          count(distinct case when album.`type` = 'cover'   then album.id else null end)                                                           as number_of_cover_albums,\n          count(distinct case when album.`type` = 'profile' then album.id else null end)                                                           as number_of_profile_albums,\n          count(distinct case when album.`type` is not null and album.`type` <> 'cover' and album.`type` <> 'profile' then album.id else null end) as number_of_other_albums,\n          count(distinct case when album.`type` is null     then album.id else null end)                                                           as number_of_null_albums,\n          count(distinct case when album.`type` = 'cover'   then id else null end)                                                                 as number_of_photos_in_cover_albums,\n          count(distinct case when album.`type` = 'profile' then id else null end)                                                                 as number_of_photos_in_profile_albums,\n          count(distinct case when album.`type` is not null and album.`type` <> 'cover' and album.`type` <> 'profile' then id else null end)       as number_of_photos_in_other_albums,\n          count(distinct case when album.`type` is null     then id else null end)                                                                 as number_of_photos_in_null_albums\nfrom photos\ngroup by page_id\n\"\"\").repartition(1).write.mode(\"overwrite\").json(\"s3a://zeppelindata/staging/hw/photos030317\")\nsqlContext.read.json(\"s3a://zeppelindata/staging/hw/photos030317\").createOrReplaceTempView(\"facebook_homework_photos_analysis\")","user":"plancky","dateUpdated":"2017-03-07T02:16:52+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true,"editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1488483870081_-1679277669","id":"20170302-194430_1016903916","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"2017-03-02T07:44:30+0000","dateStarted":"2017-03-05T09:34:37+0000","dateFinished":"2017-03-05T09:36:20+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1014"},{"title":"Photos Schem","text":"%sql\n\ndesc facebook_homework_photos_analysis","user":"plancky","dateUpdated":"2017-03-07T07:39:53+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[{"name":"col_name","index":0,"aggr":"sum"}],"values":[{"name":"data_type","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"col_name","index":0,"aggr":"sum"},"yAxis":{"name":"data_type","index":1,"aggr":"sum"}}},"enabled":true,"editorMode":"ace/mode/sql","title":true,"editorHide":true,"tableHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1488896921849_-405208287","id":"20170307-142841_1990780659","result":{"code":"SUCCESS","type":"TABLE","msg":"col_name\tdata_type\tcomment\npage_id\tstring\tnull\nphoto_avg_comments_per_photo\tdouble\tnull\nphoto_avg_likes_per_comments\tdouble\tnull\nphoto_avg_likes_per_photo\tdouble\tnull\nphoto_avg_people_tagged_per_photo\tdouble\tnull\nphoto_avg_people_tagged_per_photo_with_more_than_zero\tdouble\tnull\nphoto_count_has_name\tbigint\tnull\nphoto_count_has_place\tbigint\tnull\nphoto_distinct_uploaders\tbigint\tnull\nphoto_first_photo_time\tstring\tnull\nphoto_last_photo_time\tstring\tnull\nphoto_max_like\tbigint\tnull\nphoto_max_people_tagged\tbigint\tnull\nphoto_min_like\tbigint\tnull\nphoto_number_of_albums\tbigint\tnull\nphoto_number_of_cover_albums\tbigint\tnull\nphoto_number_of_days_between_first_and_last_photos\tbigint\tnull\nphoto_number_of_different_months_for_photos\tbigint\tnull\nphoto_number_of_null_albums\tbigint\tnull\nphoto_number_of_other_albums\tbigint\tnull\nphoto_number_of_photos_in_cover_albums\tbigint\tnull\nphoto_number_of_photos_in_null_albums\tbigint\tnull\nphoto_number_of_photos_in_other_albums\tbigint\tnull\nphoto_number_of_photos_in_profile_albums\tbigint\tnull\nphoto_number_of_profile_albums\tbigint\tnull\nphoto_sum_comments_count\tbigint\tnull\nphoto_sum_like_count\tbigint\tnull\nphoto_sum_people_tagged_count\tbigint\tnull\ntotal_photos\tbigint\tnull\n","comment":"","msgTable":[[{"key":"data_type","value":"page_id"},{"key":"data_type","value":"string"},{"key":"data_type","value":"null"}],[{"key":"comment","value":"photo_avg_comments_per_photo"},{"key":"comment","value":"double"},{"key":"comment","value":"null"}],[{"value":"photo_avg_likes_per_comments"},{"value":"double"},{"value":"null"}],[{"value":"photo_avg_likes_per_photo"},{"value":"double"},{"value":"null"}],[{"value":"photo_avg_people_tagged_per_photo"},{"value":"double"},{"value":"null"}],[{"value":"photo_avg_people_tagged_per_photo_with_more_than_zero"},{"value":"double"},{"value":"null"}],[{"value":"photo_count_has_name"},{"value":"bigint"},{"value":"null"}],[{"value":"photo_count_has_place"},{"value":"bigint"},{"value":"null"}],[{"value":"photo_distinct_uploaders"},{"value":"bigint"},{"value":"null"}],[{"value":"photo_first_photo_time"},{"value":"string"},{"value":"null"}],[{"value":"photo_last_photo_time"},{"value":"string"},{"value":"null"}],[{"value":"photo_max_like"},{"value":"bigint"},{"value":"null"}],[{"value":"photo_max_people_tagged"},{"value":"bigint"},{"value":"null"}],[{"value":"photo_min_like"},{"value":"bigint"},{"value":"null"}],[{"value":"photo_number_of_albums"},{"value":"bigint"},{"value":"null"}],[{"value":"photo_number_of_cover_albums"},{"value":"bigint"},{"value":"null"}],[{"value":"photo_number_of_days_between_first_and_last_photos"},{"value":"bigint"},{"value":"null"}],[{"value":"photo_number_of_different_months_for_photos"},{"value":"bigint"},{"value":"null"}],[{"value":"photo_number_of_null_albums"},{"value":"bigint"},{"value":"null"}],[{"value":"photo_number_of_other_albums"},{"value":"bigint"},{"value":"null"}],[{"value":"photo_number_of_photos_in_cover_albums"},{"value":"bigint"},{"value":"null"}],[{"value":"photo_number_of_photos_in_null_albums"},{"value":"bigint"},{"value":"null"}],[{"value":"photo_number_of_photos_in_other_albums"},{"value":"bigint"},{"value":"null"}],[{"value":"photo_number_of_photos_in_profile_albums"},{"value":"bigint"},{"value":"null"}],[{"value":"photo_number_of_profile_albums"},{"value":"bigint"},{"value":"null"}],[{"value":"photo_sum_comments_count"},{"value":"bigint"},{"value":"null"}],[{"value":"photo_sum_like_count"},{"value":"bigint"},{"value":"null"}],[{"value":"photo_sum_people_tagged_count"},{"value":"bigint"},{"value":"null"}],[{"value":"total_photos"},{"value":"bigint"},{"value":"null"}]],"columnNames":[{"name":"col_name","index":0,"aggr":"sum"},{"name":"data_type","index":1,"aggr":"sum"},{"name":"comment","index":2,"aggr":"sum"}],"rows":[["page_id","string","null"],["photo_avg_comments_per_photo","double","null"],["photo_avg_likes_per_comments","double","null"],["photo_avg_likes_per_photo","double","null"],["photo_avg_people_tagged_per_photo","double","null"],["photo_avg_people_tagged_per_photo_with_more_than_zero","double","null"],["photo_count_has_name","bigint","null"],["photo_count_has_place","bigint","null"],["photo_distinct_uploaders","bigint","null"],["photo_first_photo_time","string","null"],["photo_last_photo_time","string","null"],["photo_max_like","bigint","null"],["photo_max_people_tagged","bigint","null"],["photo_min_like","bigint","null"],["photo_number_of_albums","bigint","null"],["photo_number_of_cover_albums","bigint","null"],["photo_number_of_days_between_first_and_last_photos","bigint","null"],["photo_number_of_different_months_for_photos","bigint","null"],["photo_number_of_null_albums","bigint","null"],["photo_number_of_other_albums","bigint","null"],["photo_number_of_photos_in_cover_albums","bigint","null"],["photo_number_of_photos_in_null_albums","bigint","null"],["photo_number_of_photos_in_other_albums","bigint","null"],["photo_number_of_photos_in_profile_albums","bigint","null"],["photo_number_of_profile_albums","bigint","null"],["photo_sum_comments_count","bigint","null"],["photo_sum_like_count","bigint","null"],["photo_sum_people_tagged_count","bigint","null"],["total_photos","bigint","null"]]},"dateCreated":"2017-03-07T02:28:41+0000","dateStarted":"2017-03-07T02:29:24+0000","dateFinished":"2017-03-07T02:29:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1015"},{"text":"%md\n\n##Feeds","user":"plancky","dateUpdated":"2017-03-07T02:42:59+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","tableHide":false,"editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1488735716346_-589727732","id":"20170305-174156_1949801843","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>Feeds</h2>\n"},"dateCreated":"2017-03-05T05:41:56+0000","dateStarted":"2017-03-07T02:42:56+0000","dateFinished":"2017-03-07T02:42:56+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1016"},{"title":"Get page feed","text":"\n// @RequestMapping(value = \"/user/{userId}/feed/{objectId}\", method = RequestMethod.GET)\n// public Paged<Post> getOtherFeed(@PathVariable(\"userId\") String userId,\n//                                 @PathVariable(\"objectId\") String objectId,\n//                                 @RequestParam(value = \"fields\", required = false) String fields,\n//                                 @RequestParam(value = \"limit\", required = false, defaultValue = \"50\") int limit,\n//                                 @RequestParam(value = \"next\", required = false, defaultValue = \"\") String next,\n//                                 @RequestParam(value = \"previous\", required = false, defaultValue = \"\") String previous) {\n\n// var fields = \"id,created_time,from,is_hidden,is_published,message_tags,place,privacy,status_type,story,story_tags,targeting,to,updated_time,with_tags,comments.limit(200){comment_count//,created_time,from,id,like_count,message_tags,likes.limit(200){id}},likes,feed_targeting,link\"\n\nvar base_directory = \"staging/hw\"\nvar limit_posts_per_page = 15 //25// more than this will fail due to too much data being fetched\n\nvar new_fields = \"id,created_time,feed_targeting,from,is_hidden,is_published,link,message_tags,picture,place{id},shares,source,status_type,targeting,to,updated_time,with_tags,comments.summary(true){like_count},likes.summary(true).limit(0),attachments{description_tags,media,target}\"\nvar fields = java.net.URLEncoder.encode(new_fields,\"UTF-8\");\n\nsqlContext.sql(\"\"\"\nselect *\nfrom (select id,\n             row_number() over (order by md5(id)) as rownumb\n      from (select distinct id \n            from facebook_homework_pages\n           )\n     )\n\"\"\").map(a => a.getAs[String](\"id\"))\n    .repartition(4)\n    .foreach(fetched_page_id => {\n\n        var page_id = fetched_page_id\n        var max_pages = 9 //10//50\n        var current_user_id = getRandomFacebookUserId()\n\n        var current_done_file = base_directory + \"/feed_status/\" + page_id\n        var found_done_file = fileExistsInS3(\"zeppelindata\", current_done_file)\n        \n        var current_last_page_file = base_directory + \"/feed/\" + page_id + \"/\" + max_pages\n        var found_last_page_file = fileExistsInS3(\"zeppelindata\", current_last_page_file)\n        \n        if (!found_done_file && !found_last_page_file) {\n    \n            var next_page_url = \"\" \n            \n            import scala.util.control.Breaks._\n            breakable { \n                var page_number = 0\n                var url_to_get = \"\"\n                while (page_number <= max_pages) {\n                    \n                    println(\"Working page \" + page_number + \" in page_id \" + page_id)\n                \n                    val objectMapper = new com.fasterxml.jackson.databind.ObjectMapper() with com.fasterxml.jackson.module.scala.experimental.ScalaObjectMapper;\n                    objectMapper.registerModule(com.fasterxml.jackson.module.scala.DefaultScalaModule)\n\n                    if (page_number == 0) {\n                        url_to_get = \"https://user:GhNoFZ3CPPUsHQ2WGwCzFBj3m7tcYWf@planckfacebookclient.herokuapp.com/user/\" + current_user_id + \n                                        \"/feed/\" + page_id + \"?limit=\" + limit_posts_per_page + \"&fields=\" + fields\n                    } \n                    \n                    var current_reply = \"\"\n                    try {\n                        println(url_to_get)\n                        \n                        current_reply = getUrlAsStringWithErrors(url_to_get)\n                        page_number += 1\n                        \n                        // Write content to s3\n                        writeContentToS3(current_reply, \"zeppelindata\", base_directory + \"/feed/\" + page_id + \"/\" + page_number)\n                    \n                        // Get next page (or stop trying to fetch)\n                        var cursor_object_option = objectMapper.readValue[Map[String, Object]](current_reply).get(\"paging\")\n                        if (cursor_object_option.isEmpty || cursor_object_option.get == null) {\n                            // println(\"should break at cursor\")\n                            writeContentToS3(\"DONE\", \"zeppelindata\", current_done_file)\n                            break\n\n                        } else {\n                            var after_cursor_option = cursor_object_option.get.asInstanceOf[Map[String, Object]].get(\"next\")\n                            if (after_cursor_option.isEmpty || after_cursor_option.get == null) {\n                                // println(\"should break at after_cursor_option\")\n                                writeContentToS3(\"DONE\", \"zeppelindata\", current_done_file)\n                                break\n\n                            } else {\n                                url_to_get = after_cursor_option.get.asInstanceOf[String]\n                            }\n                        }\n\n                    } catch {\n                        case e: Exception => {\n                            println(\"Got for page_id: \" + page_id + \" exception: \" + e.getMessage)\n                            if (e.getMessage.contains(\"was migrated to page ID\")) {\n                                var pattern = \"\"\".* was migrated to page ID (\\d+).*\"\"\".r\n                                var pattern(new_page_id) = e.getMessage\n\n                                println(\"Migraging \" + page_id + \" to \" + new_page_id)\n                                writeContentToS3(\"Migraging \" + page_id + \" to \" + new_page_id, \"zeppelindata\", current_done_file + \"_migrated\")\n                                writeContentToS3(\"DONE\", \"zeppelindata\", current_done_file)\n                                page_number = 0\n                                page_id = new_page_id\n                                \n                            } else if (e.getMessage.matches(\".*cannot be loaded due to missing permissions, or does not support this operation. Please read the Graph API documentation.*\")) {\n                                println(\"Ignoring \" + page_id)\n                                writeContentToS3(e.getMessage, \"zeppelindata\", current_done_file + \"_error\")\n                                writeContentToS3(\"DONE\", \"zeppelindata\", current_done_file)\n                                break\n\n                            } else if (e.getMessage.contains(\"\"\"www.herokucdn.com/error-pages/application-error.html\"\"\")) {\n                                println(\"Ignoring \" + page_id)\n                                writeContentToS3(e.getMessage, \"zeppelindata\", current_done_file + \"_error\")\n                                writeContentToS3(\"DONE\", \"zeppelindata\", current_done_file)\n                                break\n\n                            } else if (e.getMessage.matches(\".*Please reduce the amount of data you're asking for, then retry your request.*\")) {\n                                println(\"Ignoring \" + page_id)\n                                writeContentToS3(e.getMessage, \"zeppelindata\", current_done_file + \"_error\")\n                                writeContentToS3(\"DONE\", \"zeppelindata\", current_done_file)\n                                break\n\n                            } else {\n                            throw new Exception(\"Failed on page \" + page_id + \" and error \" + e.getMessage, e)\n                            }\n                        }\n                    }\n                }\n                \n                writeContentToS3(\"DONE\", \"zeppelindata\", current_done_file)\n\n            }\n        }\n    })","user":"plancky","dateUpdated":"2017-03-08T07:38:07+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true,"editorHide":false,"tableHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1488041392350_-1556472722","id":"20170225-164952_1287418479","result":{"code":"SUCCESS","type":"TEXT","msg":"\nbase_directory: String = staging/hw\n\nlimit_posts_per_page: Int = 15\n\nnew_fields: String = id,created_time,feed_targeting,from,is_hidden,is_published,link,message_tags,picture,place{id},shares,source,status_type,targeting,to,updated_time,with_tags,comments.summary(true){like_count},likes.summary(true).limit(0),attachments{description_tags,media,target}\n\nfields: String = id%2Ccreated_time%2Cfeed_targeting%2Cfrom%2Cis_hidden%2Cis_published%2Clink%2Cmessage_tags%2Cpicture%2Cplace%7Bid%7D%2Cshares%2Csource%2Cstatus_type%2Ctargeting%2Cto%2Cupdated_time%2Cwith_tags%2Ccomments.summary%28true%29%7Blike_count%7D%2Clikes.summary%28true%29.limit%280%29%2Cattachments%7Bdescription_tags%2Cmedia%2Ctarget%7D\n"},"dateCreated":"2017-02-25T04:49:52+0000","dateStarted":"2017-03-05T11:14:15+0000","dateFinished":"2017-03-06T02:14:39+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1017"},{"title":"Create Feed Table","text":"// var base_directory = \"staging/hw\"\n// var files_list = listBucketContents(\"zeppelindata\", base_directory + \"/feed/\")\n// var jsons_with_file_name_df = read_json_with_file_names_from_list2(\"zeppelindata\", files_list, false)\n\n// jsons_with_file_name_df.write.mode(\"overwrite\").parquet(\"s3a://zeppelindata/staging/hw/feeds_raw_parquet\")\n// sqlContext.read.parquet(\"s3a://zeppelindata/staging/hw/feeds_raw_parquet\").createOrReplaceTempView(\"feeds_raw_parquet\")\n\nsqlContext.sql(\"\"\"\nwith feeds_with_page_id as (select regexp_extract(file_name, '.*feed/(\\\\d+)/.*', 1) as page_id,\n                                    feed.*\n                             from feeds_raw_parquet\n                             lateral view explode (content.data) d as feed)\nselect *\nfrom feeds_with_page_id\n\"\"\").repartition(1).write.mode(\"overwrite\").json(\"s3a://zeppelindata/staging/hw/feeds_raw050317\")\nsqlContext.read.json(\"s3a://zeppelindata/staging/hw/feeds_raw050317\").createOrReplaceTempView(\"feeds_raw\")","user":"plancky","dateUpdated":"2017-03-07T02:27:00+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true,"editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1488401682945_177557732","id":"20170301-205442_1334819450","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"2017-03-01T08:54:42+0000","dateStarted":"2017-03-06T10:16:38+0000","dateFinished":"2017-03-06T10:20:50+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1018"},{"title":"Basic Feed Analysis","text":"%sql\n\nwith posts_comments as(\nselect page_id, avg(comment_total_likes / comments_count) as avg_likes_per_comment\nfrom(\n    select page_id, id, avg(size(comments.data)) as comments_count,\n           (case when sum(comment.like_count) is not null then sum(comment.like_count) else sum(comment.likeCount) end) as comment_total_likes\n    from feeds_raw\n    lateral view explode(comments.data) as comment\n    group by page_id, id)\ngroup by page_id\n),\nposts as(\nselect  page_id,\n        count(distinct id)                                                                                                              as feed_post_count,\n        count(distinct `from`.id)                                                                                                       as feed_distinct_post_writers,\n        from_unixtime(min(createdTime/1000))                                                                                            as feed_first_post_time,\n        from_unixtime(max(createdTime/1000))                                                                                            as feed_last_post_time,\n        count(distinct from_unixtime(createdTime/1000, 'yyyy-MM'))                                                                      as feed_number_of_different_months_for_post,\n        datediff(from_unixtime(max(createdTime/1000)), from_unixtime(min(createdTime/1000)))                                            as feed_number_of_days_between_first_and_last_posts,\n        sum(case when updatedTime is not null then 1 else 0 end)                                                                        as feed_count_post_updated,\n        sum(case when updatedTime is not null then 1 else 0 end) / count(id)                                                            as feed_post_updated_prc,\n        avg(comments.summary.total_count)                                                                                               as feed_avg_comments,\n        max(comments.summary.total_count)                                                                                               as feed_max_comments,\n        min(comments.summary.total_count)                                                                                               as feed_min_comments,\n        std(comments.summary.total_count)                                                                                               as feed_std_comments,\n        avg(likes.summary.total_count)                                                                                                  as feed_avg_likes,\n        max(likes.summary.total_count)                                                                                                  as feed_max_likes,\n        min(likes.summary.total_count)                                                                                                  as feed_min_likes,\n        std(likes.summary.total_count)                                                                                                  as feed_std_likes,\n        avg(shares.count)                                                                                                               as feed_avg_shares,\n        max(shares.count)                                                                                                               as feed_max_shares,\n        min(shares.count)                                                                                                               as feed_min_shares,\n        std(shares.count)                                                                                                               as feed_std_shares,\n        sum(case when is_hidden = true or isHidden = true then 1 else 0 end)                                                            as feed_is_hidden_count,\n        sum(case when is_published = true or isPublished = true then 1 else 0 end)                                                      as feed_is_published_count,\n        avg(size(messageTags))                                                                                                          as feed_avg_people_tagged_per_post,\n        avg(case when size(messageTags) > 0 then size(messageTags) else null end)                                                       as feed_avg_people_tagged_per_post_with_more_than_zero,\n        max(size(messageTags))                                                                                                          as feed_post_max_people_tagged,\n        sum(size(messageTags))                                                                                                          as feed_sum_people_tagged_count,\n        avg(size(withTags))                                                                                                             as feed_avg_with_tagged_per_post,\n        avg(case when size(withTags) > 0 then size(withTags) else null end)                                                             as feed_avg_with_tagged_per_post_with_more_than_zero,\n        max(size(withTags))                                                                                                             as feed_post_max_with_tagged,\n        sum(size(withTags))                                                                                                             as feed_sum_with_tagged_count,\n        sum(case when place is not null then 1 else 0 end)                                                                              as feed_count_has_place,\n        count(distinct case when (statusType = 'shared_story') or (status_type = 'shared_story') then id else null end)                 as feed_number_of_shared_story_category,\n        count(distinct case when (statusType = 'added_photos') or (status_type = 'added_photos') then id else null end)                 as feed_number_of_added_photos_category,\n        count(distinct case when (statusType is not null and statusType <> 'shared_story' and statusType <> 'added_photos') \n                or (status_type is not null and status_type <> 'shared_story' and status_type <> 'added_photos') then id else null end) as feed_number_of_other_categories,\n        count(distinct case when statusType is null and status_type is null then id else null end)                                      as feed_number_of_null_category,\n        avg(sharesCount)                                                                                                                as feed_avg_shares_cnt,\n        max(sharesCount)                                                                                                                as feed_max_shares_cnt,\n        min(sharesCount)                                                                                                                as feed_min_shares_cnt,\n        std(sharesCount)                                                                                                                as feed_std_shares_cnt\nfrom feeds_raw f\ngroup by page_id)\nselect p.*,\n      c.avg_likes_per_comment as feed_avg_likes_per_comment\nfrom posts p\njoin posts_comments c\non p.page_id = c.page_id\nlimit 10\n-- select * from posts_comments\n-- limit 4","user":"plancky","dateUpdated":"2017-03-07T07:43:51+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[{"name":"page_id","index":0,"aggr":"sum"}],"values":[{"name":"avg_likes_per_comment","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"page_id","index":0,"aggr":"sum"}}},"enabled":true,"editorMode":"ace/mode/sql","title":true,"lineNumbers":true,"editorHide":true,"tableHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1488789769531_1290368220","id":"20170306-084249_1248752072","result":{"code":"SUCCESS","type":"TABLE","msg":"page_id\tavg_likes_per_comment\n836848953048111\t0.3433726830813296\n1043847768993955\t0.5901917371309894\n106267362755137\t1.1987883888330622\n109274852461371\t1.7429031548431135\n","comment":"","msgTable":[[{"key":"avg_likes_per_comment","value":"836848953048111"},{"key":"avg_likes_per_comment","value":"0.3433726830813296"}],[{"value":"1043847768993955"},{"value":"0.5901917371309894"}],[{"value":"106267362755137"},{"value":"1.1987883888330622"}],[{"value":"109274852461371"},{"value":"1.7429031548431135"}]],"columnNames":[{"name":"page_id","index":0,"aggr":"sum"},{"name":"avg_likes_per_comment","index":1,"aggr":"sum"}],"rows":[["836848953048111","0.3433726830813296"],["1043847768993955","0.5901917371309894"],["106267362755137","1.1987883888330622"],["109274852461371","1.7429031548431135"]]},"dateCreated":"2017-03-06T08:42:49+0000","dateStarted":"2017-03-07T01:31:01+0000","dateFinished":"2017-03-07T01:31:18+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1019"},{"title":"Create Feed Table (new)","text":"sqlContext.sql(\"\"\"\nwith posts_comments as(\nselect page_id, avg(comment_total_likes / comments_count) as avg_likes_per_comment\nfrom(\n    select page_id, id, avg(size(comments.data)) as comments_count,\n           (case when sum(comment.like_count) is not null then sum(comment.like_count) else sum(comment.likeCount) end) as comment_total_likes\n    from feeds_raw\n    lateral view explode(comments.data) as comment\n    group by page_id, id)\ngroup by page_id\n),\nposts as(\nselect  page_id,\n        count(distinct id)                                                                                                              as feed_post_count,\n        count(distinct `from`.id)                                                                                                       as feed_distinct_post_writers,\n        from_unixtime(min(createdTime/1000))                                                                                            as feed_first_post_time,\n        from_unixtime(max(createdTime/1000))                                                                                            as feed_last_post_time,\n        count(distinct from_unixtime(createdTime/1000, 'yyyy-MM'))                                                                      as feed_number_of_different_months_for_post,\n        datediff(from_unixtime(max(createdTime/1000)), from_unixtime(min(createdTime/1000)))                                            as feed_number_of_days_between_first_and_last_posts,\n        sum(case when updatedTime is not null then 1 else 0 end)                                                                        as feed_count_post_updated,\n        sum(case when updatedTime is not null then 1 else 0 end) / count(id)                                                            as feed_post_updated_prc,\n        avg(comments.summary.total_count)                                                                                               as feed_avg_comments,\n        max(comments.summary.total_count)                                                                                               as feed_max_comments,\n        min(comments.summary.total_count)                                                                                               as feed_min_comments,\n        std(comments.summary.total_count)                                                                                               as feed_std_comments,\n        avg(likes.summary.total_count)                                                                                                  as feed_avg_likes,\n        max(likes.summary.total_count)                                                                                                  as feed_max_likes,\n        min(likes.summary.total_count)                                                                                                  as feed_min_likes,\n        std(likes.summary.total_count)                                                                                                  as feed_std_likes,\n        avg(shares.count)                                                                                                               as feed_avg_shares,\n        max(shares.count)                                                                                                               as feed_max_shares,\n        min(shares.count)                                                                                                               as feed_min_shares,\n        std(shares.count)                                                                                                               as feed_std_shares,\n        sum(case when is_hidden = true or isHidden = true then 1 else 0 end)                                                            as feed_is_hidden_count,\n        sum(case when is_published = true or isPublished = true then 1 else 0 end)                                                      as feed_is_published_count,\n        avg(size(messageTags))                                                                                                          as feed_avg_people_tagged_per_post,\n        avg(case when size(messageTags) > 0 then size(messageTags) else null end)                                                       as feed_avg_people_tagged_per_post_with_more_than_zero,\n        max(size(messageTags))                                                                                                          as feed_post_max_people_tagged,\n        sum(size(messageTags))                                                                                                          as feed_sum_people_tagged_count,\n        avg(size(withTags))                                                                                                             as feed_avg_with_tagged_per_post,\n        avg(case when size(withTags) > 0 then size(withTags) else null end)                                                             as feed_avg_with_tagged_per_post_with_more_than_zero,\n        max(size(withTags))                                                                                                             as feed_post_max_with_tagged,\n        sum(size(withTags))                                                                                                             as feed_sum_with_tagged_count,\n        sum(case when place is not null then 1 else 0 end)                                                                              as feed_count_has_place,\n        count(distinct case when (statusType = 'shared_story') or (status_type = 'shared_story') then id else null end)                 as feed_number_of_shared_story_category,\n        count(distinct case when (statusType = 'added_photos') or (status_type = 'added_photos') then id else null end)                 as feed_number_of_added_photos_category,\n        count(distinct case when (statusType is not null and statusType <> 'shared_story' and statusType <> 'added_photos') \n                or (status_type is not null and status_type <> 'shared_story' and status_type <> 'added_photos') then id else null end) as feed_number_of_other_categories,\n        count(distinct case when statusType is null and status_type is null then id else null end)                                      as feed_number_of_null_category,\n        avg(sharesCount)                                                                                                                as feed_avg_shares_cnt,\n        max(sharesCount)                                                                                                                as feed_max_shares_cnt,\n        min(sharesCount)                                                                                                                as feed_min_shares_cnt,\n        std(sharesCount)                                                                                                                as feed_std_shares_cnt\nfrom feeds_raw f\ngroup by page_id)\nselect p.*,\n      c.avg_likes_per_comment as feed_avg_likes_per_comment\nfrom posts p\njoin posts_comments c\non p.page_id = c.page_id\n\"\"\").repartition(1).write.mode(\"overwrite\").json(\"s3a://zeppelindata/staging/hw/feeds080317\")\nsqlContext.read.json(\"s3a://zeppelindata/staging/hw/feeds080317\").createOrReplaceTempView(\"facebook_homework_feeds_analysis\")\n","user":"plancky","dateUpdated":"2017-03-08T11:57:17+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true,"editorHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1488891786285_-1344211483","id":"20170307-130306_886163304","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"2017-03-07T01:03:06+0000","dateStarted":"2017-03-07T08:35:05+0000","dateFinished":"2017-03-07T08:37:04+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1020"},{"title":"Create Feed Table (old)","text":"// sqlContext.sql(\"\"\"\n// select page_id,\n//         count(distinct id) as post_count,\n//         from_unixtime(min(createdTime/1000))                                                                                            as feed_first_post_time,\n//         from_unixtime(max(createdTime/1000))                                                                                            as feed_last_post_time,\n//         count(distinct from_unixtime(createdTime/1000, 'yyyy-MM'))                                                                      as feed_number_of_different_months_for_post,\n//         datediff(from_unixtime(max(createdTime/1000)), from_unixtime(min(createdTime/1000)))                                            as feed_number_of_days_between_first_and_last_posts,\n//         sum(case when updatedTime is not null then 1 else 0 end)                                                                        as feed_count_post_updated,\n//         sum(case when updatedTime is not null then 1 else 0 end) / count(id)                                                            as feed_post_updated_prc,\n//         avg(comments.summary.total_count)                                                                                               as feed_avg_comments,\n//         max(comments.summary.total_count)                                                                                               as feed_max_comments,\n//         min(comments.summary.total_count)                                                                                               as feed_min_comments,\n//         std(comments.summary.total_count)                                                                                               as feed_std_comments,\n//         avg(likes.summary.total_count)                                                                                                  as feed_avg_likes,\n//         max(likes.summary.total_count)                                                                                                  as feed_max_likes,\n//         min(likes.summary.total_count)                                                                                                  as feed_min_likes,\n//         std(likes.summary.total_count)                                                                                                  as feed_std_likes,\n//         avg(shares.count)                                                                                                               as feed_avg_shares,\n//         max(shares.count)                                                                                                               as feed_max_shares,\n//         min(shares.count)                                                                                                               as feed_min_shares,\n//         std(shares.count)                                                                                                               as feed_std_shares,\n//         sum(case when is_hidden = true or isHidden = true then 1 else 0 end)                                                            as feed_is_hidden_count,\n//         sum(case when is_published = true or isPublished = true then 1 else 0 end)                                                      as feed_is_published_count,\n//         avg(size(messageTags))                                                                                                          as feed_avg_people_tagged_per_post,\n//         avg(case when size(messageTags) > 0 then size(messageTags) else null end)                                                       as feed_avg_people_tagged_per_post_with_more_than_zero,\n//         max(size(messageTags))                                                                                                          as feed_post_max_people_tagged,\n//         sum(size(messageTags))                                                                                                          as feed_sum_people_tagged_count,\n//         avg(size(withTags))                                                                                                             as feed_avg_with_tagged_per_post,\n//         avg(case when size(withTags) > 0 then size(withTags) else null end)                                                             as feed_avg_with_tagged_per_post_with_more_than_zero,\n//         max(size(withTags))                                                                                                             as feed_post_max_with_tagged,\n//         sum(size(withTags))                                                                                                             as feed_sum_with_tagged_count,\n//         sum(case when place is not null then 1 else 0 end)                                                                              as feed_count_has_place,\n//         count(distinct case when (statusType = 'shared_story') or (status_type = 'shared_story') then id else null end)                 as feed_number_of_shared_story_posts,\n//         count(distinct case when (statusType = 'added_photos') or (status_type = 'added_photos') then id else null end)                 as feed_number_of_added_photos_posts,\n//         count(distinct case when (statusType is not null and statusType <> 'shared_story' and statusType <> 'added_photos') \n//                 or (status_type is not null and status_type <> 'shared_story' and status_type <> 'added_photos') then id else null end) as feed_number_of_other_posts,\n//         count(distinct case when statusType is null and status_type is null then id else null end)                                      as feed_number_of_null_albums,\n//         avg(sharesCount)                                                                                                                as feed_avg_shares_cnt,\n//         max(sharesCount)                                                                                                                as feed_max_shares_cnt,\n//         min(sharesCount)                                                                                                                as feed_min_shares_cnt,\n//         std(sharesCount)                                                                                                                as feed_std_shares_cnt\n// from feeds_raw\n// group by page_id\n// \"\"\").repartition(1).write.mode(\"overwrite\").json(\"s3a://zeppelindata/staging/hw/feeds060317\")\nsqlContext.read.json(\"s3a://zeppelindata/staging/hw/feeds060317\").createOrReplaceTempView(\"facebook_homework_feeds_analysis\")\n","user":"plancky","dateUpdated":"2017-03-07T02:15:07+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true,"editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1488807666668_695236271","id":"20170306-134106_1860783748","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"2017-03-06T01:41:06+0000","dateStarted":"2017-03-06T02:49:26+0000","dateFinished":"2017-03-06T02:49:27+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1021"},{"title":"Feed Schema","text":"%sql\n\ndesc facebook_homework_feeds_analysis","user":"plancky","dateUpdated":"2017-03-07T07:46:48+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/sql","title":true,"editorHide":true,"tableHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1488808307362_-150334018","id":"20170306-135147_1327989460","result":{"code":"SUCCESS","type":"TABLE","msg":"col_name\tdata_type\tcomment\nfeed_avg_comments\tdouble\tnull\nfeed_avg_likes\tdouble\tnull\nfeed_avg_people_tagged_per_post\tdouble\tnull\nfeed_avg_people_tagged_per_post_with_more_than_zero\tdouble\tnull\nfeed_avg_shares\tdouble\tnull\nfeed_avg_shares_cnt\tdouble\tnull\nfeed_avg_with_tagged_per_post\tdouble\tnull\nfeed_avg_with_tagged_per_post_with_more_than_zero\tdouble\tnull\nfeed_count_has_place\tbigint\tnull\nfeed_count_post_updated\tbigint\tnull\nfeed_first_post_time\tstring\tnull\nfeed_is_hidden_count\tbigint\tnull\nfeed_is_published_count\tbigint\tnull\nfeed_last_post_time\tstring\tnull\nfeed_max_comments\tbigint\tnull\nfeed_max_likes\tbigint\tnull\nfeed_max_shares\tbigint\tnull\nfeed_max_shares_cnt\tbigint\tnull\nfeed_min_comments\tbigint\tnull\nfeed_min_likes\tbigint\tnull\nfeed_min_shares\tbigint\tnull\nfeed_min_shares_cnt\tbigint\tnull\nfeed_number_of_added_photos_posts\tbigint\tnull\nfeed_number_of_days_between_first_and_last_posts\tbigint\tnull\nfeed_number_of_different_months_for_post\tbigint\tnull\nfeed_number_of_null_albums\tbigint\tnull\nfeed_number_of_other_posts\tbigint\tnull\nfeed_number_of_shared_story_posts\tbigint\tnull\nfeed_post_max_people_tagged\tbigint\tnull\nfeed_post_max_with_tagged\tbigint\tnull\nfeed_post_updated_prc\tdouble\tnull\nfeed_std_comments\tstring\tnull\nfeed_std_likes\tstring\tnull\nfeed_std_shares\tstring\tnull\nfeed_std_shares_cnt\tstring\tnull\nfeed_sum_people_tagged_count\tbigint\tnull\nfeed_sum_with_tagged_count\tbigint\tnull\npage_id\tstring\tnull\npost_count\tbigint\tnull\n","comment":"","msgTable":[[{"key":"data_type","value":"feed_avg_comments"},{"key":"data_type","value":"double"},{"key":"data_type","value":"null"}],[{"key":"comment","value":"feed_avg_likes"},{"key":"comment","value":"double"},{"key":"comment","value":"null"}],[{"value":"feed_avg_people_tagged_per_post"},{"value":"double"},{"value":"null"}],[{"value":"feed_avg_people_tagged_per_post_with_more_than_zero"},{"value":"double"},{"value":"null"}],[{"value":"feed_avg_shares"},{"value":"double"},{"value":"null"}],[{"value":"feed_avg_shares_cnt"},{"value":"double"},{"value":"null"}],[{"value":"feed_avg_with_tagged_per_post"},{"value":"double"},{"value":"null"}],[{"value":"feed_avg_with_tagged_per_post_with_more_than_zero"},{"value":"double"},{"value":"null"}],[{"value":"feed_count_has_place"},{"value":"bigint"},{"value":"null"}],[{"value":"feed_count_post_updated"},{"value":"bigint"},{"value":"null"}],[{"value":"feed_first_post_time"},{"value":"string"},{"value":"null"}],[{"value":"feed_is_hidden_count"},{"value":"bigint"},{"value":"null"}],[{"value":"feed_is_published_count"},{"value":"bigint"},{"value":"null"}],[{"value":"feed_last_post_time"},{"value":"string"},{"value":"null"}],[{"value":"feed_max_comments"},{"value":"bigint"},{"value":"null"}],[{"value":"feed_max_likes"},{"value":"bigint"},{"value":"null"}],[{"value":"feed_max_shares"},{"value":"bigint"},{"value":"null"}],[{"value":"feed_max_shares_cnt"},{"value":"bigint"},{"value":"null"}],[{"value":"feed_min_comments"},{"value":"bigint"},{"value":"null"}],[{"value":"feed_min_likes"},{"value":"bigint"},{"value":"null"}],[{"value":"feed_min_shares"},{"value":"bigint"},{"value":"null"}],[{"value":"feed_min_shares_cnt"},{"value":"bigint"},{"value":"null"}],[{"value":"feed_number_of_added_photos_posts"},{"value":"bigint"},{"value":"null"}],[{"value":"feed_number_of_days_between_first_and_last_posts"},{"value":"bigint"},{"value":"null"}],[{"value":"feed_number_of_different_months_for_post"},{"value":"bigint"},{"value":"null"}],[{"value":"feed_number_of_null_albums"},{"value":"bigint"},{"value":"null"}],[{"value":"feed_number_of_other_posts"},{"value":"bigint"},{"value":"null"}],[{"value":"feed_number_of_shared_story_posts"},{"value":"bigint"},{"value":"null"}],[{"value":"feed_post_max_people_tagged"},{"value":"bigint"},{"value":"null"}],[{"value":"feed_post_max_with_tagged"},{"value":"bigint"},{"value":"null"}],[{"value":"feed_post_updated_prc"},{"value":"double"},{"value":"null"}],[{"value":"feed_std_comments"},{"value":"string"},{"value":"null"}],[{"value":"feed_std_likes"},{"value":"string"},{"value":"null"}],[{"value":"feed_std_shares"},{"value":"string"},{"value":"null"}],[{"value":"feed_std_shares_cnt"},{"value":"string"},{"value":"null"}],[{"value":"feed_sum_people_tagged_count"},{"value":"bigint"},{"value":"null"}],[{"value":"feed_sum_with_tagged_count"},{"value":"bigint"},{"value":"null"}],[{"value":"page_id"},{"value":"string"},{"value":"null"}],[{"value":"post_count"},{"value":"bigint"},{"value":"null"}]],"columnNames":[{"name":"col_name","index":0,"aggr":"sum"},{"name":"data_type","index":1,"aggr":"sum"},{"name":"comment","index":2,"aggr":"sum"}],"rows":[["feed_avg_comments","double","null"],["feed_avg_likes","double","null"],["feed_avg_people_tagged_per_post","double","null"],["feed_avg_people_tagged_per_post_with_more_than_zero","double","null"],["feed_avg_shares","double","null"],["feed_avg_shares_cnt","double","null"],["feed_avg_with_tagged_per_post","double","null"],["feed_avg_with_tagged_per_post_with_more_than_zero","double","null"],["feed_count_has_place","bigint","null"],["feed_count_post_updated","bigint","null"],["feed_first_post_time","string","null"],["feed_is_hidden_count","bigint","null"],["feed_is_published_count","bigint","null"],["feed_last_post_time","string","null"],["feed_max_comments","bigint","null"],["feed_max_likes","bigint","null"],["feed_max_shares","bigint","null"],["feed_max_shares_cnt","bigint","null"],["feed_min_comments","bigint","null"],["feed_min_likes","bigint","null"],["feed_min_shares","bigint","null"],["feed_min_shares_cnt","bigint","null"],["feed_number_of_added_photos_posts","bigint","null"],["feed_number_of_days_between_first_and_last_posts","bigint","null"],["feed_number_of_different_months_for_post","bigint","null"],["feed_number_of_null_albums","bigint","null"],["feed_number_of_other_posts","bigint","null"],["feed_number_of_shared_story_posts","bigint","null"],["feed_post_max_people_tagged","bigint","null"],["feed_post_max_with_tagged","bigint","null"],["feed_post_updated_prc","double","null"],["feed_std_comments","string","null"],["feed_std_likes","string","null"],["feed_std_shares","string","null"],["feed_std_shares_cnt","string","null"],["feed_sum_people_tagged_count","bigint","null"],["feed_sum_with_tagged_count","bigint","null"],["page_id","string","null"],["post_count","bigint","null"]]},"dateCreated":"2017-03-06T01:51:47+0000","dateStarted":"2017-03-06T02:49:39+0000","dateFinished":"2017-03-06T02:49:39+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1022"},{"title":"Basic Self Feed Analysis","text":"%sql\n\nwith self_feed_raw as(\n    select *\n    from(\n        select *, case when `from`.id = page_id then 1 else 0 end as is_self\n        from feeds_raw)\n    where is_self = 1),\nposts_comments as(\n    select page_id, avg(comment_total_likes / comments_count) as avg_likes_per_comment\n    from(\n        select page_id, id, avg(size(comments.data)) as comments_count,\n               (case when sum(comment.like_count) is not null then sum(comment.like_count) else sum(comment.likeCount) end) as comment_total_likes\n        from self_feed_raw\n        lateral view explode(comments.data) as comment\n        group by page_id, id)\n    group by page_id\n),\nposts as(\nselect  page_id,\n        count(distinct id) as self_post_count,\n        from_unixtime(min(createdTime/1000))                                                                                            as self_feed_first_post_time,\n        from_unixtime(max(createdTime/1000))                                                                                            as self_feed_last_post_time,\n        count(distinct from_unixtime(createdTime/1000, 'yyyy-MM'))                                                                      as self_feed_number_of_different_months_for_post,\n        datediff(from_unixtime(max(createdTime/1000)), from_unixtime(min(createdTime/1000)))                                            as self_feed_number_of_days_between_first_and_last_posts,\n        sum(case when updatedTime is not null then 1 else 0 end)                                                                        as self_feed_count_post_updated,\n        sum(case when updatedTime is not null then 1 else 0 end) / count(id)                                                            as self_feed_post_updated_prc,\n        avg(comments.summary.total_count)                                                                                               as self_feed_avg_comments,\n        max(comments.summary.total_count)                                                                                               as self_feed_max_comments,\n        min(comments.summary.total_count)                                                                                               as self_feed_min_comments,\n        std(comments.summary.total_count)                                                                                               as self_feed_std_comments,\n        avg(likes.summary.total_count)                                                                                                  as self_feed_avg_likes,\n        max(likes.summary.total_count)                                                                                                  as self_feed_max_likes,\n        min(likes.summary.total_count)                                                                                                  as self_feed_min_likes,\n        std(likes.summary.total_count)                                                                                                  as self_feed_std_likes,\n        avg(shares.count)                                                                                                               as self_feed_avg_shares,\n        max(shares.count)                                                                                                               as self_feed_max_shares,\n        min(shares.count)                                                                                                               as self_feed_min_shares,\n        std(shares.count)                                                                                                               as self_feed_std_shares,\n        sum(case when is_hidden = true or isHidden = true then 1 else 0 end)                                                            as self_feed_is_hidden_count,\n        sum(case when is_published = true or isPublished = true then 1 else 0 end)                                                      as self_feed_is_published_count,\n        avg(size(messageTags))                                                                                                          as self_feed_avg_people_tagged_per_post,\n        avg(case when size(messageTags) > 0 then size(messageTags) else null end)                                                       as self_feed_avg_people_tagged_per_post_with_more_than_zero,\n        max(size(messageTags))                                                                                                          as self_feed_post_max_people_tagged,\n        sum(size(messageTags))                                                                                                          as self_feed_sum_people_tagged_count,\n        avg(size(withTags))                                                                                                             as self_feed_avg_with_tagged_per_post,\n        avg(case when size(withTags) > 0 then size(withTags) else null end)                                                             as self_feed_avg_with_tagged_per_post_with_more_than_zero,\n        max(size(withTags))                                                                                                             as self_feed_post_max_with_tagged,\n        sum(size(withTags))                                                                                                             as self_feed_sum_with_tagged_count,\n        sum(case when place is not null then 1 else 0 end)                                                                              as self_feed_count_has_place,\n        count(distinct case when (statusType = 'shared_story') or (status_type = 'shared_story') then id else null end)                 as self_feed_number_of_shared_story_category,\n        count(distinct case when (statusType = 'added_photos') or (status_type = 'added_photos') then id else null end)                 as self_feed_number_of_added_photos_category,\n        count(distinct case when (statusType is not null and statusType <> 'shared_story' and statusType <> 'added_photos') \n                or (status_type is not null and status_type <> 'shared_story' and status_type <> 'added_photos') then id else null end) as self_feed_number_of_other_categories,\n        count(distinct case when statusType is null and status_type is null then id else null end)                                      as self_feed_number_of_null_category,\n        avg(sharesCount)                                                                                                                as self_feed_avg_shares_cnt,\n        max(sharesCount)                                                                                                                as self_feed_max_shares_cnt,\n        min(sharesCount)                                                                                                                as self_feed_min_shares_cnt,\n        std(sharesCount)                                                                                                                as self_feed_std_shares_cnt\nfrom self_feed_raw f\ngroup by page_id)\nselect p.*,\n      c.avg_likes_per_comment as feed_avg_likes_per_comment\nfrom posts p\njoin posts_comments c\non p.page_id = c.page_id\nlimit 10\n-- select * from posts_comments\n-- limit 4","user":"plancky","dateUpdated":"2017-03-07T07:33:44+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/sql","title":true,"editorHide":true,"tableHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1488914756192_1161829737","id":"20170307-192556_2006173223","result":{"code":"SUCCESS","type":"TABLE","msg":"page_id\tself_post_count\tself_feed_first_post_time\tself_feed_last_post_time\tself_feed_number_of_different_months_for_post\tself_feed_number_of_days_between_first_and_last_posts\tself_feed_count_post_updated\tself_feed_post_updated_prc\tself_feed_avg_comments\tself_feed_max_comments\tself_feed_min_comments\tself_feed_std_comments\tself_feed_avg_likes\tself_feed_max_likes\tself_feed_min_likes\tself_feed_std_likes\tself_feed_avg_shares\tself_feed_max_shares\tself_feed_min_shares\tself_feed_std_shares\tself_feed_is_hidden_count\tself_feed_is_published_count\tself_feed_avg_people_tagged_per_post\tself_feed_avg_people_tagged_per_post_with_more_than_zero\tself_feed_post_max_people_tagged\tself_feed_sum_people_tagged_count\tself_feed_avg_with_tagged_per_post\tself_feed_avg_with_tagged_per_post_with_more_than_zero\tself_feed_post_max_with_tagged\tself_feed_sum_with_tagged_count\tself_feed_count_has_place\tself_feed_number_of_shared_story_category\tself_feed_number_of_added_photos_category\tself_feed_number_of_other_categories\tself_feed_number_of_null_category\tself_feed_avg_shares_cnt\tself_feed_max_shares_cnt\tself_feed_min_shares_cnt\tself_feed_std_shares_cnt\tfeed_avg_likes_per_comment\n395099750663031\t121\t2017-01-07 08:51:03\t2017-02-28 06:58:44\t2\t52\t15\t0.12396694214876033\t0.37735849056603776\t6\t0\t0.8777984386133216\t6.5754716981132075\t43\t0\t6.754114249788153\t1.5263157894736843\t5\t1\t1.1239029738980328\t0\t121\t0.0\tnull\t0\t0\t0.26666666666666666\t2.0\t3\t4\t2\t34\t81\t6\t0\t0.06666666666666667\t1\t0\t0.2581988897471611\t0.7779605263157894\n396356690443859\t149\t2017-01-02 12:15:52\t2017-03-04 09:12:01\t3\t61\t15\t0.10067114093959731\t3.8582089552238807\t76\t0\t9.526498844102495\t724.2164179104477\t25705\t2\t2942.144566818437\t7.261682242990654\t103\t1\t12.254638281381949\t0\t149\t0.2\t1.5\t2\t3\t2.7333333333333334\t8.2\t13\t41\t13\t15\t108\t26\t0\t4.866666666666666\t25\t0\t6.674756995755048\t0.5912575134524238\n124314530983057\t145\t2017-02-02 23:52:26\t2017-03-02 12:45:58\t2\t28\t13\t0.0896551724137931\t0.30303030303030304\t4\t0\t0.6872824451272272\t58.621212121212125\t1238\t0\t154.5924230243346\t1.9125\t7\t1\t1.2945235182261101\t0\t145\t0.0\tnull\t0\t0\t0.07692307692307693\t1.0\t1\t1\t99\t9\t121\t15\t0\t1.1538461538461537\t3\t0\t0.6887372317211944\t0.4453125\n124406620939557\t133\t2017-02-25 21:00:28\t2017-03-03 23:24:40\t2\t6\t9\t0.06766917293233082\t5.435483870967742\t137\t0\t13.329008608882827\t35.71774193548387\t222\t2\t34.79593483495668\t7.282608695652174\t63\t1\t9.970318268581583\t0\t133\t2.2222222222222223\t2.5\t3\t20\t0.3333333333333333\t1.5\t2\t3\t0\t32\t45\t56\t0\t7.888888888888889\t63\t0\t20.73309217437455\t0.5391619674074706\n138571859507705\t147\t2017-03-03 01:30:06\t2017-03-05 16:42:25\t1\t2\t15\t0.10204081632653061\t0.8484848484848485\t28\t0\t3.0604216854705584\t70.23484848484848\t711\t7\t103.40610372585907\t17.6\t179\t1\t31.95130223145395\t0\t147\t0.26666666666666666\t2.0\t3\t4\t0.0\tnull\t0\t0\t0\t89\t47\t11\t0\t1.2666666666666666\t9\t0\t2.865226659362887\t0.4186021505376344\n1388465661452708\t138\t2016-02-20 01:35:45\t2016-03-03 22:26:58\t2\t12\t15\t0.10869565217391304\t1.8211382113821137\t42\t0\t5.662694313714725\t24.617886178861788\t273\t0\t34.08391773188862\t7.010309278350515\t52\t1\t9.953532502501337\t0\t138\t0.0\tnull\t0\t0\t0.0\tnull\t0\t0\t26\t3\t118\t17\t0\t8.733333333333333\t44\t0\t10.613109593238697\t0.9172042946281173\n1390998467815508\t139\t2016-12-28 13:57:02\t2017-02-24 22:17:07\t3\t58\t15\t0.1079136690647482\t11.290322580645162\t98\t0\t17.123071581433642\t241.23387096774192\t2733\t2\t488.68130351426976\t16.217391304347824\t183\t1\t27.954155015108142\t0\t139\t0.06666666666666667\t1.0\t1\t1\t0.0\tnull\t0\t0\t28\t22\t96\t21\t0\t5.2\t33\t0\t8.937880861015898\t0.7920658010334634\n1410222549007313\t131\t2017-02-25 07:50:50\t2017-03-03 08:52:52\t2\t6\t9\t0.06870229007633588\t12.270491803278688\t396\t0\t45.47963614507444\t21.081967213114755\t289\t0\t38.89222025158875\t17.984615384615385\t739\t1\t91.54549625522485\t0\t131\t0.0\tnull\t0\t0\t0.0\tnull\t0\t0\t0\t4\t110\t17\t0\t3.111111111111111\t10\t0\t2.9767618499152917\t0.46561526322929825\n144200692175\t150\t2017-01-24 12:24:03\t2017-03-01 12:56:43\t3\t36\t15\t0.1\t19.68888888888889\t333\t0\t38.49820051360933\t412.1111111111111\t4154\t0\t684.4372311491279\t60.80487804878049\t419\t1\t92.39841789896542\t0\t150\t0.4\t1.2\t2\t6\t0.0\tnull\t0\t0\t1\t78\t46\t26\t0\t69.93333333333334\t384\t0\t120.68818540038662\t0.5287566720556621\n1452904361600284\t150\t2016-12-01 07:13:18\t2017-03-03 05:04:28\t4\t92\t15\t0.1\t2.2814814814814817\t53\t0\t6.394554413486723\t27.05185185185185\t447\t1\t48.44096553607743\t14.186274509803921\t623\t1\t62.91794599760519\t0\t150\t0.26666666666666666\t1.0\t1\t4\t0.0\tnull\t0\t0\t0\t87\t37\t26\t0\t7.933333333333334\t59\t0\t15.087680247078914\t0.3030206152860614\n","comment":"","msgTable":[[{"key":"self_post_count","value":"395099750663031"},{"key":"self_post_count","value":"121"},{"key":"self_post_count","value":"2017-01-07 08:51:03"},{"key":"self_post_count","value":"2017-02-28 06:58:44"},{"key":"self_post_count","value":"2"},{"key":"self_post_count","value":"52"},{"key":"self_post_count","value":"15"},{"key":"self_post_count","value":"0.12396694214876033"},{"key":"self_post_count","value":"0.37735849056603776"},{"key":"self_post_count","value":"6"},{"key":"self_post_count","value":"0"},{"key":"self_post_count","value":"0.8777984386133216"},{"key":"self_post_count","value":"6.5754716981132075"},{"key":"self_post_count","value":"43"},{"key":"self_post_count","value":"0"},{"key":"self_post_count","value":"6.754114249788153"},{"key":"self_post_count","value":"1.5263157894736843"},{"key":"self_post_count","value":"5"},{"key":"self_post_count","value":"1"},{"key":"self_post_count","value":"1.1239029738980328"},{"key":"self_post_count","value":"0"},{"key":"self_post_count","value":"121"},{"key":"self_post_count","value":"0.0"},{"key":"self_post_count","value":"null"},{"key":"self_post_count","value":"0"},{"key":"self_post_count","value":"0"},{"key":"self_post_count","value":"0.26666666666666666"},{"key":"self_post_count","value":"2.0"},{"key":"self_post_count","value":"3"},{"key":"self_post_count","value":"4"},{"key":"self_post_count","value":"2"},{"key":"self_post_count","value":"34"},{"key":"self_post_count","value":"81"},{"key":"self_post_count","value":"6"},{"key":"self_post_count","value":"0"},{"key":"self_post_count","value":"0.06666666666666667"},{"key":"self_post_count","value":"1"},{"key":"self_post_count","value":"0"},{"key":"self_post_count","value":"0.2581988897471611"},{"key":"self_post_count","value":"0.7779605263157894"}],[{"key":"self_feed_first_post_time","value":"396356690443859"},{"key":"self_feed_first_post_time","value":"149"},{"key":"self_feed_first_post_time","value":"2017-01-02 12:15:52"},{"key":"self_feed_first_post_time","value":"2017-03-04 09:12:01"},{"key":"self_feed_first_post_time","value":"3"},{"key":"self_feed_first_post_time","value":"61"},{"key":"self_feed_first_post_time","value":"15"},{"key":"self_feed_first_post_time","value":"0.10067114093959731"},{"key":"self_feed_first_post_time","value":"3.8582089552238807"},{"key":"self_feed_first_post_time","value":"76"},{"key":"self_feed_first_post_time","value":"0"},{"key":"self_feed_first_post_time","value":"9.526498844102495"},{"key":"self_feed_first_post_time","value":"724.2164179104477"},{"key":"self_feed_first_post_time","value":"25705"},{"key":"self_feed_first_post_time","value":"2"},{"key":"self_feed_first_post_time","value":"2942.144566818437"},{"key":"self_feed_first_post_time","value":"7.261682242990654"},{"key":"self_feed_first_post_time","value":"103"},{"key":"self_feed_first_post_time","value":"1"},{"key":"self_feed_first_post_time","value":"12.254638281381949"},{"key":"self_feed_first_post_time","value":"0"},{"key":"self_feed_first_post_time","value":"149"},{"key":"self_feed_first_post_time","value":"0.2"},{"key":"self_feed_first_post_time","value":"1.5"},{"key":"self_feed_first_post_time","value":"2"},{"key":"self_feed_first_post_time","value":"3"},{"key":"self_feed_first_post_time","value":"2.7333333333333334"},{"key":"self_feed_first_post_time","value":"8.2"},{"key":"self_feed_first_post_time","value":"13"},{"key":"self_feed_first_post_time","value":"41"},{"key":"self_feed_first_post_time","value":"13"},{"key":"self_feed_first_post_time","value":"15"},{"key":"self_feed_first_post_time","value":"108"},{"key":"self_feed_first_post_time","value":"26"},{"key":"self_feed_first_post_time","value":"0"},{"key":"self_feed_first_post_time","value":"4.866666666666666"},{"key":"self_feed_first_post_time","value":"25"},{"key":"self_feed_first_post_time","value":"0"},{"key":"self_feed_first_post_time","value":"6.674756995755048"},{"key":"self_feed_first_post_time","value":"0.5912575134524238"}],[{"key":"self_feed_last_post_time","value":"124314530983057"},{"key":"self_feed_last_post_time","value":"145"},{"key":"self_feed_last_post_time","value":"2017-02-02 23:52:26"},{"key":"self_feed_last_post_time","value":"2017-03-02 12:45:58"},{"key":"self_feed_last_post_time","value":"2"},{"key":"self_feed_last_post_time","value":"28"},{"key":"self_feed_last_post_time","value":"13"},{"key":"self_feed_last_post_time","value":"0.0896551724137931"},{"key":"self_feed_last_post_time","value":"0.30303030303030304"},{"key":"self_feed_last_post_time","value":"4"},{"key":"self_feed_last_post_time","value":"0"},{"key":"self_feed_last_post_time","value":"0.6872824451272272"},{"key":"self_feed_last_post_time","value":"58.621212121212125"},{"key":"self_feed_last_post_time","value":"1238"},{"key":"self_feed_last_post_time","value":"0"},{"key":"self_feed_last_post_time","value":"154.5924230243346"},{"key":"self_feed_last_post_time","value":"1.9125"},{"key":"self_feed_last_post_time","value":"7"},{"key":"self_feed_last_post_time","value":"1"},{"key":"self_feed_last_post_time","value":"1.2945235182261101"},{"key":"self_feed_last_post_time","value":"0"},{"key":"self_feed_last_post_time","value":"145"},{"key":"self_feed_last_post_time","value":"0.0"},{"key":"self_feed_last_post_time","value":"null"},{"key":"self_feed_last_post_time","value":"0"},{"key":"self_feed_last_post_time","value":"0"},{"key":"self_feed_last_post_time","value":"0.07692307692307693"},{"key":"self_feed_last_post_time","value":"1.0"},{"key":"self_feed_last_post_time","value":"1"},{"key":"self_feed_last_post_time","value":"1"},{"key":"self_feed_last_post_time","value":"99"},{"key":"self_feed_last_post_time","value":"9"},{"key":"self_feed_last_post_time","value":"121"},{"key":"self_feed_last_post_time","value":"15"},{"key":"self_feed_last_post_time","value":"0"},{"key":"self_feed_last_post_time","value":"1.1538461538461537"},{"key":"self_feed_last_post_time","value":"3"},{"key":"self_feed_last_post_time","value":"0"},{"key":"self_feed_last_post_time","value":"0.6887372317211944"},{"key":"self_feed_last_post_time","value":"0.4453125"}],[{"key":"self_feed_number_of_different_months_for_post","value":"124406620939557"},{"key":"self_feed_number_of_different_months_for_post","value":"133"},{"key":"self_feed_number_of_different_months_for_post","value":"2017-02-25 21:00:28"},{"key":"self_feed_number_of_different_months_for_post","value":"2017-03-03 23:24:40"},{"key":"self_feed_number_of_different_months_for_post","value":"2"},{"key":"self_feed_number_of_different_months_for_post","value":"6"},{"key":"self_feed_number_of_different_months_for_post","value":"9"},{"key":"self_feed_number_of_different_months_for_post","value":"0.06766917293233082"},{"key":"self_feed_number_of_different_months_for_post","value":"5.435483870967742"},{"key":"self_feed_number_of_different_months_for_post","value":"137"},{"key":"self_feed_number_of_different_months_for_post","value":"0"},{"key":"self_feed_number_of_different_months_for_post","value":"13.329008608882827"},{"key":"self_feed_number_of_different_months_for_post","value":"35.71774193548387"},{"key":"self_feed_number_of_different_months_for_post","value":"222"},{"key":"self_feed_number_of_different_months_for_post","value":"2"},{"key":"self_feed_number_of_different_months_for_post","value":"34.79593483495668"},{"key":"self_feed_number_of_different_months_for_post","value":"7.282608695652174"},{"key":"self_feed_number_of_different_months_for_post","value":"63"},{"key":"self_feed_number_of_different_months_for_post","value":"1"},{"key":"self_feed_number_of_different_months_for_post","value":"9.970318268581583"},{"key":"self_feed_number_of_different_months_for_post","value":"0"},{"key":"self_feed_number_of_different_months_for_post","value":"133"},{"key":"self_feed_number_of_different_months_for_post","value":"2.2222222222222223"},{"key":"self_feed_number_of_different_months_for_post","value":"2.5"},{"key":"self_feed_number_of_different_months_for_post","value":"3"},{"key":"self_feed_number_of_different_months_for_post","value":"20"},{"key":"self_feed_number_of_different_months_for_post","value":"0.3333333333333333"},{"key":"self_feed_number_of_different_months_for_post","value":"1.5"},{"key":"self_feed_number_of_different_months_for_post","value":"2"},{"key":"self_feed_number_of_different_months_for_post","value":"3"},{"key":"self_feed_number_of_different_months_for_post","value":"0"},{"key":"self_feed_number_of_different_months_for_post","value":"32"},{"key":"self_feed_number_of_different_months_for_post","value":"45"},{"key":"self_feed_number_of_different_months_for_post","value":"56"},{"key":"self_feed_number_of_different_months_for_post","value":"0"},{"key":"self_feed_number_of_different_months_for_post","value":"7.888888888888889"},{"key":"self_feed_number_of_different_months_for_post","value":"63"},{"key":"self_feed_number_of_different_months_for_post","value":"0"},{"key":"self_feed_number_of_different_months_for_post","value":"20.73309217437455"},{"key":"self_feed_number_of_different_months_for_post","value":"0.5391619674074706"}],[{"key":"self_feed_number_of_days_between_first_and_last_posts","value":"138571859507705"},{"key":"self_feed_number_of_days_between_first_and_last_posts","value":"147"},{"key":"self_feed_number_of_days_between_first_and_last_posts","value":"2017-03-03 01:30:06"},{"key":"self_feed_number_of_days_between_first_and_last_posts","value":"2017-03-05 16:42:25"},{"key":"self_feed_number_of_days_between_first_and_last_posts","value":"1"},{"key":"self_feed_number_of_days_between_first_and_last_posts","value":"2"},{"key":"self_feed_number_of_days_between_first_and_last_posts","value":"15"},{"key":"self_feed_number_of_days_between_first_and_last_posts","value":"0.10204081632653061"},{"key":"self_feed_number_of_days_between_first_and_last_posts","value":"0.8484848484848485"},{"key":"self_feed_number_of_days_between_first_and_last_posts","value":"28"},{"key":"self_feed_number_of_days_between_first_and_last_posts","value":"0"},{"key":"self_feed_number_of_days_between_first_and_last_posts","value":"3.0604216854705584"},{"key":"self_feed_number_of_days_between_first_and_last_posts","value":"70.23484848484848"},{"key":"self_feed_number_of_days_between_first_and_last_posts","value":"711"},{"key":"self_feed_number_of_days_between_first_and_last_posts","value":"7"},{"key":"self_feed_number_of_days_between_first_and_last_posts","value":"103.40610372585907"},{"key":"self_feed_number_of_days_between_first_and_last_posts","value":"17.6"},{"key":"self_feed_number_of_days_between_first_and_last_posts","value":"179"},{"key":"self_feed_number_of_days_between_first_and_last_posts","value":"1"},{"key":"self_feed_number_of_days_between_first_and_last_posts","value":"31.95130223145395"},{"key":"self_feed_number_of_days_between_first_and_last_posts","value":"0"},{"key":"self_feed_number_of_days_between_first_and_last_posts","value":"147"},{"key":"self_feed_number_of_days_between_first_and_last_posts","value":"0.26666666666666666"},{"key":"self_feed_number_of_days_between_first_and_last_posts","value":"2.0"},{"key":"self_feed_number_of_days_between_first_and_last_posts","value":"3"},{"key":"self_feed_number_of_days_between_first_and_last_posts","value":"4"},{"key":"self_feed_number_of_days_between_first_and_last_posts","value":"0.0"},{"key":"self_feed_number_of_days_between_first_and_last_posts","value":"null"},{"key":"self_feed_number_of_days_between_first_and_last_posts","value":"0"},{"key":"self_feed_number_of_days_between_first_and_last_posts","value":"0"},{"key":"self_feed_number_of_days_between_first_and_last_posts","value":"0"},{"key":"self_feed_number_of_days_between_first_and_last_posts","value":"89"},{"key":"self_feed_number_of_days_between_first_and_last_posts","value":"47"},{"key":"self_feed_number_of_days_between_first_and_last_posts","value":"11"},{"key":"self_feed_number_of_days_between_first_and_last_posts","value":"0"},{"key":"self_feed_number_of_days_between_first_and_last_posts","value":"1.2666666666666666"},{"key":"self_feed_number_of_days_between_first_and_last_posts","value":"9"},{"key":"self_feed_number_of_days_between_first_and_last_posts","value":"0"},{"key":"self_feed_number_of_days_between_first_and_last_posts","value":"2.865226659362887"},{"key":"self_feed_number_of_days_between_first_and_last_posts","value":"0.4186021505376344"}],[{"key":"self_feed_count_post_updated","value":"1388465661452708"},{"key":"self_feed_count_post_updated","value":"138"},{"key":"self_feed_count_post_updated","value":"2016-02-20 01:35:45"},{"key":"self_feed_count_post_updated","value":"2016-03-03 22:26:58"},{"key":"self_feed_count_post_updated","value":"2"},{"key":"self_feed_count_post_updated","value":"12"},{"key":"self_feed_count_post_updated","value":"15"},{"key":"self_feed_count_post_updated","value":"0.10869565217391304"},{"key":"self_feed_count_post_updated","value":"1.8211382113821137"},{"key":"self_feed_count_post_updated","value":"42"},{"key":"self_feed_count_post_updated","value":"0"},{"key":"self_feed_count_post_updated","value":"5.662694313714725"},{"key":"self_feed_count_post_updated","value":"24.617886178861788"},{"key":"self_feed_count_post_updated","value":"273"},{"key":"self_feed_count_post_updated","value":"0"},{"key":"self_feed_count_post_updated","value":"34.08391773188862"},{"key":"self_feed_count_post_updated","value":"7.010309278350515"},{"key":"self_feed_count_post_updated","value":"52"},{"key":"self_feed_count_post_updated","value":"1"},{"key":"self_feed_count_post_updated","value":"9.953532502501337"},{"key":"self_feed_count_post_updated","value":"0"},{"key":"self_feed_count_post_updated","value":"138"},{"key":"self_feed_count_post_updated","value":"0.0"},{"key":"self_feed_count_post_updated","value":"null"},{"key":"self_feed_count_post_updated","value":"0"},{"key":"self_feed_count_post_updated","value":"0"},{"key":"self_feed_count_post_updated","value":"0.0"},{"key":"self_feed_count_post_updated","value":"null"},{"key":"self_feed_count_post_updated","value":"0"},{"key":"self_feed_count_post_updated","value":"0"},{"key":"self_feed_count_post_updated","value":"26"},{"key":"self_feed_count_post_updated","value":"3"},{"key":"self_feed_count_post_updated","value":"118"},{"key":"self_feed_count_post_updated","value":"17"},{"key":"self_feed_count_post_updated","value":"0"},{"key":"self_feed_count_post_updated","value":"8.733333333333333"},{"key":"self_feed_count_post_updated","value":"44"},{"key":"self_feed_count_post_updated","value":"0"},{"key":"self_feed_count_post_updated","value":"10.613109593238697"},{"key":"self_feed_count_post_updated","value":"0.9172042946281173"}],[{"key":"self_feed_post_updated_prc","value":"1390998467815508"},{"key":"self_feed_post_updated_prc","value":"139"},{"key":"self_feed_post_updated_prc","value":"2016-12-28 13:57:02"},{"key":"self_feed_post_updated_prc","value":"2017-02-24 22:17:07"},{"key":"self_feed_post_updated_prc","value":"3"},{"key":"self_feed_post_updated_prc","value":"58"},{"key":"self_feed_post_updated_prc","value":"15"},{"key":"self_feed_post_updated_prc","value":"0.1079136690647482"},{"key":"self_feed_post_updated_prc","value":"11.290322580645162"},{"key":"self_feed_post_updated_prc","value":"98"},{"key":"self_feed_post_updated_prc","value":"0"},{"key":"self_feed_post_updated_prc","value":"17.123071581433642"},{"key":"self_feed_post_updated_prc","value":"241.23387096774192"},{"key":"self_feed_post_updated_prc","value":"2733"},{"key":"self_feed_post_updated_prc","value":"2"},{"key":"self_feed_post_updated_prc","value":"488.68130351426976"},{"key":"self_feed_post_updated_prc","value":"16.217391304347824"},{"key":"self_feed_post_updated_prc","value":"183"},{"key":"self_feed_post_updated_prc","value":"1"},{"key":"self_feed_post_updated_prc","value":"27.954155015108142"},{"key":"self_feed_post_updated_prc","value":"0"},{"key":"self_feed_post_updated_prc","value":"139"},{"key":"self_feed_post_updated_prc","value":"0.06666666666666667"},{"key":"self_feed_post_updated_prc","value":"1.0"},{"key":"self_feed_post_updated_prc","value":"1"},{"key":"self_feed_post_updated_prc","value":"1"},{"key":"self_feed_post_updated_prc","value":"0.0"},{"key":"self_feed_post_updated_prc","value":"null"},{"key":"self_feed_post_updated_prc","value":"0"},{"key":"self_feed_post_updated_prc","value":"0"},{"key":"self_feed_post_updated_prc","value":"28"},{"key":"self_feed_post_updated_prc","value":"22"},{"key":"self_feed_post_updated_prc","value":"96"},{"key":"self_feed_post_updated_prc","value":"21"},{"key":"self_feed_post_updated_prc","value":"0"},{"key":"self_feed_post_updated_prc","value":"5.2"},{"key":"self_feed_post_updated_prc","value":"33"},{"key":"self_feed_post_updated_prc","value":"0"},{"key":"self_feed_post_updated_prc","value":"8.937880861015898"},{"key":"self_feed_post_updated_prc","value":"0.7920658010334634"}],[{"key":"self_feed_avg_comments","value":"1410222549007313"},{"key":"self_feed_avg_comments","value":"131"},{"key":"self_feed_avg_comments","value":"2017-02-25 07:50:50"},{"key":"self_feed_avg_comments","value":"2017-03-03 08:52:52"},{"key":"self_feed_avg_comments","value":"2"},{"key":"self_feed_avg_comments","value":"6"},{"key":"self_feed_avg_comments","value":"9"},{"key":"self_feed_avg_comments","value":"0.06870229007633588"},{"key":"self_feed_avg_comments","value":"12.270491803278688"},{"key":"self_feed_avg_comments","value":"396"},{"key":"self_feed_avg_comments","value":"0"},{"key":"self_feed_avg_comments","value":"45.47963614507444"},{"key":"self_feed_avg_comments","value":"21.081967213114755"},{"key":"self_feed_avg_comments","value":"289"},{"key":"self_feed_avg_comments","value":"0"},{"key":"self_feed_avg_comments","value":"38.89222025158875"},{"key":"self_feed_avg_comments","value":"17.984615384615385"},{"key":"self_feed_avg_comments","value":"739"},{"key":"self_feed_avg_comments","value":"1"},{"key":"self_feed_avg_comments","value":"91.54549625522485"},{"key":"self_feed_avg_comments","value":"0"},{"key":"self_feed_avg_comments","value":"131"},{"key":"self_feed_avg_comments","value":"0.0"},{"key":"self_feed_avg_comments","value":"null"},{"key":"self_feed_avg_comments","value":"0"},{"key":"self_feed_avg_comments","value":"0"},{"key":"self_feed_avg_comments","value":"0.0"},{"key":"self_feed_avg_comments","value":"null"},{"key":"self_feed_avg_comments","value":"0"},{"key":"self_feed_avg_comments","value":"0"},{"key":"self_feed_avg_comments","value":"0"},{"key":"self_feed_avg_comments","value":"4"},{"key":"self_feed_avg_comments","value":"110"},{"key":"self_feed_avg_comments","value":"17"},{"key":"self_feed_avg_comments","value":"0"},{"key":"self_feed_avg_comments","value":"3.111111111111111"},{"key":"self_feed_avg_comments","value":"10"},{"key":"self_feed_avg_comments","value":"0"},{"key":"self_feed_avg_comments","value":"2.9767618499152917"},{"key":"self_feed_avg_comments","value":"0.46561526322929825"}],[{"key":"self_feed_max_comments","value":"144200692175"},{"key":"self_feed_max_comments","value":"150"},{"key":"self_feed_max_comments","value":"2017-01-24 12:24:03"},{"key":"self_feed_max_comments","value":"2017-03-01 12:56:43"},{"key":"self_feed_max_comments","value":"3"},{"key":"self_feed_max_comments","value":"36"},{"key":"self_feed_max_comments","value":"15"},{"key":"self_feed_max_comments","value":"0.1"},{"key":"self_feed_max_comments","value":"19.68888888888889"},{"key":"self_feed_max_comments","value":"333"},{"key":"self_feed_max_comments","value":"0"},{"key":"self_feed_max_comments","value":"38.49820051360933"},{"key":"self_feed_max_comments","value":"412.1111111111111"},{"key":"self_feed_max_comments","value":"4154"},{"key":"self_feed_max_comments","value":"0"},{"key":"self_feed_max_comments","value":"684.4372311491279"},{"key":"self_feed_max_comments","value":"60.80487804878049"},{"key":"self_feed_max_comments","value":"419"},{"key":"self_feed_max_comments","value":"1"},{"key":"self_feed_max_comments","value":"92.39841789896542"},{"key":"self_feed_max_comments","value":"0"},{"key":"self_feed_max_comments","value":"150"},{"key":"self_feed_max_comments","value":"0.4"},{"key":"self_feed_max_comments","value":"1.2"},{"key":"self_feed_max_comments","value":"2"},{"key":"self_feed_max_comments","value":"6"},{"key":"self_feed_max_comments","value":"0.0"},{"key":"self_feed_max_comments","value":"null"},{"key":"self_feed_max_comments","value":"0"},{"key":"self_feed_max_comments","value":"0"},{"key":"self_feed_max_comments","value":"1"},{"key":"self_feed_max_comments","value":"78"},{"key":"self_feed_max_comments","value":"46"},{"key":"self_feed_max_comments","value":"26"},{"key":"self_feed_max_comments","value":"0"},{"key":"self_feed_max_comments","value":"69.93333333333334"},{"key":"self_feed_max_comments","value":"384"},{"key":"self_feed_max_comments","value":"0"},{"key":"self_feed_max_comments","value":"120.68818540038662"},{"key":"self_feed_max_comments","value":"0.5287566720556621"}],[{"key":"self_feed_min_comments","value":"1452904361600284"},{"key":"self_feed_min_comments","value":"150"},{"key":"self_feed_min_comments","value":"2016-12-01 07:13:18"},{"key":"self_feed_min_comments","value":"2017-03-03 05:04:28"},{"key":"self_feed_min_comments","value":"4"},{"key":"self_feed_min_comments","value":"92"},{"key":"self_feed_min_comments","value":"15"},{"key":"self_feed_min_comments","value":"0.1"},{"key":"self_feed_min_comments","value":"2.2814814814814817"},{"key":"self_feed_min_comments","value":"53"},{"key":"self_feed_min_comments","value":"0"},{"key":"self_feed_min_comments","value":"6.394554413486723"},{"key":"self_feed_min_comments","value":"27.05185185185185"},{"key":"self_feed_min_comments","value":"447"},{"key":"self_feed_min_comments","value":"1"},{"key":"self_feed_min_comments","value":"48.44096553607743"},{"key":"self_feed_min_comments","value":"14.186274509803921"},{"key":"self_feed_min_comments","value":"623"},{"key":"self_feed_min_comments","value":"1"},{"key":"self_feed_min_comments","value":"62.91794599760519"},{"key":"self_feed_min_comments","value":"0"},{"key":"self_feed_min_comments","value":"150"},{"key":"self_feed_min_comments","value":"0.26666666666666666"},{"key":"self_feed_min_comments","value":"1.0"},{"key":"self_feed_min_comments","value":"1"},{"key":"self_feed_min_comments","value":"4"},{"key":"self_feed_min_comments","value":"0.0"},{"key":"self_feed_min_comments","value":"null"},{"key":"self_feed_min_comments","value":"0"},{"key":"self_feed_min_comments","value":"0"},{"key":"self_feed_min_comments","value":"0"},{"key":"self_feed_min_comments","value":"87"},{"key":"self_feed_min_comments","value":"37"},{"key":"self_feed_min_comments","value":"26"},{"key":"self_feed_min_comments","value":"0"},{"key":"self_feed_min_comments","value":"7.933333333333334"},{"key":"self_feed_min_comments","value":"59"},{"key":"self_feed_min_comments","value":"0"},{"key":"self_feed_min_comments","value":"15.087680247078914"},{"key":"self_feed_min_comments","value":"0.3030206152860614"}]],"columnNames":[{"name":"page_id","index":0,"aggr":"sum"},{"name":"self_post_count","index":1,"aggr":"sum"},{"name":"self_feed_first_post_time","index":2,"aggr":"sum"},{"name":"self_feed_last_post_time","index":3,"aggr":"sum"},{"name":"self_feed_number_of_different_months_for_post","index":4,"aggr":"sum"},{"name":"self_feed_number_of_days_between_first_and_last_posts","index":5,"aggr":"sum"},{"name":"self_feed_count_post_updated","index":6,"aggr":"sum"},{"name":"self_feed_post_updated_prc","index":7,"aggr":"sum"},{"name":"self_feed_avg_comments","index":8,"aggr":"sum"},{"name":"self_feed_max_comments","index":9,"aggr":"sum"},{"name":"self_feed_min_comments","index":10,"aggr":"sum"},{"name":"self_feed_std_comments","index":11,"aggr":"sum"},{"name":"self_feed_avg_likes","index":12,"aggr":"sum"},{"name":"self_feed_max_likes","index":13,"aggr":"sum"},{"name":"self_feed_min_likes","index":14,"aggr":"sum"},{"name":"self_feed_std_likes","index":15,"aggr":"sum"},{"name":"self_feed_avg_shares","index":16,"aggr":"sum"},{"name":"self_feed_max_shares","index":17,"aggr":"sum"},{"name":"self_feed_min_shares","index":18,"aggr":"sum"},{"name":"self_feed_std_shares","index":19,"aggr":"sum"},{"name":"self_feed_is_hidden_count","index":20,"aggr":"sum"},{"name":"self_feed_is_published_count","index":21,"aggr":"sum"},{"name":"self_feed_avg_people_tagged_per_post","index":22,"aggr":"sum"},{"name":"self_feed_avg_people_tagged_per_post_with_more_than_zero","index":23,"aggr":"sum"},{"name":"self_feed_post_max_people_tagged","index":24,"aggr":"sum"},{"name":"self_feed_sum_people_tagged_count","index":25,"aggr":"sum"},{"name":"self_feed_avg_with_tagged_per_post","index":26,"aggr":"sum"},{"name":"self_feed_avg_with_tagged_per_post_with_more_than_zero","index":27,"aggr":"sum"},{"name":"self_feed_post_max_with_tagged","index":28,"aggr":"sum"},{"name":"self_feed_sum_with_tagged_count","index":29,"aggr":"sum"},{"name":"self_feed_count_has_place","index":30,"aggr":"sum"},{"name":"self_feed_number_of_shared_story_category","index":31,"aggr":"sum"},{"name":"self_feed_number_of_added_photos_category","index":32,"aggr":"sum"},{"name":"self_feed_number_of_other_categories","index":33,"aggr":"sum"},{"name":"self_feed_number_of_null_category","index":34,"aggr":"sum"},{"name":"self_feed_avg_shares_cnt","index":35,"aggr":"sum"},{"name":"self_feed_max_shares_cnt","index":36,"aggr":"sum"},{"name":"self_feed_min_shares_cnt","index":37,"aggr":"sum"},{"name":"self_feed_std_shares_cnt","index":38,"aggr":"sum"},{"name":"feed_avg_likes_per_comment","index":39,"aggr":"sum"}],"rows":[["395099750663031","121","2017-01-07 08:51:03","2017-02-28 06:58:44","2","52","15","0.12396694214876033","0.37735849056603776","6","0","0.8777984386133216","6.5754716981132075","43","0","6.754114249788153","1.5263157894736843","5","1","1.1239029738980328","0","121","0.0","null","0","0","0.26666666666666666","2.0","3","4","2","34","81","6","0","0.06666666666666667","1","0","0.2581988897471611","0.7779605263157894"],["396356690443859","149","2017-01-02 12:15:52","2017-03-04 09:12:01","3","61","15","0.10067114093959731","3.8582089552238807","76","0","9.526498844102495","724.2164179104477","25705","2","2942.144566818437","7.261682242990654","103","1","12.254638281381949","0","149","0.2","1.5","2","3","2.7333333333333334","8.2","13","41","13","15","108","26","0","4.866666666666666","25","0","6.674756995755048","0.5912575134524238"],["124314530983057","145","2017-02-02 23:52:26","2017-03-02 12:45:58","2","28","13","0.0896551724137931","0.30303030303030304","4","0","0.6872824451272272","58.621212121212125","1238","0","154.5924230243346","1.9125","7","1","1.2945235182261101","0","145","0.0","null","0","0","0.07692307692307693","1.0","1","1","99","9","121","15","0","1.1538461538461537","3","0","0.6887372317211944","0.4453125"],["124406620939557","133","2017-02-25 21:00:28","2017-03-03 23:24:40","2","6","9","0.06766917293233082","5.435483870967742","137","0","13.329008608882827","35.71774193548387","222","2","34.79593483495668","7.282608695652174","63","1","9.970318268581583","0","133","2.2222222222222223","2.5","3","20","0.3333333333333333","1.5","2","3","0","32","45","56","0","7.888888888888889","63","0","20.73309217437455","0.5391619674074706"],["138571859507705","147","2017-03-03 01:30:06","2017-03-05 16:42:25","1","2","15","0.10204081632653061","0.8484848484848485","28","0","3.0604216854705584","70.23484848484848","711","7","103.40610372585907","17.6","179","1","31.95130223145395","0","147","0.26666666666666666","2.0","3","4","0.0","null","0","0","0","89","47","11","0","1.2666666666666666","9","0","2.865226659362887","0.4186021505376344"],["1388465661452708","138","2016-02-20 01:35:45","2016-03-03 22:26:58","2","12","15","0.10869565217391304","1.8211382113821137","42","0","5.662694313714725","24.617886178861788","273","0","34.08391773188862","7.010309278350515","52","1","9.953532502501337","0","138","0.0","null","0","0","0.0","null","0","0","26","3","118","17","0","8.733333333333333","44","0","10.613109593238697","0.9172042946281173"],["1390998467815508","139","2016-12-28 13:57:02","2017-02-24 22:17:07","3","58","15","0.1079136690647482","11.290322580645162","98","0","17.123071581433642","241.23387096774192","2733","2","488.68130351426976","16.217391304347824","183","1","27.954155015108142","0","139","0.06666666666666667","1.0","1","1","0.0","null","0","0","28","22","96","21","0","5.2","33","0","8.937880861015898","0.7920658010334634"],["1410222549007313","131","2017-02-25 07:50:50","2017-03-03 08:52:52","2","6","9","0.06870229007633588","12.270491803278688","396","0","45.47963614507444","21.081967213114755","289","0","38.89222025158875","17.984615384615385","739","1","91.54549625522485","0","131","0.0","null","0","0","0.0","null","0","0","0","4","110","17","0","3.111111111111111","10","0","2.9767618499152917","0.46561526322929825"],["144200692175","150","2017-01-24 12:24:03","2017-03-01 12:56:43","3","36","15","0.1","19.68888888888889","333","0","38.49820051360933","412.1111111111111","4154","0","684.4372311491279","60.80487804878049","419","1","92.39841789896542","0","150","0.4","1.2","2","6","0.0","null","0","0","1","78","46","26","0","69.93333333333334","384","0","120.68818540038662","0.5287566720556621"],["1452904361600284","150","2016-12-01 07:13:18","2017-03-03 05:04:28","4","92","15","0.1","2.2814814814814817","53","0","6.394554413486723","27.05185185185185","447","1","48.44096553607743","14.186274509803921","623","1","62.91794599760519","0","150","0.26666666666666666","1.0","1","4","0.0","null","0","0","0","87","37","26","0","7.933333333333334","59","0","15.087680247078914","0.3030206152860614"]]},"dateCreated":"2017-03-07T07:25:56+0000","dateStarted":"2017-03-07T07:28:18+0000","dateFinished":"2017-03-07T07:29:52+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1023"},{"title":"Create Self Feed Table","text":"sqlContext.sql(\"\"\"\nwith self_feed_raw as(\n    select *\n    from(\n        select *, case when `from`.id = page_id then 1 else 0 end as is_self\n        from feeds_raw)\n    where is_self = 1),\nposts_comments as(\n    select page_id, avg(comment_total_likes / comments_count) as avg_likes_per_comment\n    from(\n        select page_id, id, avg(size(comments.data)) as comments_count,\n               (case when sum(comment.like_count) is not null then sum(comment.like_count) else sum(comment.likeCount) end) as comment_total_likes\n        from self_feed_raw\n        lateral view explode(comments.data) as comment\n        group by page_id, id)\n    group by page_id\n),\nposts as(\nselect  page_id,\n        count(distinct id)                                                                                                              as self_post_count,\n        from_unixtime(min(createdTime/1000))                                                                                            as self_feed_first_post_time,\n        from_unixtime(max(createdTime/1000))                                                                                            as self_feed_last_post_time,\n        count(distinct from_unixtime(createdTime/1000, 'yyyy-MM'))                                                                      as self_feed_number_of_different_months_for_post,\n        datediff(from_unixtime(max(createdTime/1000)), from_unixtime(min(createdTime/1000)))                                            as self_feed_number_of_days_between_first_and_last_posts,\n        sum(case when updatedTime is not null then 1 else 0 end)                                                                        as self_feed_count_post_updated,\n        sum(case when updatedTime is not null then 1 else 0 end) / count(id)                                                            as self_feed_post_updated_prc,\n        avg(comments.summary.total_count)                                                                                               as self_feed_avg_comments,\n        max(comments.summary.total_count)                                                                                               as self_feed_max_comments,\n        min(comments.summary.total_count)                                                                                               as self_feed_min_comments,\n        std(comments.summary.total_count)                                                                                               as self_feed_std_comments,\n        avg(likes.summary.total_count)                                                                                                  as self_feed_avg_likes,\n        max(likes.summary.total_count)                                                                                                  as self_feed_max_likes,\n        min(likes.summary.total_count)                                                                                                  as self_feed_min_likes,\n        std(likes.summary.total_count)                                                                                                  as self_feed_std_likes,\n        avg(shares.count)                                                                                                               as self_feed_avg_shares,\n        max(shares.count)                                                                                                               as self_feed_max_shares,\n        min(shares.count)                                                                                                               as self_feed_min_shares,\n        std(shares.count)                                                                                                               as self_feed_std_shares,\n        sum(case when is_hidden = true or isHidden = true then 1 else 0 end)                                                            as self_feed_is_hidden_count,\n        sum(case when is_published = true or isPublished = true then 1 else 0 end)                                                      as self_feed_is_published_count,\n        avg(size(messageTags))                                                                                                          as self_feed_avg_people_tagged_per_post,\n        avg(case when size(messageTags) > 0 then size(messageTags) else null end)                                                       as self_feed_avg_people_tagged_per_post_with_more_than_zero,\n        max(size(messageTags))                                                                                                          as self_feed_post_max_people_tagged,\n        sum(size(messageTags))                                                                                                          as self_feed_sum_people_tagged_count,\n        avg(size(withTags))                                                                                                             as self_feed_avg_with_tagged_per_post,\n        avg(case when size(withTags) > 0 then size(withTags) else null end)                                                             as self_feed_avg_with_tagged_per_post_with_more_than_zero,\n        max(size(withTags))                                                                                                             as self_feed_post_max_with_tagged,\n        sum(size(withTags))                                                                                                             as self_feed_sum_with_tagged_count,\n        sum(case when place is not null then 1 else 0 end)                                                                              as self_feed_count_has_place,\n        count(distinct case when (statusType = 'shared_story') or (status_type = 'shared_story') then id else null end)                 as self_feed_number_of_shared_story_category,\n        count(distinct case when (statusType = 'added_photos') or (status_type = 'added_photos') then id else null end)                 as self_feed_number_of_added_photos_category,\n        count(distinct case when (statusType is not null and statusType <> 'shared_story' and statusType <> 'added_photos') \n                or (status_type is not null and status_type <> 'shared_story' and status_type <> 'added_photos') then id else null end) as self_feed_number_of_other_categories,\n        count(distinct case when statusType is null and status_type is null then id else null end)                                      as self_feed_number_of_null_category,\n        avg(sharesCount)                                                                                                                as self_feed_avg_shares_cnt,\n        max(sharesCount)                                                                                                                as self_feed_max_shares_cnt,\n        min(sharesCount)                                                                                                                as self_feed_min_shares_cnt,\n        std(sharesCount)                                                                                                                as self_feed_std_shares_cnt\nfrom self_feed_raw f\ngroup by page_id)\nselect p.*,\n      c.avg_likes_per_comment as self_feed_avg_likes_per_comment\nfrom posts p\njoin posts_comments c\non p.page_id = c.page_id\n\"\"\").repartition(1).write.mode(\"overwrite\").json(\"s3a://zeppelindata/staging/hw/self_feeds070317\")\nsqlContext.read.json(\"s3a://zeppelindata/staging/hw/self_feeds070317\").createOrReplaceTempView(\"facebook_homework_self_feeds_analysis\")\n\n","user":"plancky","dateUpdated":"2017-03-08T11:58:05+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1488915060192_1034694558","id":"20170307-193100_1087209849","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"2017-03-07T07:31:00+0000","dateStarted":"2017-03-08T11:58:05+0000","dateFinished":"2017-03-08T11:59:46+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1024"},{"text":"sqlContext.sql(\"\"\"\nwith not_self_feed_raw as(\n    select *\n    from(\n        select *, case when `from`.id = page_id then 1 else 0 end as is_self\n        from feeds_raw)\n    where is_self <> 1),\nposts_comments as(\n    select page_id, avg(comment_total_likes / comments_count) as avg_likes_per_comment\n    from(\n        select page_id, id, avg(size(comments.data)) as comments_count,\n               (case when sum(comment.like_count) is not null then sum(comment.like_count) else sum(comment.likeCount) end) as comment_total_likes\n        from not_self_feed_raw\n        lateral view explode(comments.data) as comment\n        group by page_id, id)\n    group by page_id\n),\nposts as(\nselect  page_id,\n        count(distinct id)                                                                                                              as feed_post_count,\n        count(distinct `from`.id)                                                                                                       as feed_distinct_post_writers,\n        from_unixtime(min(createdTime/1000))                                                                                            as feed_first_post_time,\n        from_unixtime(max(createdTime/1000))                                                                                            as feed_last_post_time,\n        count(distinct from_unixtime(createdTime/1000, 'yyyy-MM'))                                                                      as feed_number_of_different_months_for_post,\n        datediff(from_unixtime(max(createdTime/1000)), from_unixtime(min(createdTime/1000)))                                            as feed_number_of_days_between_first_and_last_posts,\n        sum(case when updatedTime is not null then 1 else 0 end)                                                                        as feed_count_post_updated,\n        sum(case when updatedTime is not null then 1 else 0 end) / count(id)                                                            as feed_post_updated_prc,\n        avg(comments.summary.total_count)                                                                                               as feed_avg_comments,\n        max(comments.summary.total_count)                                                                                               as feed_max_comments,\n        min(comments.summary.total_count)                                                                                               as feed_min_comments,\n        std(comments.summary.total_count)                                                                                               as feed_std_comments,\n        avg(likes.summary.total_count)                                                                                                  as feed_avg_likes,\n        max(likes.summary.total_count)                                                                                                  as feed_max_likes,\n        min(likes.summary.total_count)                                                                                                  as feed_min_likes,\n        std(likes.summary.total_count)                                                                                                  as feed_std_likes,\n        avg(shares.count)                                                                                                               as feed_avg_shares,\n        max(shares.count)                                                                                                               as feed_max_shares,\n        min(shares.count)                                                                                                               as feed_min_shares,\n        std(shares.count)                                                                                                               as feed_std_shares,\n        sum(case when is_hidden = true or isHidden = true then 1 else 0 end)                                                            as feed_is_hidden_count,\n        sum(case when is_published = true or isPublished = true then 1 else 0 end)                                                      as feed_is_published_count,\n        avg(size(messageTags))                                                                                                          as feed_avg_people_tagged_per_post,\n        avg(case when size(messageTags) > 0 then size(messageTags) else null end)                                                       as feed_avg_people_tagged_per_post_with_more_than_zero,\n        max(size(messageTags))                                                                                                          as feed_post_max_people_tagged,\n        sum(size(messageTags))                                                                                                          as feed_sum_people_tagged_count,\n        avg(size(withTags))                                                                                                             as feed_avg_with_tagged_per_post,\n        avg(case when size(withTags) > 0 then size(withTags) else null end)                                                             as feed_avg_with_tagged_per_post_with_more_than_zero,\n        max(size(withTags))                                                                                                             as feed_post_max_with_tagged,\n        sum(size(withTags))                                                                                                             as feed_sum_with_tagged_count,\n        sum(case when place is not null then 1 else 0 end)                                                                              as feed_count_has_place,\n        count(distinct case when (statusType = 'shared_story') or (status_type = 'shared_story') then id else null end)                 as feed_number_of_shared_story_category,\n        count(distinct case when (statusType = 'added_photos') or (status_type = 'added_photos') then id else null end)                 as feed_number_of_added_photos_category,\n        count(distinct case when (statusType is not null and statusType <> 'shared_story' and statusType <> 'added_photos') \n                or (status_type is not null and status_type <> 'shared_story' and status_type <> 'added_photos') then id else null end) as feed_number_of_other_categories,\n        count(distinct case when statusType is null and status_type is null then id else null end)                                      as feed_number_of_null_category,\n        avg(sharesCount)                                                                                                                as feed_avg_shares_cnt,\n        max(sharesCount)                                                                                                                as feed_max_shares_cnt,\n        min(sharesCount)                                                                                                                as feed_min_shares_cnt,\n        std(sharesCount)                                                                                                                as feed_std_shares_cnt\nfrom not_self_feed_raw f\ngroup by page_id)\nselect p.*,\n      c.avg_likes_per_comment as feed_avg_likes_per_comment\nfrom posts p\njoin posts_comments c\non p.page_id = c.page_id\n\"\"\").repartition(1).write.mode(\"overwrite\").json(\"s3a://zeppelindata/staging/hw/not_self_feeds080317\")\nsqlContext.read.json(\"s3a://zeppelindata/staging/hw/not_self_feeds080317\").createOrReplaceTempView(\"facebook_homework_not_self_feeds_analysis\")\n\n","user":"plancky","dateUpdated":"2017-03-08T12:00:24+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1488972689024_330382210","id":"20170308-113129_1397130278","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"2017-03-08T11:31:29+0000","dateStarted":"2017-03-08T12:00:24+0000","dateFinished":"2017-03-08T12:01:19+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1025"},{"title":"","text":"%md\n\n##Events","user":"plancky","dateUpdated":"2017-03-07T02:43:18+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","title":false,"editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485119363698_2135666502","id":"20170122-210923_1206403716","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>Events</h2>\n"},"dateCreated":"2017-01-22T09:09:23+0000","dateStarted":"2017-03-07T02:43:12+0000","dateFinished":"2017-03-07T02:43:12+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1026"},{"title":"Get page events (TODO)","text":"// @RequestMapping(value = \"/user/{userId}/events/{objectId}\", method = RequestMethod.GET)\n// public Paged<Event> getOtherEvents(@PathVariable(\"userId\") String userId,\n//                                   @PathVariable(\"objectId\") String objectId,\n//                                   @RequestParam(value = \"limit\", required = false, defaultValue = \"50\") int limit,\n//                                   @RequestParam(value = \"next\", required = false, defaultValue = \"\") String next) \n\n\n","dateUpdated":"2017-03-07T02:39:38+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true,"editorHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485136280402_2103567213","id":"20170123-015120_74996071","dateCreated":"2017-01-23T01:51:20+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:1027"}],"name":"/projects/facebook directory homework 2nd try","id":"2C9QEBDHK","angularObjects":{"2BRWU4WXC:shared_process":[],"2AM1YV5CU:shared_process":[],"2C4WZ8CF7:shared_process":[],"2AJXGMUUJ:shared_process":[],"2AKK3QQXU:shared_process":[]},"config":{"looknfeel":"default"},"info":{}}