{"paragraphs":[{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1488897725955_-1232657031","id":"20170307-144205_929395203","dateCreated":"2017-03-07T14:42:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4524","text":"%md\n\n##Infra","user":"plancky","dateUpdated":"2017-03-07T14:42:32+0000","dateFinished":"2017-03-07T14:42:25+0000","dateStarted":"2017-03-07T14:42:25+0000","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>Infra</h2>\n"}},{"title":"Data Import","text":"// Categories (for search uses) //\nval facebook_page_categories_df = sqlContext.read.option(\"header\", \"true\").csv(\"s3a://zeppelindata/staging/hw/facebook_page_categories.csv\")\nfacebook_page_categories_df.createOrReplaceTempView(\"facebook_page_categories\")\n\n\n// Pages //\nsqlContext.read.json(\"s3a://zeppelindata/staging/hw/pages240117\").createOrReplaceTempView(\"facebook_homework_pages\")\nsqlContext.read.parquet(\"s3a://zeppelindata/staging/hw/photos_raw_parquet_amir_fix\").createOrReplaceTempView(\"salame_facebook_homework_photos_with_files\")\n\n\n// Photos //\nsqlContext.read.parquet(\"s3a://zeppelindata/staging/hw/photos_raw_parquet070317\").createOrReplaceTempView(\"photos_raw_parquet\")\nsqlContext.read.json(\"s3a://zeppelindata/staging/hw/photos_raw070317\").createOrReplaceTempView(\"photos_raw\")\n// sqlContext.read.json(\"s3a://zeppelindata/staging/hw/photos030317\").createOrReplaceTempView(\"facebook_homework_photos_analysis\")\nsqlContext.read.json(\"s3a://zeppelindata/staging/hw/photos070317\").createOrReplaceTempView(\"facebook_homework_photos_analysis\")\n\n\n// Feeds //\nsqlContext.read.parquet(\"s3a://zeppelindata/staging/hw/feeds_raw_parquet\").createOrReplaceTempView(\"feeds_raw_parquet\")\nsqlContext.read.json(\"s3a://zeppelindata/staging/hw/feeds_raw050317\").createOrReplaceTempView(\"feeds_raw\")\n// sqlContext.read.json(\"s3a://zeppelindata/staging/hw/feeds060317\").createOrReplaceTempView(\"facebook_homework_feeds_analysis\")\nsqlContext.read.json(\"s3a://zeppelindata/staging/hw/feeds070317\").createOrReplaceTempView(\"facebook_homework_feeds_analysis\")\n","user":"plancky","dateUpdated":"2017-03-07T14:39:58+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true,"editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1488457633840_1804205753","id":"20170302-122713_1261852096","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"2017-03-02T12:27:13+0000","dateStarted":"2017-03-06T09:38:28+0000","dateFinished":"2017-03-06T09:38:31+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:983"},{"title":"Utils","text":"var base_directory = \"staging/hw\"\n\ndef getRandomFacebookUserId(): Long = {\n    var user_ids = List(10153572127214868L, 130419397301277L, 982489488536527L)\n    var current_user_id = scala.util.Random.shuffle(user_ids).head\n\n    return current_user_id\n}\n\n\ndef listSoSet(some_list: Seq[String]): Seq[String] = {\n    return some_list.toSet.toSeq\n}\n\n\nsqlContext.udf.register(\"listSoSet\", (some_list: Seq[String]) => listSoSet(some_list))\n\n\ndef fileExistsInS3(bucket_name: String, file_name: String): Boolean = {\n    var found_file = false\n    try {\n        println(\"Trying to read s3://\" + bucket_name + \"/\" + file_name)\n        var read_file = readFromS3(bucket_name, file_name)\n        if (read_file.size > 0) {\n            found_file = true\n        }\n\n    } catch {\n        case e: com.amazonaws.services.s3.model.AmazonS3Exception => {\n            if (e.getMessage.contains(\"The specified key does not exist\")) {\n                found_file = false\n            } else {\n                throw e\n            }\n        }\n    }\n    \n    println(\"Returning \" + found_file + \" for file s3://\" + bucket_name + \"/\" + file_name)\n    return found_file\n}\n\n\ndef getUrlAsStringWithErrors(inputUrl: String): String = {\n    val client = new org.apache.http.impl.client.DefaultHttpClient()\n    val request = new org.apache.http.client.methods.HttpGet(inputUrl)\n    val response = client.execute(request)\n    val handler = new org.apache.http.impl.client.BasicResponseHandler()\n    var res = new java.io.ByteArrayOutputStream()\n    var code = response.getStatusLine.getStatusCode\n    org.apache.commons.io.IOUtils.copy(response.getEntity.getContent, res)\n    if (code == 200) {\n        return new String(res.toByteArray, \"utf-8\")\n    } else {\n        throw new Exception(\"Failed with body: \" + new String(res.toByteArray, \"utf-8\"))\n    }\n}","user":"plancky","dateUpdated":"2017-03-07T14:35:53+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true,"editorHide":true,"tableHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485019375699_1453971197","id":"20170121-172255_1802823802","result":{"code":"SUCCESS","type":"TEXT","msg":"\ngetRandomFacebookUserId: ()Long\n\nlistSoSet: (some_list: Seq[String])Seq[String]\n\nres130: org.apache.spark.sql.expressions.UserDefinedFunction = UserDefinedFunction(<function1>,ArrayType(StringType,true),Some(List(ArrayType(StringType,true))))\n\nfacebook_page_categories_df: org.apache.spark.sql.DataFrame = [Category: string, Id: string ... 1 more field]\n\nbase_directory: String = staging/hw\n\nfileExistsInS3: (bucket_name: String, file_name: String)Boolean\n\nwarning: there were 1 deprecation warning(s); re-run with -deprecation for details\n\ngetUrlAsStringWithErrors: (inputUrl: String)String\n"},"dateCreated":"2017-01-21T05:22:55+0000","dateStarted":"2017-03-06T09:40:40+0000","dateFinished":"2017-03-06T09:40:42+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:984"},{"text":"%md\n\n##Page search and Genral info","user":"plancky","dateUpdated":"2017-03-07T14:41:22+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1488732756637_1765512398","id":"20170305-165236_610676172","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>Page search and Genral info</h2>\n"},"dateCreated":"2017-03-05T04:52:36+0000","dateStarted":"2017-03-07T14:41:14+0000","dateFinished":"2017-03-07T14:41:14+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:985","focus":true},{"title":"Search pages by categories","text":"// @RequestMapping(value = \"/searchpages/{userId}\", method = RequestMethod.GET)\n// public Paged<Page> searchPages(@PathVariable(\"userId\") String userId,\n//                               @RequestParam(\"query\") String query,\n//                               @RequestParam(value = \"limit\",required = false) String limit)\n\nvar limit = 100\n\nvar query_terms = sqlContext.sql(\"\"\"\nselect word, count(*) as num_occurs\nfrom (select split(regexp_replace(id, '/', ' '), ' ') as words\n     from facebook_page_categories) t\nlateral view explode (words) w as word\ngroup by word\norder by num_occurs desc\nlimit 10\"\"\").map(a => a.getAs[String](\"word\"))\n\n// var query_terms = List(\"Foo\", \"Bar\", \"Coffee\")\n\nquery_terms\n    .repartition(1)\n    // .collect\n    .foreach(query_term => { \n    \n    var next_page_url = \"\"\n    var max_pages = 10 // Max results are 500 anyway (limit=100 * max_pages=5)\n    var current_user_id = getRandomFacebookUserId()\n\n    var found_file = false\n    try {\n        readFromS3(\"zeppelindata\", base_directory + \"/salame_facebook_homework/\" + query_term + \"/0\")\n        found_file = true\n    } catch {\n        case e: com.amazonaws.services.s3.model.AmazonS3Exception => {\n            if (e.getMessage.contains(\"The specified key does not exist\")) {\n                found_file = false\n            } else {\n                throw e\n            }\n        }\n    }\n    \n    if (!found_file) { // Skip found files\n        import scala.util.control.Breaks._\n        breakable { \n            for (page_number <- 0 to max_pages) {\n                println(\"Working on page \" + page_number + \" in query_term \" + query_term + \" with next_page_url.isEmpty \" + next_page_url.isEmpty)\n                var start_url_to_get = \"https://user:GhNoFZ3CPPUsHQ2WGwCzFBj3m7tcYWf@planckfacebookclient.herokuapp.com/searchpages/\" + current_user_id + \"?query=\" + query_term + \"&limit=\" + limit\n                \n                val objectMapper = new com.fasterxml.jackson.databind.ObjectMapper() with com.fasterxml.jackson.module.scala.experimental.ScalaObjectMapper;\n                objectMapper.registerModule(com.fasterxml.jackson.module.scala.DefaultScalaModule)\n                \n                var current_reply = \"\"\n                if (next_page_url.isEmpty) {\n                    current_reply = getUrlAsString(start_url_to_get)\n                } else {\n                    current_reply = getUrlAsString(next_page_url)\n                }\n        \n                // Write content to s3\n                writeContentToS3(current_reply, \"zeppelindata\", base_directory + \"/salame_facebook_homework/\" + query_term + \"/\" + page_number)\n            \n                // Get next page (or stop trying to fetch)\n                var paging_object_option = objectMapper.readValue[Map[String, Object]](current_reply).get(\"paging\")\n                if (paging_object_option.isEmpty || paging_object_option.get == null) {\n                    // println(\"should break at paging\")\n                    break\n                } else {\n                    var next_page_url_option = paging_object_option.get.asInstanceOf[Map[String, Object]].get(\"next\")\n                    if (next_page_url_option.isEmpty || next_page_url_option.get == null) {\n                        // println(\"should break at next\")\n                        break\n                    } else {\n                        next_page_url = next_page_url_option.get.asInstanceOf[String]\n                    }\n                }\n            }\n        }\n    } else {\n        println(\"Skipped query_term \" + query_term)\n    }\n})\n","user":"plancky","dateUpdated":"2017-03-07T14:39:11+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","lineNumbers":false,"title":true,"editorHide":true,"tableHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485015528093_-602293479","id":"20170121-161848_1549205044","result":{"code":"SUCCESS","type":"TEXT","msg":"\nlimit: Int = 100\n\nquery_terms: org.apache.spark.sql.Dataset[String] = [value: string]\n"},"dateCreated":"2017-01-21T04:18:48+0000","dateStarted":"2017-01-23T08:35:17+0000","dateFinished":"2017-01-23T08:35:18+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:986"},{"title":"Create genral info table","text":"// sqlContext.sql(\"\"\"\n// with pages as(\n//         select page.*\n//         from facebook_homework_pages \n//         lateral view explode (data) d as page)\n// select  id,\n//         name, \n//         nameWithLocationDescriptor, \n//         case when picture.url is null and picture.data is null then 0 else 1 end as has_profile_photo,\n//         case when cover.coverId is null then 0 else 1 end as has_cover_photo, \n//         link, \n//         location, \n//         currentLocation, current_location, \n//         hometown, \n//         phone, \n//         emails,\n//         website, \n//         isAlwaysOpen, \n//         founded, \n//         description, \n//         startInfo, start_info, \n//         generalInfo, general_info, \n//         placeType, \n//         isCommunityPage, \n//         isPermanentlyClosed, \n//         isPublished, \n//         isUnclaimed, is_unclaimed,\n//         isVerified, is_verified,\n//         is_permanently_closed, \n//         lastUsedTime, \n//         priceRange, price_range, \n//         unreadMessageCount, \n//         unreadNotifCount, \n//         unseenMessageCount, \n//         products,\n//         fanCount, \n//         starring, \n//         talkingAboutCount, talking_about_count, \n//         wereHereCount, \n//         were_here_count,\n//         countryPageLikes,\n//         newLikeCount, \n//         likes\n// from pages \n// \"\"\").repartition(1).write.mode(\"overwrite\").json(\"s3a://zeppelindata/staging/hw/pages240117\")\nsqlContext.read.json(\"s3a://zeppelindata/staging/hw/pages240117\").createOrReplaceTempView(\"facebook_homework_pages\")","user":"plancky","dateUpdated":"2017-03-07T14:30:34+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true,"editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485283360598_-645945583","id":"20170124-184240_1817418198","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"2017-01-24T06:42:40+0000","dateStarted":"2017-03-02T10:07:24+0000","dateFinished":"2017-03-02T10:07:26+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:988"},{"text":"%md\n\n##Photos","user":"plancky","dateUpdated":"2017-03-07T14:42:24+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1488733048020_-1826489654","id":"20170305-165728_1504402586","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>Photos</h2>\n"},"dateCreated":"2017-03-05T04:57:28+0000","dateStarted":"2017-03-07T14:42:24+0000","dateFinished":"2017-03-07T14:42:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:989","focus":true},{"title":"Delete photos fetch status of pages","text":"\nsqlContext.sql(\"\"\"\nselect concat('aws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/', id, ' --recursive') as command\nfrom facebook_homework_pages\norder by  md5(id) asc\nlimit 10\n\"\"\").foreach( a => { var statement_to_run = a.getAs[String](\"command\") ......... } )","user":"plancky","dateUpdated":"2017-03-05T05:55:43+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true,"editorHide":true,"tableHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485389009800_1377918270","id":"20170126-000329_1046655867","result":{"code":"SUCCESS","type":"TABLE","msg":"concat(aws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/, id,  --recursive)\naws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/146454158750353 --recursive\naws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/1415864628634163 --recursive\naws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/1824729117784651 --recursive\naws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/705763476210327 --recursive\naws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/202883613067490 --recursive\naws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/114976351852163 --recursive\naws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/835370026515358 --recursive\naws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/142827506122189 --recursive\naws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/135919063162473 --recursive\naws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/590913647738481 --recursive\n","comment":"","msgTable":[[{"value":"aws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/146454158750353 --recursive"}],[{"value":"aws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/1415864628634163 --recursive"}],[{"value":"aws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/1824729117784651 --recursive"}],[{"value":"aws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/705763476210327 --recursive"}],[{"value":"aws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/202883613067490 --recursive"}],[{"value":"aws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/114976351852163 --recursive"}],[{"value":"aws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/835370026515358 --recursive"}],[{"value":"aws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/142827506122189 --recursive"}],[{"value":"aws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/135919063162473 --recursive"}],[{"value":"aws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/590913647738481 --recursive"}]],"columnNames":[{"name":"concat(aws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/, id,  --recursive)","index":0,"aggr":"sum"}],"rows":[["aws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/146454158750353 --recursive"],["aws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/1415864628634163 --recursive"],["aws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/1824729117784651 --recursive"],["aws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/705763476210327 --recursive"],["aws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/202883613067490 --recursive"],["aws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/114976351852163 --recursive"],["aws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/835370026515358 --recursive"],["aws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/142827506122189 --recursive"],["aws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/135919063162473 --recursive"],["aws s3 rm s3://zeppelindata/staging/hw/salame_facebook_homework_photos_status/590913647738481 --recursive"]]},"dateCreated":"2017-01-26T12:03:29+0000","dateStarted":"2017-01-26T12:05:36+0000","dateFinished":"2017-01-26T12:05:37+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:990"},{"title":"Facebook call test","text":"def getUrlAsStringWithErrors(inputUrl: String): String = {\n    val client = new org.apache.http.impl.client.DefaultHttpClient()\n    val request = new org.apache.http.client.methods.HttpGet(inputUrl)\n    val response = client.execute(request)\n    val handler = new org.apache.http.impl.client.BasicResponseHandler()\n    var res = new java.io.ByteArrayOutputStream()\n    var code = response.getStatusLine.getStatusCode\n    org.apache.commons.io.IOUtils.copy(response.getEntity.getContent, res)\n    if (code == 200) {\n        return new String(res.toByteArray, \"utf-8\")\n    } else {\n        throw new Exception(\"Failed with body: \" + new String(res.toByteArray, \"utf-8\"))\n    }\n}\n\nvar pre_url  = \"https://user:GhNoFZ3CPPUsHQ2WGwCzFBj3m7tcYWf@planckfacebookclient.herokuapp.com/user/10153572127214868/feed/388715684614122?limit=10&fields=\"\nvar test_url = \"https://user:GhNoFZ3CPPUsHQ2WGwCzFBj3m7tcYWf@planckfacebookclient.herokuapp.com/user/10153572127214868/\"\nvar test_page_id = \"388715684614122\"\n\n// var feed_fields = \"id,created_time,from,is_hidden,is_published,message_tags,place,privacy,status_type,story,story_tags,targeting,to,updated_time,with_tags,comments.limit(200){comment_count,created_time,from,id,like_count,message_tags,likes.limit(200){id}},feed_targeting,link\"//{age_min,age_max}\"//,link{picture}\" //,\"\n\nvar new_feed_fields = \"id,created_time,feed_targeting,from,is_hidden,is_published,link,message_tags,picture,place{id},shares,source,status_type,targeting,to,updated_time,with_tags,comments.summary(true){like_count},likes.summary(true).limit(0),attachments{description_tags,media,target}\"\n\nvar new_photo_field = \"album{type,count},backdated_time,created_time,from,link,name,name_tags,page_story_id,place{id},updated_time,tags.summary(true){created_time,tagging_user},comments.summary(true){like_count},likes.summary(true).limit(0)\"\nvar photo_endpoint = \"photoswithfields/\"\nvar params = \"?limit=10&fields=\"\n\nval encodedfields = java.net.URLEncoder.encode(new_photo_field,\"UTF-8\");\nvar url = test_url + photo_endpoint + test_page_id + params + encodedfields \n\nvar bla = getUrlAsStringWithErrors(url)\nprintln(bla)\n","user":"plancky","dateUpdated":"2017-03-07T14:17:31+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true,"editorHide":true,"tableHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1488726412601_1141393916","id":"20170305-150652_2015382718","result":{"code":"SUCCESS","type":"TEXT","msg":"\nwarning: there were 1 deprecation warning(s); re-run with -deprecation for details\n\ngetUrlAsStringWithErrors: (inputUrl: String)String\n\npre_url: String = https://user:GhNoFZ3CPPUsHQ2WGwCzFBj3m7tcYWf@planckfacebookclient.herokuapp.com/user/10153572127214868/feed/388715684614122?limit=10&fields=\n\ntest_url: String = https://user:GhNoFZ3CPPUsHQ2WGwCzFBj3m7tcYWf@planckfacebookclient.herokuapp.com/user/10153572127214868/\n\ntest_page_id: String = 388715684614122\n\nnew_feed_fields: String = id,created_time,feed_targeting,from,is_hidden,is_published,link,message_tags,picture,place{id},shares,source,status_type,targeting,to,updated_time,with_tags,comments.summary(true){like_count},likes.summary(true).limit(0),attachments{description_tags,media,target}\n\nnew_photo_field: String = album{type,count},backdated_time,created_time,from,link,name,name_tags,page_story_id,place{id},updated_time,tags.summary(true){created_time,tagging_user},comments.summary(true){like_count},likes.summary(true).limit(0)\n\nphoto_endpoint: String = photoswithfields/\n\nparams: String = ?limit=10&fields=\n\nencodedfields: String = album%7Btype%2Ccount%7D%2Cbackdated_time%2Ccreated_time%2Cfrom%2Clink%2Cname%2Cname_tags%2Cpage_story_id%2Cplace%7Bid%7D%2Cupdated_time%2Ctags.summary%28true%29%7Bcreated_time%2Ctagging_user%7D%2Ccomments.summary%28true%29%7Blike_count%7D%2Clikes.summary%28true%29.limit%280%29\n\nurl: String = https://user:GhNoFZ3CPPUsHQ2WGwCzFBj3m7tcYWf@planckfacebookclient.herokuapp.com/user/10153572127214868/photoswithfields/388715684614122?limit=10&fields=album%7Btype%2Ccount%7D%2Cbackdated_time%2Ccreated_time%2Cfrom%2Clink%2Cname%2Cname_tags%2Cpage_story_id%2Cplace%7Bid%7D%2Cupdated_time%2Ctags.summary%28true%29%7Bcreated_time%2Ctagging_user%7D%2Ccomments.summary%28true%29%7Blike_count%7D%2Clikes.summary%28true%29.limit%280%29\nbla: String = {\"data\":[{\"id\":\"646181795534175\",\"metadata\":null,\"type\":null,\"name\":null,\"from\":{\"id\":\"388715684614122\",\"metadata\":null,\"type\":null,\"name\":\"Snow Island Coffee\",\"category\":null},\"picture\":null,\"pageStoryId\":null,\"reactions\":null,\"source\":null,\"height\":null,\"width\":null,\"link\":\"https://www.facebook.com/SnowIslandCoffee/photos/a.388988311253526.1073741827.388715684614122/646181795534175/?type=3\",\"icon\":null,\"album\":{\"id\":\"388988311253526\",\"metadata\":null,\"type\":\"profile\",\"name\":null,\"from\":null,\"description\":null,\"location\":null,\"link\":null,\"count\":7,\"coverPhoto\":null,\"privacy\":null,\"canUpload\":null,\"createdTime\":null,\"updatedTime\":null,\"place\":null,\"event\":null,\"comments\":null,\"picture\":null,\"likes\":null},\"canDelete\":null,\"canTag\":null,\"position\":null,\"event\":null,\"updatedTi...{\"data\":[{\"id\":\"646181795534175\",\"metadata\":null,\"type\":null,\"name\":null,\"from\":{\"id\":\"388715684614122\",\"metadata\":null,\"type\":null,\"name\":\"Snow Island Coffee\",\"category\":null},\"picture\":null,\"pageStoryId\":null,\"reactions\":null,\"source\":null,\"height\":null,\"width\":null,\"link\":\"https://www.facebook.com/SnowIslandCoffee/photos/a.388988311253526.1073741827.388715684614122/646181795534175/?type=3\",\"icon\":null,\"album\":{\"id\":\"388988311253526\",\"metadata\":null,\"type\":\"profile\",\"name\":null,\"from\":null,\"description\":null,\"location\":null,\"link\":null,\"count\":7,\"coverPhoto\":null,\"privacy\":null,\"canUpload\":null,\"createdTime\":null,\"updatedTime\":null,\"place\":null,\"event\":null,\"comments\":null,\"picture\":null,\"likes\":null},\"canDelete\":null,\"canTag\":null,\"position\":null,\"event\":null,\"updatedTime\":1469960273000,\"createdTime\":1469960273000,\"tags\":[],\"comments\":{\"summary\":{\"totalCount\":4,\"order\":\"ranked\",\"canComment\":true},\"data\":[{\"id\":\"646181795534175_646229558862732\",\"metadata\":null,\"type\":null,\"from\":null,\"message\":null,\"createdTime\":null,\"likes\":null,\"likeCount\":0,\"commentCount\":0,\"canRemove\":null,\"userLikes\":null,\"parent\":null,\"canComment\":null,\"canHide\":null,\"canReplyPrivately\":null,\"privateReplyConversation\":null,\"isHidden\":null,\"canLike\":null,\"object\":null,\"comments\":null,\"attachment\":null,\"messageTags\":[]},{\"id\":\"646181795534175_646648215487533\",\"metadata\":null,\"type\":null,\"from\":null,\"message\":null,\"createdTime\":null,\"likes\":null,\"likeCount\":1,\"commentCount\":0,\"canRemove\":null,\"userLikes\":null,\"parent\":null,\"canComment\":null,\"canHide\":null,\"canReplyPrivately\":null,\"privateReplyConversation\":null,\"isHidden\":null,\"canLike\":null,\"object\":null,\"comments\":null,\"attachment\":null,\"messageTags\":[]},{\"id\":\"646181795534175_646197062199315\",\"metadata\":null,\"type\":null,\"from\":null,\"message\":null,\"createdTime\":null,\"likes\":null,\"likeCount\":0,\"commentCount\":0,\"canRemove\":null,\"userLikes\":null,\"parent\":null,\"canComment\":null,\"canHide\":null,\"canReplyPrivately\":null,\"privateReplyConversation\":null,\"isHidden\":null,\"canLike\":null,\"object\":null,\"comments\":null,\"attachment\":null,\"messageTags\":[]}]},\"likes\":{\"summary\":{\"totalCount\":166,\"order\":null,\"canComment\":null},\"data\":[]},\"images\":[],\"nameTags\":[],\"place\":null,\"backdatedTime\":null,\"backdatedTimeGranularity\":null},{\"id\":\"544842302334792\",\"metadata\":null,\"type\":null,\"name\":null,\"from\":{\"id\":\"388715684614122\",\"metadata\":null,\"type\":null,\"name\":\"Snow Island Coffee\",\"category\":null},\"picture\":null,\"pageStoryId\":null,\"reactions\":null,\"source\":null,\"height\":null,\"width\":null,\"link\":\"https://www.facebook.com/SnowIslandCoffee/photos/a.388988311253526.1073741827.388715684614122/544842302334792/?type=3\",\"icon\":null,\"album\":{\"id\":\"388988311253526\",\"metadata\":null,\"type\":\"profile\",\"name\":null,\"from\":null,\"description\":null,\"location\":null,\"link\":null,\"count\":7,\"coverPhoto\":null,\"privacy\":null,\"canUpload\":null,\"createdTime\":null,\"updatedTime\":null,\"place\":null,\"event\":null,\"comments\":null,\"picture\":null,\"likes\":null},\"canDelete\":null,\"canTag\":null,\"position\":null,\"event\":null,\"updatedTime\":1469960270000,\"createdTime\":1448858635000,\"tags\":[],\"comments\":{\"summary\":{\"totalCount\":0,\"order\":\"ranked\",\"canComment\":true},\"data\":[]},\"likes\":{\"summary\":{\"totalCount\":78,\"order\":null,\"canComment\":null},\"data\":[]},\"images\":[],\"nameTags\":[],\"place\":null,\"backdatedTime\":null,\"backdatedTimeGranularity\":null},{\"id\":\"510469055772117\",\"metadata\":null,\"type\":null,\"name\":null,\"from\":{\"id\":\"388715684614122\",\"metadata\":null,\"type\":null,\"name\":\"Snow Island Coffee\",\"category\":null},\"picture\":null,\"pageStoryId\":null,\"reactions\":null,\"source\":null,\"height\":null,\"width\":null,\"link\":\"https://www.facebook.com/SnowIslandCoffee/photos/a.388988311253526.1073741827.388715684614122/510469055772117/?type=3\",\"icon\":null,\"album\":{\"id\":\"388988311253526\",\"metadata\":null,\"type\":\"profile\",\"name\":null,\"from\":null,\"description\":null,\"location\":null,\"link\":null,\"count\":7,\"coverPhoto\":null,\"privacy\":null,\"canUpload\":null,\"createdTime\":null,\"updatedTime\":null,\"place\":null,\"event\":null,\"comments\":null,\"picture\":null,\"likes\":null},\"canDelete\":null,\"canTag\":null,\"position\":null,\"event\":null,\"updatedTime\":1448858636000,\"createdTime\":1440388661000,\"tags\":[],\"comments\":{\"summary\":{\"totalCount\":1,\"order\":\"ranked\",\"canComment\":true},\"data\":[{\"id\":\"510469055772117_518798191605870\",\"metadata\":null,\"type\":null,\"from\":null,\"message\":null,\"createdTime\":null,\"likes\":null,\"likeCount\":1,\"commentCount\":0,\"canRemove\":null,\"userLikes\":null,\"parent\":null,\"canComment\":null,\"canHide\":null,\"canReplyPrivately\":null,\"privateReplyConversation\":null,\"isHidden\":null,\"canLike\":null,\"object\":null,\"comments\":null,\"attachment\":null,\"messageTags\":[]}]},\"likes\":{\"summary\":{\"totalCount\":105,\"order\":null,\"canComment\":null},\"data\":[]},\"images\":[],\"nameTags\":[],\"place\":null,\"backdatedTime\":null,\"backdatedTimeGranularity\":null},{\"id\":\"470948679724155\",\"metadata\":null,\"type\":null,\"name\":null,\"from\":{\"id\":\"388715684614122\",\"metadata\":null,\"type\":null,\"name\":\"Snow Island Coffee\",\"category\":null},\"picture\":null,\"pageStoryId\":null,\"reactions\":null,\"source\":null,\"height\":null,\"width\":null,\"link\":\"https://www.facebook.com/SnowIslandCoffee/photos/a.388988311253526.1073741827.388715684614122/470948679724155/?type=3\",\"icon\":null,\"album\":{\"id\":\"388988311253526\",\"metadata\":null,\"type\":\"profile\",\"name\":null,\"from\":null,\"description\":null,\"location\":null,\"link\":null,\"count\":7,\"coverPhoto\":null,\"privacy\":null,\"canUpload\":null,\"createdTime\":null,\"updatedTime\":null,\"place\":null,\"event\":null,\"comments\":null,\"picture\":null,\"likes\":null},\"canDelete\":null,\"canTag\":null,\"position\":null,\"event\":null,\"updatedTime\":1440388662000,\"createdTime\":1432723246000,\"tags\":[],\"comments\":{\"summary\":{\"totalCount\":1,\"order\":\"ranked\",\"canComment\":true},\"data\":[{\"id\":\"470948679724155_471754546310235\",\"metadata\":null,\"type\":null,\"from\":null,\"message\":null,\"createdTime\":null,\"likes\":null,\"likeCount\":1,\"commentCount\":0,\"canRemove\":null,\"userLikes\":null,\"parent\":null,\"canComment\":null,\"canHide\":null,\"canReplyPrivately\":null,\"privateReplyConversation\":null,\"isHidden\":null,\"canLike\":null,\"object\":null,\"comments\":null,\"attachment\":null,\"messageTags\":[]}]},\"likes\":{\"summary\":{\"totalCount\":32,\"order\":null,\"canComment\":null},\"data\":[]},\"images\":[],\"nameTags\":[],\"place\":null,\"backdatedTime\":null,\"backdatedTimeGranularity\":null},{\"id\":\"400679483417742\",\"metadata\":null,\"type\":null,\"name\":null,\"from\":{\"id\":\"388715684614122\",\"metadata\":null,\"type\":null,\"name\":\"Snow Island Coffee\",\"category\":null},\"picture\":null,\"pageStoryId\":null,\"reactions\":null,\"source\":null,\"height\":null,\"width\":null,\"link\":\"https://www.facebook.com/SnowIslandCoffee/photos/a.388988311253526.1073741827.388715684614122/400679483417742/?type=3\",\"icon\":null,\"album\":{\"id\":\"388988311253526\",\"metadata\":null,\"type\":\"profile\",\"name\":null,\"from\":null,\"description\":null,\"location\":null,\"link\":null,\"count\":7,\"coverPhoto\":null,\"privacy\":null,\"canUpload\":null,\"createdTime\":null,\"updatedTime\":null,\"place\":null,\"event\":null,\"comments\":null,\"picture\":null,\"likes\":null},\"canDelete\":null,\"canTag\":null,\"position\":null,\"event\":null,\"updatedTime\":1432723246000,\"createdTime\":1419422921000,\"tags\":[],\"comments\":{\"summary\":{\"totalCount\":0,\"order\":\"ranked\",\"canComment\":true},\"data\":[]},\"likes\":{\"summary\":{\"totalCount\":10,\"order\":null,\"canComment\":null},\"data\":[]},\"images\":[],\"nameTags\":[],\"place\":null,\"backdatedTime\":null,\"backdatedTimeGranularity\":null},{\"id\":\"390562494429441\",\"metadata\":null,\"type\":null,\"name\":null,\"from\":{\"id\":\"388715684614122\",\"metadata\":null,\"type\":null,\"name\":\"Snow Island Coffee\",\"category\":null},\"picture\":null,\"pageStoryId\":null,\"reactions\":null,\"source\":null,\"height\":null,\"width\":null,\"link\":\"https://www.facebook.com/SnowIslandCoffee/photos/a.388988311253526.1073741827.388715684614122/390562494429441/?type=3\",\"icon\":null,\"album\":{\"id\":\"388988311253526\",\"metadata\":null,\"type\":\"profile\",\"name\":null,\"from\":null,\"description\":null,\"location\":null,\"link\":null,\"count\":7,\"coverPhoto\":null,\"privacy\":null,\"canUpload\":null,\"createdTime\":null,\"updatedTime\":null,\"place\":null,\"event\":null,\"comments\":null,\"picture\":null,\"likes\":null},\"canDelete\":null,\"canTag\":null,\"position\":null,\"event\":null,\"updatedTime\":1417517808000,\"createdTime\":1417517808000,\"tags\":[],\"comments\":{\"summary\":{\"totalCount\":0,\"order\":\"ranked\",\"canComment\":true},\"data\":[]},\"likes\":{\"summary\":{\"totalCount\":8,\"order\":null,\"canComment\":null},\"data\":[]},\"images\":[],\"nameTags\":[],\"place\":null,\"backdatedTime\":null,\"backdatedTimeGranularity\":null},{\"id\":\"388988314586859\",\"metadata\":null,\"type\":null,\"name\":null,\"from\":{\"id\":\"388715684614122\",\"metadata\":null,\"type\":null,\"name\":\"Snow Island Coffee\",\"category\":null},\"picture\":null,\"pageStoryId\":null,\"reactions\":null,\"source\":null,\"height\":null,\"width\":null,\"link\":\"https://www.facebook.com/SnowIslandCoffee/photos/a.388988311253526.1073741827.388715684614122/388988314586859/?type=3\",\"icon\":null,\"album\":{\"id\":\"388988311253526\",\"metadata\":null,\"type\":\"profile\",\"name\":null,\"from\":null,\"description\":null,\"location\":null,\"link\":null,\"count\":7,\"coverPhoto\":null,\"privacy\":null,\"canUpload\":null,\"createdTime\":null,\"updatedTime\":null,\"place\":null,\"event\":null,\"comments\":null,\"picture\":null,\"likes\":null},\"canDelete\":null,\"canTag\":null,\"position\":null,\"event\":null,\"updatedTime\":1417242263000,\"createdTime\":1417242263000,\"tags\":[],\"comments\":{\"summary\":{\"totalCount\":0,\"order\":\"ranked\",\"canComment\":true},\"data\":[]},\"likes\":{\"summary\":{\"totalCount\":8,\"order\":null,\"canComment\":null},\"data\":[]},\"images\":[],\"nameTags\":[],\"place\":null,\"backdatedTime\":null,\"backdatedTimeGranularity\":null}],\"cursor\":{\"afterCursor\":\"Mzg4OTg4MzE0NTg2ODU5\",\"beforeCursor\":\"NjQ2MTgxNzk1NTM0MTc1\"},\"paging\":{\"next\":null,\"previous\":null}}\n"},"dateCreated":"2017-03-05T03:06:52+0000","dateStarted":"2017-03-06T15:44:55+0000","dateFinished":"2017-03-06T15:44:58+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:991"},{"title":"Get page photos","text":"\n// @RequestMapping(value = \"/user/{userId}/photoswithfields/{objectId}\", method = RequestMethod.GET)\n// public Paged<PhotoWithSummary> getOtherPhotosWithFields(@PathVariable(\"userId\") String userId,\n//                                                         @PathVariable(\"objectId\") String objectId,\n//                                                         @RequestParam(value = \"uploaded\", required = false, defaultValue = \"false\") boolean uplaoded,\n//                                                         @RequestParam(value = \"limit\", required = false, defaultValue = \"50\") int limit,\n//                                                         @RequestParam(value = \"fields\", required = false, defaultValue = \"\") String fields,\n//                                                         @RequestParam(value = \"afterCursor\", required = false, defaultValue = \"\") String after,\n//                                                         @RequestParam(value = \"beforeCursor\", required = false, defaultValue = \"\") String before) \n\nvar limit_photos_per_page = 25 // more than this will fail due to too much data being fetched\nvar max_retry = 5\n\nvar new_photo_field = \"album{type,count},backdated_time,created_time,from,link,name,name_tags,page_story_id,place{id},updated_time,tags.summary(true){created_time,tagging_user},comments.summary(true){like_count},likes.summary(true).limit(0)\"\nval encodedfields = java.net.URLEncoder.encode(new_photo_field,\"UTF-8\");\n\nsqlContext.sql(\"\"\"\nselect *\nfrom (select id,\n             row_number() over (order by md5(id)) as rownumb\n      from (select distinct id \n            from facebook_homework_pages\n           )\n     )\nwhere id <> '13856871189'\norder by rand()\n\"\"\").map(a => a.getAs[String](\"id\"))\n    // .collect\n    .repartition(8)\n    .foreach(fetched_page_id => {\n\n        var page_id = fetched_page_id\n        var max_pages = 5 //10 //50\n        var current_user_id = getRandomFacebookUserId()\n        var uploaded_options = List(\"true\", \"false\")\n        var retray_cnt = 0\n        \n        for (uploaded <- uploaded_options) {\n            var current_done_file = base_directory + \"/photos_status/\" + page_id + \"/\" + uploaded\n            var found_done_file = fileExistsInS3(\"zeppelindata\", current_done_file)\n            \n            var current_last_page_file = base_directory + \"/photos/\" + page_id + \"/\" + uploaded + \"/\" + max_pages\n            var found_last_page_file = fileExistsInS3(\"zeppelindata\", current_last_page_file)\n            \n            if (!found_done_file && !found_last_page_file) {\n        \n                //  DO NOT USE NEXT PAGE URL => ONLY USE planckfacebookclient.herokuapp.com CALLS WITH AFTER_CURSOR\n                var after_cursor = \"\"\n                \n                import scala.util.control.Breaks._\n                breakable { \n                    var page_number = 0\n                   \n                    while (page_number <= max_pages) {\n                        \n                    // }\n                    // for (page_number <- 0 to max_pages) {\n                        println(\"Working page \" + page_number + \" in page_id \" + page_id + \" uploaded=\" + uploaded)\n                    \n                        val objectMapper = new com.fasterxml.jackson.databind.ObjectMapper() with com.fasterxml.jackson.module.scala.experimental.ScalaObjectMapper;\n                        objectMapper.registerModule(com.fasterxml.jackson.module.scala.DefaultScalaModule)\n                        \n                        var url_to_get = \"https://user:GhNoFZ3CPPUsHQ2WGwCzFBj3m7tcYWf@planckfacebookclient.herokuapp.com/user/\" + current_user_id + \"/photoswithfields/\" + page_id + \n                                                                                                                                   \"?limit=\" + limit_photos_per_page +\n                                                                                                                                   \"&fields=\" + encodedfields +\n                                                                                                                                   \"&uploaded=\" + uploaded +\n                                                                                                                                   \"&afterCursor=\" + after_cursor\n                        var current_reply = \"\"\n                        try {\n                            println(url_to_get)\n            \n                            // var current_reply = getUrlAsString(url_to_get)\n                            current_reply = getUrlAsStringWithErrors(url_to_get)\n                            page_number += 1\n                            \n                            // Write content to s3\n                            writeContentToS3(current_reply, \"zeppelindata\", base_directory + \"/photos/\" + page_id + \"/\" + uploaded + \"/\" + page_number)\n                        \n                            // Get next page (or stop trying to fetch)\n                            var cursor_object_option = objectMapper.readValue[Map[String, Object]](current_reply).get(\"cursor\")\n                            if (cursor_object_option.isEmpty || cursor_object_option.get == null) {\n                                // println(\"should break at cursor\")\n                                writeContentToS3(\"DONE\", \"zeppelindata\", current_done_file)\n                                break\n    \n                            } else {\n                                var after_cursor_option = cursor_object_option.get.asInstanceOf[Map[String, Object]].get(\"afterCursor\")\n                                if (after_cursor_option.isEmpty || after_cursor_option.get == null) {\n                                    // println(\"should break at after_cursor_option\")\n                                    writeContentToS3(\"DONE\", \"zeppelindata\", current_done_file)\n                                    break\n    \n                                } else {\n                                    after_cursor = after_cursor_option.get.asInstanceOf[String]\n                                }\n                            }\n    \n                        } catch {\n                            case e: Exception => {\n                                println(\"Got for page_id: \" + page_id + \" exception: \" + e.getMessage)\n                                if (e.getMessage.contains(\"was migrated to page ID\")) {\n                                    var pattern = \"\"\".* was migrated to page ID (\\d+).*\"\"\".r\n                                    var pattern(new_page_id) = e.getMessage\n\n                                    println(\"Migraging \" + page_id + \" to \" + new_page_id)\n                                    writeContentToS3(\"Migraging \" + page_id + \" to \" + new_page_id, \"zeppelindata\", current_done_file + \"_migrated\")\n                                    writeContentToS3(\"DONE\", \"zeppelindata\", current_done_file)\n                                    page_number = 0\n                                    page_id = new_page_id\n                                    \n                                } else if (e.getMessage.matches(\".*cannot be loaded due to missing permissions, or does not support this operation. Please read the Graph API documentation.*\")) {\n                                    println(\"Ignoring \" + page_id)\n                                    writeContentToS3(e.getMessage, \"zeppelindata\", current_done_file + \"_error\")\n                                    writeContentToS3(\"DONE\", \"zeppelindata\", current_done_file)\n                                    break\n\n                                } else if (e.getMessage.contains(\"\"\"www.herokucdn.com/error-pages/application-error.html\"\"\")) {\n                                    println(\"Ignoring \" + page_id)\n                                    writeContentToS3(e.getMessage, \"zeppelindata\", current_done_file + \"_error\")\n                                    writeContentToS3(\"DONE\", \"zeppelindata\", current_done_file)\n                                    break\n\n                                } else if (e.getMessage.matches(\".*Please reduce the amount of data you're asking for, then retry your request.*\")) {\n                                    println(\"Ignoring \" + page_id)\n                                    writeContentToS3(e.getMessage, \"zeppelindata\", current_done_file + \"_error\")\n                                    writeContentToS3(\"DONE\", \"zeppelindata\", current_done_file)\n                                    break\n                                    \n                                } else if (e.getMessage.matches(\".*Service temporarily unavailable.*\")){\n                                    if (retray_cnt < max_retry){\n                                        retray_cnt += 1\n                                        println(\"Page ID \" + page_id + \" got Service temporarily unavailabl, retries to get the data\")\n                                    } else {\n                                        throw new Exception(\"Failed on page \" + page_id + \" (after \" +   max_retry + \" retries), with error \" + e.getMessage, e)\n                                    }\n                                } else {\n                                    throw new Exception(\"Failed on page \" + page_id + \" and error \" + e.getMessage, e)\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    })\n","user":"plancky","dateUpdated":"2017-03-07T14:15:57+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true,"editorHide":true,"lineNumbers":true,"tableHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485017063904_-1188656857","id":"20170121-164423_447121102","result":{"code":"ERROR","type":"TEXT","msg":"\nlimit_photos_per_page: Int = 25\n\nmax_retry: Int = 5\n\nnew_photo_field: String = album{type,count},backdated_time,created_time,from,link,name,name_tags,page_story_id,place{id},updated_time,tags.summary(true){created_time,tagging_user},comments.summary(true){like_count},likes.summary(true).limit(0)\n\nencodedfields: String = album%7Btype%2Ccount%7D%2Cbackdated_time%2Ccreated_time%2Cfrom%2Clink%2Cname%2Cname_tags%2Cpage_story_id%2Cplace%7Bid%7D%2Cupdated_time%2Ctags.summary%28true%29%7Bcreated_time%2Ctagging_user%7D%2Ccomments.summary%28true%29%7Blike_count%7D%2Clikes.summary%28true%29.limit%280%29\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\norg.apache.spark.SparkException: Job 134 cancelled part of cancelled job group zeppelin-20170121-164423_447121102\n  at org.apache.spark.scheduler.DAGScheduler.org$apache$spark$scheduler$DAGScheduler$$failJobAndIndependentStages(DAGScheduler.scala:1454)\n  at org.apache.spark.scheduler.DAGScheduler.handleJobCancellation(DAGScheduler.scala:1393)\n  at org.apache.spark.scheduler.DAGScheduler$$anonfun$handleJobGroupCancelled$1.apply$mcVI$sp(DAGScheduler.scala:795)\n  at org.apache.spark.scheduler.DAGScheduler$$anonfun$handleJobGroupCancelled$1.apply(DAGScheduler.scala:795)\n  at org.apache.spark.scheduler.DAGScheduler$$anonfun$handleJobGroupCancelled$1.apply(DAGScheduler.scala:795)\n  at scala.collection.mutable.HashSet.foreach(HashSet.scala:78)\n  at org.apache.spark.scheduler.DAGScheduler.handleJobGroupCancelled(DAGScheduler.scala:795)\n  at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.doOnReceive(DAGScheduler.scala:1642)\n  at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:1622)\n  at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:1611)\n  at org.apache.spark.util.EventLoop$$anon$1.run(EventLoop.scala:48)\n  at org.apache.spark.scheduler.DAGScheduler.runJob(DAGScheduler.scala:632)\n  at org.apache.spark.SparkContext.runJob(SparkContext.scala:1873)\n  at org.apache.spark.SparkContext.runJob(SparkContext.scala:1886)\n  at org.apache.spark.SparkContext.runJob(SparkContext.scala:1899)\n  at org.apache.spark.SparkContext.runJob(SparkContext.scala:1913)\n  at org.apache.spark.rdd.RDD$$anonfun$foreach$1.apply(RDD.scala:894)\n  at org.apache.spark.rdd.RDD$$anonfun$foreach$1.apply(RDD.scala:892)\n  at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:151)\n  at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:112)\n  at org.apache.spark.rdd.RDD.withScope(RDD.scala:358)\n  at org.apache.spark.rdd.RDD.foreach(RDD.scala:892)\n  at org.apache.spark.sql.Dataset$$anonfun$foreach$1.apply$mcV$sp(Dataset.scala:2108)\n  at org.apache.spark.sql.Dataset$$anonfun$foreach$1.apply(Dataset.scala:2108)\n  at org.apache.spark.sql.Dataset$$anonfun$foreach$1.apply(Dataset.scala:2108)\n  at org.apache.spark.sql.execution.SQLExecution$.withNewExecutionId(SQLExecution.scala:57)\n  at org.apache.spark.sql.Dataset.withNewExecutionId(Dataset.scala:2546)\n  at org.apache.spark.sql.Dataset.foreach(Dataset.scala:2107)\n  ... 62 elided\n"},"dateCreated":"2017-01-21T04:44:23+0000","dateStarted":"2017-03-07T11:00:09+0000","dateFinished":"2017-03-07T11:00:12+0000","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:992","focus":true},{"title":"Photos statistics","text":"var base_directory = \"staging/hw\"\nread_json_with_file_names(\"s3a://zeppelindata/\" + base_directory + \"/salame_facebook_homework_photos/*/*\", false, \"salame_facebook_homework_photos_with_files\", true, 16, 16)\nprintln()\n\nsqlContext.sql(\"\"\"\nwith photos_with_page_id as (select regexp_extract(file_name, '.*salame_facebook_homework_photos/(\\\\d+)/.*', 1) as page_id,\n                                    photo.*\n                             from salame_facebook_homework_photos_with_files\n                             lateral view explode (content.data) d as photo),\n     page_stats as (select page_id,\n                           count(*)                  as total_photos, \n                           count(distinct id)        as distinct_photos,\n                           count(distinct `from`.id) as distinct_from,\n                           avg(size(comments))       as avg_comments,\n                           sum(size(comments))       as sum_comments,\n                           avg(size(likes))          as avg_likes,\n                           sum(size(likes))          as sum_likes\n                      from photos_with_page_id\n                      group by page_id)\nselect *\nfrom page_stats\n\"\"\").show\n","user":"plancky","dateUpdated":"2017-03-07T14:22:22+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true,"editorHide":true,"tableHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485024083994_265989710","id":"20170121-184123_921939727","result":{"code":"SUCCESS","type":"TEXT","msg":"\nbase_directory: String = staging/hw\nres145: Any = [content: struct<cursor: struct<afterCursor: string, beforeCursor: string>, data: array<struct<album:struct<canUpload:string,comments:string,count:string,coverPhoto:string,createdTime:bigint,description:string,event:string,from:struct<category:string,id:string,metadata:string,name:string,type:string>,id:string,likes:string,link:string,location:string,metadata:string,name:string,picture:string,place:struct<categoryList:array<string>,id:string,location:struct<city:string,country:string,latitude:double,locatedIn:string,longitude:double,name:string,region:string,state:string,street:string,zip:string>,locationAsString:string,metadata:string,name:string,overallRating:string,type:string>,privacy:string,type:string,updatedTime:bigint>,backdatedTime:bigint,backdatedTimeGranularity:...\n+----------------+------------+---------------+-------------+------------------+------------+------------------+---------+\n|         page_id|total_photos|distinct_photos|distinct_from|      avg_comments|sum_comments|         avg_likes|sum_likes|\n+----------------+------------+---------------+-------------+------------------+------------+------------------+---------+\n|1390998467815508|         277|            277|            1| 0.927797833935018|         257| 7.364620938628159|     2040|\n|1410222549007313|         264|            231|            1|5.2272727272727275|        1380|10.780303030303031|     2846|\n|    168282878593|         280|            280|            1|0.7285714285714285|         204|3.5142857142857142|      984|\n| 459632330778523|         277|            276|            1|2.2274368231046933|         617| 9.566787003610107|     2650|\n| 195290567180525|         277|            277|            1|  1.44043321299639|         399| 23.62815884476534|     6545|\n|1451039891877167|         315|            276|            1| 5.380952380952381|        1695|24.006349206349206|     7562|\n+----------------+------------+---------------+-------------+------------------+------------+------------------+---------+\n\n"},"dateCreated":"2017-01-21T06:41:23+0000","dateStarted":"2017-01-25T01:15:21+0000","dateFinished":"2017-01-25T01:15:30+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3926"},{"title":"Read photo files","text":"// var base_directory = \"staging/hw\"\n// var files_list = listBucketContents(\"zeppelindata\", base_directory + \"/photos/\")\n// var jsons_with_file_name_df = read_json_with_file_names_from_list2(\"zeppelindata\", files_list, false)\n\n// jsons_with_file_name_df.write.mode(\"overwrite\").parquet(\"s3a://zeppelindata/staging/hw/photos_raw_parquet070317\")\n// sqlContext.read.parquet(\"s3a://zeppelindata/staging/hw/photos_raw_parquet070317\").createOrReplaceTempView(\"photos_raw_parquet\")\n\nsqlContext.sql(\"\"\"\nwith photos_with_page_id as (select regexp_extract(file_name, '.*photos/(\\\\d+)/.*', 1) as page_id,\n                                    photo.*\n                             from photos_raw_parquet\n                             lateral view explode (content.data) d as photo)\nselect *\nfrom photos_with_page_id\n\"\"\").repartition(1).write.mode(\"overwrite\").json(\"s3a://zeppelindata/staging/hw/photos_raw070317\")\nsqlContext.read.json(\"s3a://zeppelindata/staging/hw/photos_raw070317\").createOrReplaceTempView(\"photos_raw\")","user":"plancky","dateUpdated":"2017-03-07T14:21:51+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true,"editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1488705712441_-83216761","id":"20170305-092152_1381058840","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"2017-03-05T09:21:52+0000","dateStarted":"2017-03-07T12:16:11+0000","dateFinished":"2017-03-07T12:21:04+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:993","focus":true},{"title":"Basic photos Analysis","text":"%sql\n\nwith photo_comments as(\n    -- select  page_id,\n    --         id,\n    --         sum(c.likecount) as comments_total_likes,\n    --         count(distinct c.from.id) as distinct_comments_writers\n    -- from facebook_homework_photos\n    -- lateral view explode(comments) as c\n    select page_id, \n           id, \n           sum(comment.likeCount) as comments_total_likes\n    from photos_raw\n    lateral view explode(comments.data) as comment\n    group by page_id, id\n),\nphotos as( \n    select  f.page_id,\n            f.id, --as photo_id,\n            createdTime,\n            `from`.id as from_id,\n            (case when name is not null then 1 else 0 end)  as has_name,\n            (case when place is not null then 1 else 0 end) as has_place,\n            -- (case when event is not null then 1 else 0 end) as has_event,\n            -- event,\n            album,\n            -- size(likes) as like_count,\n            likes.summary.totalCount as like_count,\n            -- size(comments) as comments_count,\n            comments.summary.totalCount as comments_count,\n            size(tags) as tags_count,\n            c.comments_total_likes\n            -- c.distinct_comments_writers\n    from photos_raw f\n    join photo_comments c\n    on f.page_id = c.page_id and\n       f.id = c.id\n)\n\nselect    page_id, \n          count(distinct id)                                                                                                as total_photos,\n          count(distinct from_id)                                                                                           as photo_distinct_uploaders, \n          from_unixtime(min(createdTime/1000))                                                                              as photo_first_photo_time,\n          from_unixtime(max(createdTime/1000))                                                                              as photo_last_photo_time,\n          count(distinct from_unixtime(createdTime/1000, 'yyyy-MM'))                                                        as photo_number_of_different_months_for_photos,\n          datediff(from_unixtime(max(createdTime/1000)), from_unixtime(min(createdTime/1000)))                              as photo_number_of_days_between_first_and_last_photos,\n          sum(has_name)                                                                                                     as photo_count_has_name,\n          sum(has_place)                                                                                                    as photo_count_has_place,\n        --   sum(has_event)                                                                                                    as photo_count_has_event,\n        --   count(distinct event)                                                                                             as photo_count_events_in_photos,\n          max(like_count)                                                                                                   as photo_max_like,\n          min(like_count)                                                                                                   as photo_min_like,\n          avg(like_count)                                                                                                   as photo_avg_likes_per_photo,\n          sum(like_count)                                                                                                   as photo_sum_like_count,\n          avg(tags_count)                                                                                                   as photo_avg_people_tagged_per_photo,\n          avg(case when tags_count > 0 then tags_count else null end)                                                       as photo_avg_people_tagged_per_photo_with_more_than_zero,\n          max(tags_count)                                                                                                   as photo_max_people_tagged,\n          sum(tags_count)                                                                                                   as photo_sum_people_tagged_count,\n          avg(comments_count)                                                                                               as photo_avg_comments_per_photo,\n          sum(comments_count)                                                                                               as photo_sum_comments_count,\n          avg(comments_total_likes)                                                                                         as photo_avg_likes_per_comments,\n          --avg(distinct_comments_writers)                                                                                    as photo_avg_distinct_comments_writers,\n          count(distinct album.id)                                                                                                           as photo_number_of_albums,\n          count(distinct case when album.`type` = 'cover'   then album.id else null end)                                                     as photo_number_of_cover_albums,\n          count(distinct case when album.`type` = 'profile' then album.id else null end)                                                     as photo_number_of_profile_albums,\n          count(distinct case when album.`type` is not null and album.`type` <> 'cover' \n                            and album.`type` <> 'profile' then album.id else null end)                                                       as photo_number_of_other_albums,\n          count(distinct case when album.`type` is null     then album.id else null end)                                                     as photo_number_of_null_albums,\n          count(distinct case when album.`type` = 'cover'   then id else null end)                                                           as photo_number_of_photos_in_cover_albums,\n          count(distinct case when album.`type` = 'profile' then id else null end)                                                           as photo_number_of_photos_in_profile_albums,\n          count(distinct case when album.`type` is not null and album.`type` <> 'cover' and album.`type` <> 'profile' then id else null end) as photo_number_of_photos_in_other_albums,\n          count(distinct case when album.`type` is null     then id else null end)                                                           as photo_number_of_photos_in_null_albums\nfrom photos\ngroup by page_id\nlimit 10\n","user":"plancky","dateUpdated":"2017-03-07T14:16:34+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[{"name":"page_id","index":0,"aggr":"sum"}],"values":[{"name":"total_photos","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"page_id","index":0,"aggr":"sum"}}},"enabled":true,"editorMode":"ace/mode/sql","lineNumbers":true,"title":true,"editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1488462734254_-1815325023","id":"20170302-135214_1583919250","result":{"code":"SUCCESS","type":"TABLE","msg":"page_id\ttotal_photos\tphoto_distinct_uploaders\tphoto_first_photo_time\tphoto_last_photo_time\tphoto_number_of_different_months_for_photos\tphoto_number_of_days_between_first_and_last_photos\tphoto_count_has_name\tphoto_count_has_place\tphoto_max_like\tphoto_min_like\tphoto_avg_likes_per_photo\tphoto_sum_like_count\tphoto_avg_people_tagged_per_photo\tphoto_avg_people_tagged_per_photo_with_more_than_zero\tphoto_max_people_tagged\tphoto_sum_people_tagged_count\tphoto_avg_comments_per_photo\tphoto_sum_comments_count\tphoto_avg_likes_per_comments\tphoto_number_of_albums\tphoto_number_of_cover_albums\tphoto_number_of_profile_albums\tphoto_number_of_other_albums\tphoto_number_of_null_albums\tphoto_number_of_photos_in_cover_albums\tphoto_number_of_photos_in_profile_albums\tphoto_number_of_photos_in_other_albums\tphoto_number_of_photos_in_null_albums\n573261482778954\t54\t1\t2015-10-15 10:35:19\t2017-03-06 13:04:10\t9\t508\t53\t0\t21430\t2\t1540.0185185185185\t83161\t0.0\tnull\t0\t0\t12.703703703703704\t686\t4.462962962962963\t2\t0\t1\t1\t0\t0\t1\t53\t0\n88388366982\t112\t1\t2010-01-22 17:44:19\t2017-03-05 08:03:55\t10\t2599\t103\t0\t8971\t12\t314.5892857142857\t35234\t0.0\tnull\t0\t0\t11.241071428571429\t1259\t20.267857142857142\t3\t1\t1\t1\t0\t29\t8\t75\t0\n996233940428345\t120\t1\t2016-01-22 06:18:22\t2017-03-05 07:00:00\t13\t408\t115\t1\t1464\t3\t53.95867768595041\t6529\t0.0\tnull\t0\t0\t11.413223140495868\t1381\t5.975206611570248\t4\t1\t1\t2\t0\t3\t2\t115\t0\n999573303447632\t151\t1\t2016-11-23 11:09:10\t2017-03-06 07:49:01\t4\t103\t126\t0\t3376\t3\t999.2384105960265\t150885\t0.0\tnull\t0\t0\t784.1125827814569\t118401\t4.112582781456954\t2\t0\t1\t1\t0\t0\t1\t150\t0\n168282878593\t48\t1\t2009-10-27 15:36:15\t2017-02-28 16:45:07\t19\t2681\t38\t0\t49\t0\t6.458333333333333\t310\t0.0\tnull\t0\t0\t2.6666666666666665\t128\t1.8333333333333333\t3\t1\t1\t1\t0\t15\t4\t29\t0\n100729723318554\t54\t1\t2010-07-27 09:44:20\t2017-02-13 15:19:54\t15\t2393\t33\t0\t2844\t2\t255.90740740740742\t13819\t0.0\tnull\t0\t0\t18.5\t999\t9.333333333333334\t4\t1\t1\t2\t0\t3\t9\t42\t0\n261738857516331\t17\t1\t2016-07-14 03:11:11\t2017-03-05 17:00:31\t7\t234\t10\t0\t111\t0\t36.11764705882353\t614\t0.0\tnull\t0\t0\t3.235294117647059\t55\t1.411764705882353\t3\t1\t0\t2\t0\t2\t0\t15\t0\n283585422954\t54\t1\t2012-01-05 18:59:44\t2017-02-23 19:01:38\t13\t1876\t37\t3\t3389\t1\t302.5740740740741\t16339\t0.16666666666666666\t1.8\t3\t9\t12.25925925925926\t662\t4.037037037037037\t4\t0\t1\t3\t0\t0\t12\t42\t0\n1729953540613315\t61\t1\t2016-07-20 16:18:54\t2017-03-06 07:55:26\t7\t229\t50\t0\t400\t6\t77.40322580645162\t4799\t0.0\tnull\t0\t0\t3.3225806451612905\t206\t0.25806451612903225\t4\t1\t1\t2\t0\t1\t9\t51\t0\n1771627236441961\t30\t1\t2016-08-31 10:25:15\t2017-02-27 03:24:31\t6\t180\t20\t6\t4020\t2\t325.06451612903226\t10077\t0.0\tnull\t0\t0\t10.548387096774194\t327\t5.451612903225806\t4\t1\t1\t2\t0\t2\t1\t27\t0\n","comment":"","msgTable":[[{"key":"total_photos","value":"573261482778954"},{"key":"total_photos","value":"54"},{"key":"total_photos","value":"1"},{"key":"total_photos","value":"2015-10-15 10:35:19"},{"key":"total_photos","value":"2017-03-06 13:04:10"},{"key":"total_photos","value":"9"},{"key":"total_photos","value":"508"},{"key":"total_photos","value":"53"},{"key":"total_photos","value":"0"},{"key":"total_photos","value":"21430"},{"key":"total_photos","value":"2"},{"key":"total_photos","value":"1540.0185185185185"},{"key":"total_photos","value":"83161"},{"key":"total_photos","value":"0.0"},{"key":"total_photos","value":"null"},{"key":"total_photos","value":"0"},{"key":"total_photos","value":"0"},{"key":"total_photos","value":"12.703703703703704"},{"key":"total_photos","value":"686"},{"key":"total_photos","value":"4.462962962962963"},{"key":"total_photos","value":"2"},{"key":"total_photos","value":"0"},{"key":"total_photos","value":"1"},{"key":"total_photos","value":"1"},{"key":"total_photos","value":"0"},{"key":"total_photos","value":"0"},{"key":"total_photos","value":"1"},{"key":"total_photos","value":"53"},{"key":"total_photos","value":"0"}],[{"key":"photo_distinct_uploaders","value":"88388366982"},{"key":"photo_distinct_uploaders","value":"112"},{"key":"photo_distinct_uploaders","value":"1"},{"key":"photo_distinct_uploaders","value":"2010-01-22 17:44:19"},{"key":"photo_distinct_uploaders","value":"2017-03-05 08:03:55"},{"key":"photo_distinct_uploaders","value":"10"},{"key":"photo_distinct_uploaders","value":"2599"},{"key":"photo_distinct_uploaders","value":"103"},{"key":"photo_distinct_uploaders","value":"0"},{"key":"photo_distinct_uploaders","value":"8971"},{"key":"photo_distinct_uploaders","value":"12"},{"key":"photo_distinct_uploaders","value":"314.5892857142857"},{"key":"photo_distinct_uploaders","value":"35234"},{"key":"photo_distinct_uploaders","value":"0.0"},{"key":"photo_distinct_uploaders","value":"null"},{"key":"photo_distinct_uploaders","value":"0"},{"key":"photo_distinct_uploaders","value":"0"},{"key":"photo_distinct_uploaders","value":"11.241071428571429"},{"key":"photo_distinct_uploaders","value":"1259"},{"key":"photo_distinct_uploaders","value":"20.267857142857142"},{"key":"photo_distinct_uploaders","value":"3"},{"key":"photo_distinct_uploaders","value":"1"},{"key":"photo_distinct_uploaders","value":"1"},{"key":"photo_distinct_uploaders","value":"1"},{"key":"photo_distinct_uploaders","value":"0"},{"key":"photo_distinct_uploaders","value":"29"},{"key":"photo_distinct_uploaders","value":"8"},{"key":"photo_distinct_uploaders","value":"75"},{"key":"photo_distinct_uploaders","value":"0"}],[{"key":"photo_first_photo_time","value":"996233940428345"},{"key":"photo_first_photo_time","value":"120"},{"key":"photo_first_photo_time","value":"1"},{"key":"photo_first_photo_time","value":"2016-01-22 06:18:22"},{"key":"photo_first_photo_time","value":"2017-03-05 07:00:00"},{"key":"photo_first_photo_time","value":"13"},{"key":"photo_first_photo_time","value":"408"},{"key":"photo_first_photo_time","value":"115"},{"key":"photo_first_photo_time","value":"1"},{"key":"photo_first_photo_time","value":"1464"},{"key":"photo_first_photo_time","value":"3"},{"key":"photo_first_photo_time","value":"53.95867768595041"},{"key":"photo_first_photo_time","value":"6529"},{"key":"photo_first_photo_time","value":"0.0"},{"key":"photo_first_photo_time","value":"null"},{"key":"photo_first_photo_time","value":"0"},{"key":"photo_first_photo_time","value":"0"},{"key":"photo_first_photo_time","value":"11.413223140495868"},{"key":"photo_first_photo_time","value":"1381"},{"key":"photo_first_photo_time","value":"5.975206611570248"},{"key":"photo_first_photo_time","value":"4"},{"key":"photo_first_photo_time","value":"1"},{"key":"photo_first_photo_time","value":"1"},{"key":"photo_first_photo_time","value":"2"},{"key":"photo_first_photo_time","value":"0"},{"key":"photo_first_photo_time","value":"3"},{"key":"photo_first_photo_time","value":"2"},{"key":"photo_first_photo_time","value":"115"},{"key":"photo_first_photo_time","value":"0"}],[{"key":"photo_last_photo_time","value":"999573303447632"},{"key":"photo_last_photo_time","value":"151"},{"key":"photo_last_photo_time","value":"1"},{"key":"photo_last_photo_time","value":"2016-11-23 11:09:10"},{"key":"photo_last_photo_time","value":"2017-03-06 07:49:01"},{"key":"photo_last_photo_time","value":"4"},{"key":"photo_last_photo_time","value":"103"},{"key":"photo_last_photo_time","value":"126"},{"key":"photo_last_photo_time","value":"0"},{"key":"photo_last_photo_time","value":"3376"},{"key":"photo_last_photo_time","value":"3"},{"key":"photo_last_photo_time","value":"999.2384105960265"},{"key":"photo_last_photo_time","value":"150885"},{"key":"photo_last_photo_time","value":"0.0"},{"key":"photo_last_photo_time","value":"null"},{"key":"photo_last_photo_time","value":"0"},{"key":"photo_last_photo_time","value":"0"},{"key":"photo_last_photo_time","value":"784.1125827814569"},{"key":"photo_last_photo_time","value":"118401"},{"key":"photo_last_photo_time","value":"4.112582781456954"},{"key":"photo_last_photo_time","value":"2"},{"key":"photo_last_photo_time","value":"0"},{"key":"photo_last_photo_time","value":"1"},{"key":"photo_last_photo_time","value":"1"},{"key":"photo_last_photo_time","value":"0"},{"key":"photo_last_photo_time","value":"0"},{"key":"photo_last_photo_time","value":"1"},{"key":"photo_last_photo_time","value":"150"},{"key":"photo_last_photo_time","value":"0"}],[{"key":"photo_number_of_different_months_for_photos","value":"168282878593"},{"key":"photo_number_of_different_months_for_photos","value":"48"},{"key":"photo_number_of_different_months_for_photos","value":"1"},{"key":"photo_number_of_different_months_for_photos","value":"2009-10-27 15:36:15"},{"key":"photo_number_of_different_months_for_photos","value":"2017-02-28 16:45:07"},{"key":"photo_number_of_different_months_for_photos","value":"19"},{"key":"photo_number_of_different_months_for_photos","value":"2681"},{"key":"photo_number_of_different_months_for_photos","value":"38"},{"key":"photo_number_of_different_months_for_photos","value":"0"},{"key":"photo_number_of_different_months_for_photos","value":"49"},{"key":"photo_number_of_different_months_for_photos","value":"0"},{"key":"photo_number_of_different_months_for_photos","value":"6.458333333333333"},{"key":"photo_number_of_different_months_for_photos","value":"310"},{"key":"photo_number_of_different_months_for_photos","value":"0.0"},{"key":"photo_number_of_different_months_for_photos","value":"null"},{"key":"photo_number_of_different_months_for_photos","value":"0"},{"key":"photo_number_of_different_months_for_photos","value":"0"},{"key":"photo_number_of_different_months_for_photos","value":"2.6666666666666665"},{"key":"photo_number_of_different_months_for_photos","value":"128"},{"key":"photo_number_of_different_months_for_photos","value":"1.8333333333333333"},{"key":"photo_number_of_different_months_for_photos","value":"3"},{"key":"photo_number_of_different_months_for_photos","value":"1"},{"key":"photo_number_of_different_months_for_photos","value":"1"},{"key":"photo_number_of_different_months_for_photos","value":"1"},{"key":"photo_number_of_different_months_for_photos","value":"0"},{"key":"photo_number_of_different_months_for_photos","value":"15"},{"key":"photo_number_of_different_months_for_photos","value":"4"},{"key":"photo_number_of_different_months_for_photos","value":"29"},{"key":"photo_number_of_different_months_for_photos","value":"0"}],[{"key":"photo_number_of_days_between_first_and_last_photos","value":"100729723318554"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"54"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"1"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"2010-07-27 09:44:20"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"2017-02-13 15:19:54"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"15"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"2393"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"33"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"0"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"2844"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"2"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"255.90740740740742"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"13819"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"0.0"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"null"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"0"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"0"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"18.5"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"999"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"9.333333333333334"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"4"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"1"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"1"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"2"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"0"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"3"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"9"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"42"},{"key":"photo_number_of_days_between_first_and_last_photos","value":"0"}],[{"key":"photo_count_has_name","value":"261738857516331"},{"key":"photo_count_has_name","value":"17"},{"key":"photo_count_has_name","value":"1"},{"key":"photo_count_has_name","value":"2016-07-14 03:11:11"},{"key":"photo_count_has_name","value":"2017-03-05 17:00:31"},{"key":"photo_count_has_name","value":"7"},{"key":"photo_count_has_name","value":"234"},{"key":"photo_count_has_name","value":"10"},{"key":"photo_count_has_name","value":"0"},{"key":"photo_count_has_name","value":"111"},{"key":"photo_count_has_name","value":"0"},{"key":"photo_count_has_name","value":"36.11764705882353"},{"key":"photo_count_has_name","value":"614"},{"key":"photo_count_has_name","value":"0.0"},{"key":"photo_count_has_name","value":"null"},{"key":"photo_count_has_name","value":"0"},{"key":"photo_count_has_name","value":"0"},{"key":"photo_count_has_name","value":"3.235294117647059"},{"key":"photo_count_has_name","value":"55"},{"key":"photo_count_has_name","value":"1.411764705882353"},{"key":"photo_count_has_name","value":"3"},{"key":"photo_count_has_name","value":"1"},{"key":"photo_count_has_name","value":"0"},{"key":"photo_count_has_name","value":"2"},{"key":"photo_count_has_name","value":"0"},{"key":"photo_count_has_name","value":"2"},{"key":"photo_count_has_name","value":"0"},{"key":"photo_count_has_name","value":"15"},{"key":"photo_count_has_name","value":"0"}],[{"key":"photo_count_has_place","value":"283585422954"},{"key":"photo_count_has_place","value":"54"},{"key":"photo_count_has_place","value":"1"},{"key":"photo_count_has_place","value":"2012-01-05 18:59:44"},{"key":"photo_count_has_place","value":"2017-02-23 19:01:38"},{"key":"photo_count_has_place","value":"13"},{"key":"photo_count_has_place","value":"1876"},{"key":"photo_count_has_place","value":"37"},{"key":"photo_count_has_place","value":"3"},{"key":"photo_count_has_place","value":"3389"},{"key":"photo_count_has_place","value":"1"},{"key":"photo_count_has_place","value":"302.5740740740741"},{"key":"photo_count_has_place","value":"16339"},{"key":"photo_count_has_place","value":"0.16666666666666666"},{"key":"photo_count_has_place","value":"1.8"},{"key":"photo_count_has_place","value":"3"},{"key":"photo_count_has_place","value":"9"},{"key":"photo_count_has_place","value":"12.25925925925926"},{"key":"photo_count_has_place","value":"662"},{"key":"photo_count_has_place","value":"4.037037037037037"},{"key":"photo_count_has_place","value":"4"},{"key":"photo_count_has_place","value":"0"},{"key":"photo_count_has_place","value":"1"},{"key":"photo_count_has_place","value":"3"},{"key":"photo_count_has_place","value":"0"},{"key":"photo_count_has_place","value":"0"},{"key":"photo_count_has_place","value":"12"},{"key":"photo_count_has_place","value":"42"},{"key":"photo_count_has_place","value":"0"}],[{"key":"photo_max_like","value":"1729953540613315"},{"key":"photo_max_like","value":"61"},{"key":"photo_max_like","value":"1"},{"key":"photo_max_like","value":"2016-07-20 16:18:54"},{"key":"photo_max_like","value":"2017-03-06 07:55:26"},{"key":"photo_max_like","value":"7"},{"key":"photo_max_like","value":"229"},{"key":"photo_max_like","value":"50"},{"key":"photo_max_like","value":"0"},{"key":"photo_max_like","value":"400"},{"key":"photo_max_like","value":"6"},{"key":"photo_max_like","value":"77.40322580645162"},{"key":"photo_max_like","value":"4799"},{"key":"photo_max_like","value":"0.0"},{"key":"photo_max_like","value":"null"},{"key":"photo_max_like","value":"0"},{"key":"photo_max_like","value":"0"},{"key":"photo_max_like","value":"3.3225806451612905"},{"key":"photo_max_like","value":"206"},{"key":"photo_max_like","value":"0.25806451612903225"},{"key":"photo_max_like","value":"4"},{"key":"photo_max_like","value":"1"},{"key":"photo_max_like","value":"1"},{"key":"photo_max_like","value":"2"},{"key":"photo_max_like","value":"0"},{"key":"photo_max_like","value":"1"},{"key":"photo_max_like","value":"9"},{"key":"photo_max_like","value":"51"},{"key":"photo_max_like","value":"0"}],[{"key":"photo_min_like","value":"1771627236441961"},{"key":"photo_min_like","value":"30"},{"key":"photo_min_like","value":"1"},{"key":"photo_min_like","value":"2016-08-31 10:25:15"},{"key":"photo_min_like","value":"2017-02-27 03:24:31"},{"key":"photo_min_like","value":"6"},{"key":"photo_min_like","value":"180"},{"key":"photo_min_like","value":"20"},{"key":"photo_min_like","value":"6"},{"key":"photo_min_like","value":"4020"},{"key":"photo_min_like","value":"2"},{"key":"photo_min_like","value":"325.06451612903226"},{"key":"photo_min_like","value":"10077"},{"key":"photo_min_like","value":"0.0"},{"key":"photo_min_like","value":"null"},{"key":"photo_min_like","value":"0"},{"key":"photo_min_like","value":"0"},{"key":"photo_min_like","value":"10.548387096774194"},{"key":"photo_min_like","value":"327"},{"key":"photo_min_like","value":"5.451612903225806"},{"key":"photo_min_like","value":"4"},{"key":"photo_min_like","value":"1"},{"key":"photo_min_like","value":"1"},{"key":"photo_min_like","value":"2"},{"key":"photo_min_like","value":"0"},{"key":"photo_min_like","value":"2"},{"key":"photo_min_like","value":"1"},{"key":"photo_min_like","value":"27"},{"key":"photo_min_like","value":"0"}]],"columnNames":[{"name":"page_id","index":0,"aggr":"sum"},{"name":"total_photos","index":1,"aggr":"sum"},{"name":"photo_distinct_uploaders","index":2,"aggr":"sum"},{"name":"photo_first_photo_time","index":3,"aggr":"sum"},{"name":"photo_last_photo_time","index":4,"aggr":"sum"},{"name":"photo_number_of_different_months_for_photos","index":5,"aggr":"sum"},{"name":"photo_number_of_days_between_first_and_last_photos","index":6,"aggr":"sum"},{"name":"photo_count_has_name","index":7,"aggr":"sum"},{"name":"photo_count_has_place","index":8,"aggr":"sum"},{"name":"photo_max_like","index":9,"aggr":"sum"},{"name":"photo_min_like","index":10,"aggr":"sum"},{"name":"photo_avg_likes_per_photo","index":11,"aggr":"sum"},{"name":"photo_sum_like_count","index":12,"aggr":"sum"},{"name":"photo_avg_people_tagged_per_photo","index":13,"aggr":"sum"},{"name":"photo_avg_people_tagged_per_photo_with_more_than_zero","index":14,"aggr":"sum"},{"name":"photo_max_people_tagged","index":15,"aggr":"sum"},{"name":"photo_sum_people_tagged_count","index":16,"aggr":"sum"},{"name":"photo_avg_comments_per_photo","index":17,"aggr":"sum"},{"name":"photo_sum_comments_count","index":18,"aggr":"sum"},{"name":"photo_avg_likes_per_comments","index":19,"aggr":"sum"},{"name":"photo_number_of_albums","index":20,"aggr":"sum"},{"name":"photo_number_of_cover_albums","index":21,"aggr":"sum"},{"name":"photo_number_of_profile_albums","index":22,"aggr":"sum"},{"name":"photo_number_of_other_albums","index":23,"aggr":"sum"},{"name":"photo_number_of_null_albums","index":24,"aggr":"sum"},{"name":"photo_number_of_photos_in_cover_albums","index":25,"aggr":"sum"},{"name":"photo_number_of_photos_in_profile_albums","index":26,"aggr":"sum"},{"name":"photo_number_of_photos_in_other_albums","index":27,"aggr":"sum"},{"name":"photo_number_of_photos_in_null_albums","index":28,"aggr":"sum"}],"rows":[["573261482778954","54","1","2015-10-15 10:35:19","2017-03-06 13:04:10","9","508","53","0","21430","2","1540.0185185185185","83161","0.0","null","0","0","12.703703703703704","686","4.462962962962963","2","0","1","1","0","0","1","53","0"],["88388366982","112","1","2010-01-22 17:44:19","2017-03-05 08:03:55","10","2599","103","0","8971","12","314.5892857142857","35234","0.0","null","0","0","11.241071428571429","1259","20.267857142857142","3","1","1","1","0","29","8","75","0"],["996233940428345","120","1","2016-01-22 06:18:22","2017-03-05 07:00:00","13","408","115","1","1464","3","53.95867768595041","6529","0.0","null","0","0","11.413223140495868","1381","5.975206611570248","4","1","1","2","0","3","2","115","0"],["999573303447632","151","1","2016-11-23 11:09:10","2017-03-06 07:49:01","4","103","126","0","3376","3","999.2384105960265","150885","0.0","null","0","0","784.1125827814569","118401","4.112582781456954","2","0","1","1","0","0","1","150","0"],["168282878593","48","1","2009-10-27 15:36:15","2017-02-28 16:45:07","19","2681","38","0","49","0","6.458333333333333","310","0.0","null","0","0","2.6666666666666665","128","1.8333333333333333","3","1","1","1","0","15","4","29","0"],["100729723318554","54","1","2010-07-27 09:44:20","2017-02-13 15:19:54","15","2393","33","0","2844","2","255.90740740740742","13819","0.0","null","0","0","18.5","999","9.333333333333334","4","1","1","2","0","3","9","42","0"],["261738857516331","17","1","2016-07-14 03:11:11","2017-03-05 17:00:31","7","234","10","0","111","0","36.11764705882353","614","0.0","null","0","0","3.235294117647059","55","1.411764705882353","3","1","0","2","0","2","0","15","0"],["283585422954","54","1","2012-01-05 18:59:44","2017-02-23 19:01:38","13","1876","37","3","3389","1","302.5740740740741","16339","0.16666666666666666","1.8","3","9","12.25925925925926","662","4.037037037037037","4","0","1","3","0","0","12","42","0"],["1729953540613315","61","1","2016-07-20 16:18:54","2017-03-06 07:55:26","7","229","50","0","400","6","77.40322580645162","4799","0.0","null","0","0","3.3225806451612905","206","0.25806451612903225","4","1","1","2","0","1","9","51","0"],["1771627236441961","30","1","2016-08-31 10:25:15","2017-02-27 03:24:31","6","180","20","6","4020","2","325.06451612903226","10077","0.0","null","0","0","10.548387096774194","327","5.451612903225806","4","1","1","2","0","2","1","27","0"]]},"dateCreated":"2017-03-02T01:52:14+0000","dateStarted":"2017-03-07T12:23:16+0000","dateFinished":"2017-03-07T12:24:04+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:995","focus":true},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true,"editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1488889816304_-276120056","id":"20170307-123016_1492231301","dateCreated":"2017-03-07T12:30:16+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3077","text":"sqlContext.sql(\"\"\"\nwith photo_comments as(\n    -- select  page_id,\n    --         id,\n    --         sum(c.likecount) as comments_total_likes,\n    --         count(distinct c.from.id) as distinct_comments_writers\n    -- from facebook_homework_photos\n    -- lateral view explode(comments) as c\n    select page_id, \n           id, \n           sum(comment.likeCount) as comments_total_likes\n    from photos_raw\n    lateral view explode(comments.data) as comment\n    group by page_id, id\n),\nphotos as( \n    select  f.page_id,\n            f.id, --as photo_id,\n            createdTime,\n            `from`.id as from_id,\n            (case when name is not null then 1 else 0 end)  as has_name,\n            (case when place is not null then 1 else 0 end) as has_place,\n            -- (case when event is not null then 1 else 0 end) as has_event,\n            -- event,\n            album,\n            -- size(likes) as like_count,\n            likes.summary.totalCount as like_count,\n            -- size(comments) as comments_count,\n            comments.summary.totalCount as comments_count,\n            size(tags) as tags_count,\n            c.comments_total_likes\n            -- c.distinct_comments_writers\n    from photos_raw f\n    join photo_comments c\n    on f.page_id = c.page_id and\n       f.id = c.id\n)\n\nselect    page_id, \n          count(distinct id)                                                                                                as total_photos,\n          count(distinct from_id)                                                                                           as photo_distinct_uploaders, \n          from_unixtime(min(createdTime/1000))                                                                              as photo_first_photo_time,\n          from_unixtime(max(createdTime/1000))                                                                              as photo_last_photo_time,\n          count(distinct from_unixtime(createdTime/1000, 'yyyy-MM'))                                                        as photo_number_of_different_months_for_photos,\n          datediff(from_unixtime(max(createdTime/1000)), from_unixtime(min(createdTime/1000)))                              as photo_number_of_days_between_first_and_last_photos,\n          sum(has_name)                                                                                                     as photo_count_has_name,\n          sum(has_place)                                                                                                    as photo_count_has_place,\n        --   sum(has_event)                                                                                                    as photo_count_has_event,\n        --   count(distinct event)                                                                                             as photo_count_events_in_photos,\n          max(like_count)                                                                                                   as photo_max_like,\n          min(like_count)                                                                                                   as photo_min_like,\n          avg(like_count)                                                                                                   as photo_avg_likes_per_photo,\n          sum(like_count)                                                                                                   as photo_sum_like_count,\n          avg(tags_count)                                                                                                   as photo_avg_people_tagged_per_photo,\n          avg(case when tags_count > 0 then tags_count else null end)                                                       as photo_avg_people_tagged_per_photo_with_more_than_zero,\n          max(tags_count)                                                                                                   as photo_max_people_tagged,\n          sum(tags_count)                                                                                                   as photo_sum_people_tagged_count,\n          avg(comments_count)                                                                                               as photo_avg_comments_per_photo,\n          sum(comments_count)                                                                                               as photo_sum_comments_count,\n          avg(comments_total_likes)                                                                                         as photo_avg_likes_per_comments,\n          --avg(distinct_comments_writers)                                                                                    as photo_avg_distinct_comments_writers,\n          count(distinct album.id)                                                                                                           as photo_number_of_albums,\n          count(distinct case when album.`type` = 'cover'   then album.id else null end)                                                     as photo_number_of_cover_albums,\n          count(distinct case when album.`type` = 'profile' then album.id else null end)                                                     as photo_number_of_profile_albums,\n          count(distinct case when album.`type` is not null and album.`type` <> 'cover' \n                            and album.`type` <> 'profile' then album.id else null end)                                                       as photo_number_of_other_albums,\n          count(distinct case when album.`type` is null     then album.id else null end)                                                     as photo_number_of_null_albums,\n          count(distinct case when album.`type` = 'cover'   then id else null end)                                                           as photo_number_of_photos_in_cover_albums,\n          count(distinct case when album.`type` = 'profile' then id else null end)                                                           as photo_number_of_photos_in_profile_albums,\n          count(distinct case when album.`type` is not null and album.`type` <> 'cover' and album.`type` <> 'profile' then id else null end) as photo_number_of_photos_in_other_albums,\n          count(distinct case when album.`type` is null     then id else null end)                                                           as photo_number_of_photos_in_null_albums\nfrom photos\ngroup by page_id\n\"\"\").repartition(1).write.mode(\"overwrite\").json(\"s3a://zeppelindata/staging/hw/photos070317\")\nsqlContext.read.json(\"s3a://zeppelindata/staging/hw/photos070317\").createOrReplaceTempView(\"facebook_homework_photos_analysis\")","user":"plancky","dateUpdated":"2017-03-07T14:30:15+0000","dateFinished":"2017-03-07T12:32:15+0000","dateStarted":"2017-03-07T12:31:19+0000","title":"Create photos analysis table","result":{"code":"SUCCESS","type":"TEXT","msg":""}},{"title":"Create photos analysis table (old)","text":"sqlContext.sql(\"\"\"\nwith facebook_homework_photos as (select regexp_extract(file_name, '.*salame_facebook_homework_photos/(\\\\d+)/.*', 1) as page_id,\n                                     photo.*\n                              from salame_facebook_homework_photos_with_files\n                              lateral view explode (content.data) d as photo),\nphoto_comments as(\n    select  page_id,\n            id,\n            sum(c.likecount) as comments_total_likes,\n            count(distinct c.from.id) as distinct_comments_writers\n    from facebook_homework_photos\n    lateral view explode(comments) as c\n    group by page_id, id\n),\nphotos as( \n    select  f.page_id,\n            f.id, --as photo_id,\n            createdTime,\n            `from`.id as from_id,\n            (case when name is not null then 1 else 0 end)  as has_name,\n            (case when place is not null then 1 else 0 end) as has_place,\n            -- (case when event is not null then 1 else 0 end) as has_event,\n            -- event,\n            album,\n            size(likes) as like_count,\n            size(comments) as comments_count,\n            size(tags) as tags_count,\n            c.comments_total_likes,\n            c.distinct_comments_writers\n    from facebook_homework_photos f\n    join photo_comments c\n    on f.page_id = c.page_id and\n       f.id = c.id\n)\n\nselect    page_id, \n          count(distinct id)                                                                                                                       as total_photos,\n          count(distinct from_id)                                                                                                                  as distinct_uploaders, \n          from_unixtime(min(createdTime/1000))                                                                                                     as first_photo_time,\n          from_unixtime(max(createdTime/1000))                                                                                                     as last_photo_time,\n          count(distinct from_unixtime(createdTime/1000, 'yyyy-MM'))                                                                               as number_of_different_months_for_photos,\n          datediff(from_unixtime(max(createdTime/1000)), from_unixtime(min(createdTime/1000)))                                                     as number_of_days_between_first_and_last_photos,\n          sum(has_name)                                                                                                                            as count_has_name,\n          sum(has_place)                                                                                                                           as count_has_place,\n          -- sum(has_event)                                                                                                                           as count_has_event,\n          -- count(distinct event)                                                                                                                    as count_events_in_photos,\n          max(like_count)                                                                                                                          as photo_max_like,\n          min(like_count)                                                                                                                          as photo_min_like,\n          avg(like_count)                                                                                                                          as avg_likes_per_photo,\n          sum(like_count)                                                                                                                          as sum_like_count,\n          avg(tags_count)                                                                                                                          as avg_people_tagged_per_photo,\n          avg(case when tags_count > 0 then tags_count else null end)                                                                              as avg_people_tagged_per_photo_with_more_than_zero,\n          max(tags_count)                                                                                                                          as photo_max_people_tagged,\n          sum(tags_count)                                                                                                                          as sum_people_tagged_count,\n          avg(comments_count)                                                                                                                      as avg_comments_per_photo,\n          sum(comments_count)                                                                                                                      as sum_comments_count,\n          avg(comments_total_likes)                                                                                                                as avg_comments_total_likes,\n          avg(distinct_comments_writers)                                                                                                           as avg_distinct_comments_writers,\n          count(distinct album.id)                                                                                                                 as number_of_albums,\n          count(distinct case when album.`type` = 'cover'   then album.id else null end)                                                           as number_of_cover_albums,\n          count(distinct case when album.`type` = 'profile' then album.id else null end)                                                           as number_of_profile_albums,\n          count(distinct case when album.`type` is not null and album.`type` <> 'cover' and album.`type` <> 'profile' then album.id else null end) as number_of_other_albums,\n          count(distinct case when album.`type` is null     then album.id else null end)                                                           as number_of_null_albums,\n          count(distinct case when album.`type` = 'cover'   then id else null end)                                                                 as number_of_photos_in_cover_albums,\n          count(distinct case when album.`type` = 'profile' then id else null end)                                                                 as number_of_photos_in_profile_albums,\n          count(distinct case when album.`type` is not null and album.`type` <> 'cover' and album.`type` <> 'profile' then id else null end)       as number_of_photos_in_other_albums,\n          count(distinct case when album.`type` is null     then id else null end)                                                                 as number_of_photos_in_null_albums\nfrom photos\ngroup by page_id\n\"\"\").repartition(1).write.mode(\"overwrite\").json(\"s3a://zeppelindata/staging/hw/photos030317\")\nsqlContext.read.json(\"s3a://zeppelindata/staging/hw/photos030317\").createOrReplaceTempView(\"facebook_homework_photos_analysis\")","user":"plancky","dateUpdated":"2017-03-07T14:16:52+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true,"editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1488483870081_-1679277669","id":"20170302-194430_1016903916","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"2017-03-02T07:44:30+0000","dateStarted":"2017-03-05T09:34:37+0000","dateFinished":"2017-03-05T09:36:20+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:996"},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[{"name":"col_name","index":0,"aggr":"sum"}],"values":[{"name":"data_type","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"col_name","index":0,"aggr":"sum"},"yAxis":{"name":"data_type","index":1,"aggr":"sum"}}},"enabled":true,"editorMode":"ace/mode/sql","title":true,"editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1488896921849_-405208287","id":"20170307-142841_1990780659","dateCreated":"2017-03-07T14:28:41+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4066","user":"plancky","dateUpdated":"2017-03-07T14:30:12+0000","dateFinished":"2017-03-07T14:29:24+0000","dateStarted":"2017-03-07T14:29:24+0000","title":"Photos Schem","result":{"code":"SUCCESS","type":"TABLE","msg":"col_name\tdata_type\tcomment\npage_id\tstring\tnull\nphoto_avg_comments_per_photo\tdouble\tnull\nphoto_avg_likes_per_comments\tdouble\tnull\nphoto_avg_likes_per_photo\tdouble\tnull\nphoto_avg_people_tagged_per_photo\tdouble\tnull\nphoto_avg_people_tagged_per_photo_with_more_than_zero\tdouble\tnull\nphoto_count_has_name\tbigint\tnull\nphoto_count_has_place\tbigint\tnull\nphoto_distinct_uploaders\tbigint\tnull\nphoto_first_photo_time\tstring\tnull\nphoto_last_photo_time\tstring\tnull\nphoto_max_like\tbigint\tnull\nphoto_max_people_tagged\tbigint\tnull\nphoto_min_like\tbigint\tnull\nphoto_number_of_albums\tbigint\tnull\nphoto_number_of_cover_albums\tbigint\tnull\nphoto_number_of_days_between_first_and_last_photos\tbigint\tnull\nphoto_number_of_different_months_for_photos\tbigint\tnull\nphoto_number_of_null_albums\tbigint\tnull\nphoto_number_of_other_albums\tbigint\tnull\nphoto_number_of_photos_in_cover_albums\tbigint\tnull\nphoto_number_of_photos_in_null_albums\tbigint\tnull\nphoto_number_of_photos_in_other_albums\tbigint\tnull\nphoto_number_of_photos_in_profile_albums\tbigint\tnull\nphoto_number_of_profile_albums\tbigint\tnull\nphoto_sum_comments_count\tbigint\tnull\nphoto_sum_like_count\tbigint\tnull\nphoto_sum_people_tagged_count\tbigint\tnull\ntotal_photos\tbigint\tnull\n","comment":"","msgTable":[[{"key":"data_type","value":"page_id"},{"key":"data_type","value":"string"},{"key":"data_type","value":"null"}],[{"key":"comment","value":"photo_avg_comments_per_photo"},{"key":"comment","value":"double"},{"key":"comment","value":"null"}],[{"value":"photo_avg_likes_per_comments"},{"value":"double"},{"value":"null"}],[{"value":"photo_avg_likes_per_photo"},{"value":"double"},{"value":"null"}],[{"value":"photo_avg_people_tagged_per_photo"},{"value":"double"},{"value":"null"}],[{"value":"photo_avg_people_tagged_per_photo_with_more_than_zero"},{"value":"double"},{"value":"null"}],[{"value":"photo_count_has_name"},{"value":"bigint"},{"value":"null"}],[{"value":"photo_count_has_place"},{"value":"bigint"},{"value":"null"}],[{"value":"photo_distinct_uploaders"},{"value":"bigint"},{"value":"null"}],[{"value":"photo_first_photo_time"},{"value":"string"},{"value":"null"}],[{"value":"photo_last_photo_time"},{"value":"string"},{"value":"null"}],[{"value":"photo_max_like"},{"value":"bigint"},{"value":"null"}],[{"value":"photo_max_people_tagged"},{"value":"bigint"},{"value":"null"}],[{"value":"photo_min_like"},{"value":"bigint"},{"value":"null"}],[{"value":"photo_number_of_albums"},{"value":"bigint"},{"value":"null"}],[{"value":"photo_number_of_cover_albums"},{"value":"bigint"},{"value":"null"}],[{"value":"photo_number_of_days_between_first_and_last_photos"},{"value":"bigint"},{"value":"null"}],[{"value":"photo_number_of_different_months_for_photos"},{"value":"bigint"},{"value":"null"}],[{"value":"photo_number_of_null_albums"},{"value":"bigint"},{"value":"null"}],[{"value":"photo_number_of_other_albums"},{"value":"bigint"},{"value":"null"}],[{"value":"photo_number_of_photos_in_cover_albums"},{"value":"bigint"},{"value":"null"}],[{"value":"photo_number_of_photos_in_null_albums"},{"value":"bigint"},{"value":"null"}],[{"value":"photo_number_of_photos_in_other_albums"},{"value":"bigint"},{"value":"null"}],[{"value":"photo_number_of_photos_in_profile_albums"},{"value":"bigint"},{"value":"null"}],[{"value":"photo_number_of_profile_albums"},{"value":"bigint"},{"value":"null"}],[{"value":"photo_sum_comments_count"},{"value":"bigint"},{"value":"null"}],[{"value":"photo_sum_like_count"},{"value":"bigint"},{"value":"null"}],[{"value":"photo_sum_people_tagged_count"},{"value":"bigint"},{"value":"null"}],[{"value":"total_photos"},{"value":"bigint"},{"value":"null"}]],"columnNames":[{"name":"col_name","index":0,"aggr":"sum"},{"name":"data_type","index":1,"aggr":"sum"},{"name":"comment","index":2,"aggr":"sum"}],"rows":[["page_id","string","null"],["photo_avg_comments_per_photo","double","null"],["photo_avg_likes_per_comments","double","null"],["photo_avg_likes_per_photo","double","null"],["photo_avg_people_tagged_per_photo","double","null"],["photo_avg_people_tagged_per_photo_with_more_than_zero","double","null"],["photo_count_has_name","bigint","null"],["photo_count_has_place","bigint","null"],["photo_distinct_uploaders","bigint","null"],["photo_first_photo_time","string","null"],["photo_last_photo_time","string","null"],["photo_max_like","bigint","null"],["photo_max_people_tagged","bigint","null"],["photo_min_like","bigint","null"],["photo_number_of_albums","bigint","null"],["photo_number_of_cover_albums","bigint","null"],["photo_number_of_days_between_first_and_last_photos","bigint","null"],["photo_number_of_different_months_for_photos","bigint","null"],["photo_number_of_null_albums","bigint","null"],["photo_number_of_other_albums","bigint","null"],["photo_number_of_photos_in_cover_albums","bigint","null"],["photo_number_of_photos_in_null_albums","bigint","null"],["photo_number_of_photos_in_other_albums","bigint","null"],["photo_number_of_photos_in_profile_albums","bigint","null"],["photo_number_of_profile_albums","bigint","null"],["photo_sum_comments_count","bigint","null"],["photo_sum_like_count","bigint","null"],["photo_sum_people_tagged_count","bigint","null"],["total_photos","bigint","null"]]},"text":"%sql\n\ndesc facebook_homework_photos_analysis"},{"text":"%md\n\n##Feeds","user":"plancky","dateUpdated":"2017-03-07T14:42:59+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","tableHide":false,"editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1488735716346_-589727732","id":"20170305-174156_1949801843","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>Feeds</h2>\n"},"dateCreated":"2017-03-05T05:41:56+0000","dateStarted":"2017-03-07T14:42:56+0000","dateFinished":"2017-03-07T14:42:56+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:997","focus":true},{"title":"Get page feed","text":"\n// @RequestMapping(value = \"/user/{userId}/feed/{objectId}\", method = RequestMethod.GET)\n// public Paged<Post> getOtherFeed(@PathVariable(\"userId\") String userId,\n//                                 @PathVariable(\"objectId\") String objectId,\n//                                 @RequestParam(value = \"fields\", required = false) String fields,\n//                                 @RequestParam(value = \"limit\", required = false, defaultValue = \"50\") int limit,\n//                                 @RequestParam(value = \"next\", required = false, defaultValue = \"\") String next,\n//                                 @RequestParam(value = \"previous\", required = false, defaultValue = \"\") String previous) {\n\n// var fields = \"id,created_time,from,is_hidden,is_published,message_tags,place,privacy,status_type,story,story_tags,targeting,to,updated_time,with_tags,comments.limit(200){comment_count//,created_time,from,id,like_count,message_tags,likes.limit(200){id}},likes,feed_targeting,link\"\n\nvar base_directory = \"staging/hw\"\nvar limit_posts_per_page = 15 //25// more than this will fail due to too much data being fetched\n\nvar new_fields = \"id,created_time,feed_targeting,from,is_hidden,is_published,link,message_tags,picture,place{id},shares,source,status_type,targeting,to,updated_time,with_tags,comments.summary(true){like_count},likes.summary(true).limit(0),attachments{description_tags,media,target}\"\nvar fields = java.net.URLEncoder.encode(new_fields,\"UTF-8\");\n\nsqlContext.sql(\"\"\"\nselect *\nfrom (select id,\n             row_number() over (order by md5(id)) as rownumb\n      from (select distinct id \n            from facebook_homework_pages\n           )\n     )\n\"\"\").map(a => a.getAs[String](\"id\"))\n    .repartition(4)\n    .foreach(fetched_page_id => {\n\n        var page_id = fetched_page_id\n        var max_pages = 9 //10//50\n        var current_user_id = getRandomFacebookUserId()\n\n        var current_done_file = base_directory + \"/feed_status/\" + page_id\n        var found_done_file = fileExistsInS3(\"zeppelindata\", current_done_file)\n        \n        var current_last_page_file = base_directory + \"/feed/\" + page_id + \"/\" + max_pages\n        var found_last_page_file = fileExistsInS3(\"zeppelindata\", current_last_page_file)\n        \n        if (!found_done_file && !found_last_page_file) {\n    \n            var next_page_url = \"\" \n            \n            import scala.util.control.Breaks._\n            breakable { \n                var page_number = 0\n                var url_to_get = \"\"\n                while (page_number <= max_pages) {\n                    \n                    println(\"Working page \" + page_number + \" in page_id \" + page_id)\n                \n                    val objectMapper = new com.fasterxml.jackson.databind.ObjectMapper() with com.fasterxml.jackson.module.scala.experimental.ScalaObjectMapper;\n                    objectMapper.registerModule(com.fasterxml.jackson.module.scala.DefaultScalaModule)\n\n                    if (page_number == 0) {\n                        url_to_get = \"https://user:GhNoFZ3CPPUsHQ2WGwCzFBj3m7tcYWf@planckfacebookclient.herokuapp.com/user/\" + current_user_id + \n                                        \"/feed/\" + page_id + \"?limit=\" + limit_posts_per_page + \"&fields=\" + fields\n                    } \n                    \n                    var current_reply = \"\"\n                    try {\n                        println(url_to_get)\n                        \n                        current_reply = getUrlAsStringWithErrors(url_to_get)\n                        page_number += 1\n                        \n                        // Write content to s3\n                        writeContentToS3(current_reply, \"zeppelindata\", base_directory + \"/feed/\" + page_id + \"/\" + page_number)\n                    \n                        // Get next page (or stop trying to fetch)\n                        var cursor_object_option = objectMapper.readValue[Map[String, Object]](current_reply).get(\"paging\")\n                        if (cursor_object_option.isEmpty || cursor_object_option.get == null) {\n                            // println(\"should break at cursor\")\n                            writeContentToS3(\"DONE\", \"zeppelindata\", current_done_file)\n                            break\n\n                        } else {\n                            var after_cursor_option = cursor_object_option.get.asInstanceOf[Map[String, Object]].get(\"next\")\n                            if (after_cursor_option.isEmpty || after_cursor_option.get == null) {\n                                // println(\"should break at after_cursor_option\")\n                                writeContentToS3(\"DONE\", \"zeppelindata\", current_done_file)\n                                break\n\n                            } else {\n                                url_to_get = after_cursor_option.get.asInstanceOf[String]\n                            }\n                        }\n\n                    } catch {\n                        case e: Exception => {\n                            println(\"Got for page_id: \" + page_id + \" exception: \" + e.getMessage)\n                            if (e.getMessage.contains(\"was migrated to page ID\")) {\n                                var pattern = \"\"\".* was migrated to page ID (\\d+).*\"\"\".r\n                                var pattern(new_page_id) = e.getMessage\n\n                                println(\"Migraging \" + page_id + \" to \" + new_page_id)\n                                writeContentToS3(\"Migraging \" + page_id + \" to \" + new_page_id, \"zeppelindata\", current_done_file + \"_migrated\")\n                                writeContentToS3(\"DONE\", \"zeppelindata\", current_done_file)\n                                page_number = 0\n                                page_id = new_page_id\n                                \n                            } else if (e.getMessage.matches(\".*cannot be loaded due to missing permissions, or does not support this operation. Please read the Graph API documentation.*\")) {\n                                println(\"Ignoring \" + page_id)\n                                writeContentToS3(e.getMessage, \"zeppelindata\", current_done_file + \"_error\")\n                                writeContentToS3(\"DONE\", \"zeppelindata\", current_done_file)\n                                break\n\n                            } else if (e.getMessage.contains(\"\"\"www.herokucdn.com/error-pages/application-error.html\"\"\")) {\n                                println(\"Ignoring \" + page_id)\n                                writeContentToS3(e.getMessage, \"zeppelindata\", current_done_file + \"_error\")\n                                writeContentToS3(\"DONE\", \"zeppelindata\", current_done_file)\n                                break\n\n                            } else if (e.getMessage.matches(\".*Please reduce the amount of data you're asking for, then retry your request.*\")) {\n                                println(\"Ignoring \" + page_id)\n                                writeContentToS3(e.getMessage, \"zeppelindata\", current_done_file + \"_error\")\n                                writeContentToS3(\"DONE\", \"zeppelindata\", current_done_file)\n                                break\n\n                            } else {\n                            throw new Exception(\"Failed on page \" + page_id + \" and error \" + e.getMessage, e)\n                            }\n                        }\n                    }\n                }\n                \n                writeContentToS3(\"DONE\", \"zeppelindata\", current_done_file)\n\n            }\n        }\n    })","user":"plancky","dateUpdated":"2017-03-07T14:18:00+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true,"editorHide":true,"tableHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1488041392350_-1556472722","id":"20170225-164952_1287418479","result":{"code":"SUCCESS","type":"TEXT","msg":"\nbase_directory: String = staging/hw\n\nlimit_posts_per_page: Int = 15\n\nnew_fields: String = id,created_time,feed_targeting,from,is_hidden,is_published,link,message_tags,picture,place{id},shares,source,status_type,targeting,to,updated_time,with_tags,comments.summary(true){like_count},likes.summary(true).limit(0),attachments{description_tags,media,target}\n\nfields: String = id%2Ccreated_time%2Cfeed_targeting%2Cfrom%2Cis_hidden%2Cis_published%2Clink%2Cmessage_tags%2Cpicture%2Cplace%7Bid%7D%2Cshares%2Csource%2Cstatus_type%2Ctargeting%2Cto%2Cupdated_time%2Cwith_tags%2Ccomments.summary%28true%29%7Blike_count%7D%2Clikes.summary%28true%29.limit%280%29%2Cattachments%7Bdescription_tags%2Cmedia%2Ctarget%7D\n"},"dateCreated":"2017-02-25T04:49:52+0000","dateStarted":"2017-03-05T11:14:15+0000","dateFinished":"2017-03-06T02:14:39+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:998"},{"title":"Create Feed Table","text":"// var base_directory = \"staging/hw\"\n// var files_list = listBucketContents(\"zeppelindata\", base_directory + \"/feed/\")\n// var jsons_with_file_name_df = read_json_with_file_names_from_list2(\"zeppelindata\", files_list, false)\n\n// jsons_with_file_name_df.write.mode(\"overwrite\").parquet(\"s3a://zeppelindata/staging/hw/feeds_raw_parquet\")\n// sqlContext.read.parquet(\"s3a://zeppelindata/staging/hw/feeds_raw_parquet\").createOrReplaceTempView(\"feeds_raw_parquet\")\n\nsqlContext.sql(\"\"\"\nwith feeds_with_page_id as (select regexp_extract(file_name, '.*feed/(\\\\d+)/.*', 1) as page_id,\n                                    feed.*\n                             from feeds_raw_parquet\n                             lateral view explode (content.data) d as feed)\nselect *\nfrom feeds_with_page_id\n\"\"\").repartition(1).write.mode(\"overwrite\").json(\"s3a://zeppelindata/staging/hw/feeds_raw050317\")\nsqlContext.read.json(\"s3a://zeppelindata/staging/hw/feeds_raw050317\").createOrReplaceTempView(\"feeds_raw\")","user":"plancky","dateUpdated":"2017-03-07T14:27:00+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true,"editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1488401682945_177557732","id":"20170301-205442_1334819450","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"2017-03-01T08:54:42+0000","dateStarted":"2017-03-06T10:16:38+0000","dateFinished":"2017-03-06T10:20:50+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:999"},{"text":"%sql\n\nwith posts_comments as(\nselect page_id, avg(comment_total_likes / comments_count) as avg_likes_per_comment\nfrom(\n    select page_id, id, avg(size(comments.data)) as comments_count,\n           (case when sum(comment.like_count) is not null then sum(comment.like_count) else sum(comment.likeCount) end) as comment_total_likes\n    from feeds_raw\n    lateral view explode(comments.data) as comment\n    group by page_id, id)\ngroup by page_id\n),\nposts as(\nselect  page_id,\n        count(distinct id) as post_count,\n        from_unixtime(min(createdTime/1000))                                                                                            as feed_first_post_time,\n        from_unixtime(max(createdTime/1000))                                                                                            as feed_last_post_time,\n        count(distinct from_unixtime(createdTime/1000, 'yyyy-MM'))                                                                      as feed_number_of_different_months_for_post,\n        datediff(from_unixtime(max(createdTime/1000)), from_unixtime(min(createdTime/1000)))                                            as feed_number_of_days_between_first_and_last_posts,\n        sum(case when updatedTime is not null then 1 else 0 end)                                                                        as feed_count_post_updated,\n        sum(case when updatedTime is not null then 1 else 0 end) / count(id)                                                            as feed_post_updated_prc,\n        avg(comments.summary.total_count)                                                                                               as feed_avg_comments,\n        max(comments.summary.total_count)                                                                                               as feed_max_comments,\n        min(comments.summary.total_count)                                                                                               as feed_min_comments,\n        std(comments.summary.total_count)                                                                                               as feed_std_comments,\n        avg(likes.summary.total_count)                                                                                                  as feed_avg_likes,\n        max(likes.summary.total_count)                                                                                                  as feed_max_likes,\n        min(likes.summary.total_count)                                                                                                  as feed_min_likes,\n        std(likes.summary.total_count)                                                                                                  as feed_std_likes,\n        avg(shares.count)                                                                                                               as feed_avg_shares,\n        max(shares.count)                                                                                                               as feed_max_shares,\n        min(shares.count)                                                                                                               as feed_min_shares,\n        std(shares.count)                                                                                                               as feed_std_shares,\n        sum(case when is_hidden = true or isHidden = true then 1 else 0 end)                                                            as feed_is_hidden_count,\n        sum(case when is_published = true or isPublished = true then 1 else 0 end)                                                      as feed_is_published_count,\n        avg(size(messageTags))                                                                                                          as feed_avg_people_tagged_per_post,\n        avg(case when size(messageTags) > 0 then size(messageTags) else null end)                                                       as feed_avg_people_tagged_per_post_with_more_than_zero,\n        max(size(messageTags))                                                                                                          as feed_post_max_people_tagged,\n        sum(size(messageTags))                                                                                                          as feed_sum_people_tagged_count,\n        avg(size(withTags))                                                                                                             as feed_avg_with_tagged_per_post,\n        avg(case when size(withTags) > 0 then size(withTags) else null end)                                                             as feed_avg_with_tagged_per_post_with_more_than_zero,\n        max(size(withTags))                                                                                                             as feed_post_max_with_tagged,\n        sum(size(withTags))                                                                                                             as feed_sum_with_tagged_count,\n        sum(case when place is not null then 1 else 0 end)                                                                              as feed_count_has_place,\n        count(distinct case when (statusType = 'shared_story') or (status_type = 'shared_story') then id else null end)                 as feed_number_of_shared_story_category,\n        count(distinct case when (statusType = 'added_photos') or (status_type = 'added_photos') then id else null end)                 as feed_number_of_added_photos_category,\n        count(distinct case when (statusType is not null and statusType <> 'shared_story' and statusType <> 'added_photos') \n                or (status_type is not null and status_type <> 'shared_story' and status_type <> 'added_photos') then id else null end) as feed_number_of_other_categories,\n        count(distinct case when statusType is null and status_type is null then id else null end)                                      as feed_number_of_null_category,\n        avg(sharesCount)                                                                                                                as feed_avg_shares_cnt,\n        max(sharesCount)                                                                                                                as feed_max_shares_cnt,\n        min(sharesCount)                                                                                                                as feed_min_shares_cnt,\n        std(sharesCount)                                                                                                                as feed_std_shares_cnt\nfrom feeds_raw f\ngroup by page_id)\nselect p.*,\n      c.avg_likes_per_comment as feed_avg_likes_per_comment\nfrom posts p\njoin posts_comments c\non p.page_id = c.page_id\nlimit 10\n-- select * from posts_comments\n-- limit 4","user":"plancky","dateUpdated":"2017-03-07T13:35:13+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[{"name":"page_id","index":0,"aggr":"sum"}],"values":[{"name":"avg_likes_per_comment","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"page_id","index":0,"aggr":"sum"}}},"enabled":true,"editorMode":"ace/mode/sql","title":true,"lineNumbers":true,"editorHide":true,"tableHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1488789769531_1290368220","id":"20170306-084249_1248752072","result":{"code":"SUCCESS","type":"TABLE","msg":"page_id\tavg_likes_per_comment\n836848953048111\t0.3433726830813296\n1043847768993955\t0.5901917371309894\n106267362755137\t1.1987883888330622\n109274852461371\t1.7429031548431135\n","comment":"","msgTable":[[{"key":"avg_likes_per_comment","value":"836848953048111"},{"key":"avg_likes_per_comment","value":"0.3433726830813296"}],[{"value":"1043847768993955"},{"value":"0.5901917371309894"}],[{"value":"106267362755137"},{"value":"1.1987883888330622"}],[{"value":"109274852461371"},{"value":"1.7429031548431135"}]],"columnNames":[{"name":"page_id","index":0,"aggr":"sum"},{"name":"avg_likes_per_comment","index":1,"aggr":"sum"}],"rows":[["836848953048111","0.3433726830813296"],["1043847768993955","0.5901917371309894"],["106267362755137","1.1987883888330622"],["109274852461371","1.7429031548431135"]]},"dateCreated":"2017-03-06T08:42:49+0000","dateStarted":"2017-03-07T13:31:01+0000","dateFinished":"2017-03-07T13:31:18+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1000","title":"Basic Feed Analysis","focus":true},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true,"editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1488891786285_-1344211483","id":"20170307-130306_886163304","dateCreated":"2017-03-07T13:03:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3481","user":"plancky","dateUpdated":"2017-03-07T14:26:42+0000","dateFinished":"2017-03-07T13:35:17+0000","dateStarted":"2017-03-07T13:33:44+0000","title":"Create Feed Table (new)","result":{"code":"SUCCESS","type":"TEXT","msg":""},"text":"sqlContext.sql(\"\"\"\n\nwith posts_comments as(\nselect page_id, avg(comment_total_likes / comments_count) as avg_likes_per_comment\nfrom(\n    select page_id, id, avg(size(comments.data)) as comments_count,\n           (case when sum(comment.like_count) is not null then sum(comment.like_count) else sum(comment.likeCount) end) as comment_total_likes\n    from feeds_raw\n    lateral view explode(comments.data) as comment\n    group by page_id, id)\ngroup by page_id\n),\nposts as(\nselect  page_id,\n        count(distinct id) as post_count,\n        from_unixtime(min(createdTime/1000))                                                                                            as feed_first_post_time,\n        from_unixtime(max(createdTime/1000))                                                                                            as feed_last_post_time,\n        count(distinct from_unixtime(createdTime/1000, 'yyyy-MM'))                                                                      as feed_number_of_different_months_for_post,\n        datediff(from_unixtime(max(createdTime/1000)), from_unixtime(min(createdTime/1000)))                                            as feed_number_of_days_between_first_and_last_posts,\n        sum(case when updatedTime is not null then 1 else 0 end)                                                                        as feed_count_post_updated,\n        sum(case when updatedTime is not null then 1 else 0 end) / count(id)                                                            as feed_post_updated_prc,\n        avg(comments.summary.total_count)                                                                                               as feed_avg_comments,\n        max(comments.summary.total_count)                                                                                               as feed_max_comments,\n        min(comments.summary.total_count)                                                                                               as feed_min_comments,\n        std(comments.summary.total_count)                                                                                               as feed_std_comments,\n        avg(likes.summary.total_count)                                                                                                  as feed_avg_likes,\n        max(likes.summary.total_count)                                                                                                  as feed_max_likes,\n        min(likes.summary.total_count)                                                                                                  as feed_min_likes,\n        std(likes.summary.total_count)                                                                                                  as feed_std_likes,\n        avg(shares.count)                                                                                                               as feed_avg_shares,\n        max(shares.count)                                                                                                               as feed_max_shares,\n        min(shares.count)                                                                                                               as feed_min_shares,\n        std(shares.count)                                                                                                               as feed_std_shares,\n        sum(case when is_hidden = true or isHidden = true then 1 else 0 end)                                                            as feed_is_hidden_count,\n        sum(case when is_published = true or isPublished = true then 1 else 0 end)                                                      as feed_is_published_count,\n        avg(size(messageTags))                                                                                                          as feed_avg_people_tagged_per_post,\n        avg(case when size(messageTags) > 0 then size(messageTags) else null end)                                                       as feed_avg_people_tagged_per_post_with_more_than_zero,\n        max(size(messageTags))                                                                                                          as feed_post_max_people_tagged,\n        sum(size(messageTags))                                                                                                          as feed_sum_people_tagged_count,\n        avg(size(withTags))                                                                                                             as feed_avg_with_tagged_per_post,\n        avg(case when size(withTags) > 0 then size(withTags) else null end)                                                             as feed_avg_with_tagged_per_post_with_more_than_zero,\n        max(size(withTags))                                                                                                             as feed_post_max_with_tagged,\n        sum(size(withTags))                                                                                                             as feed_sum_with_tagged_count,\n        sum(case when place is not null then 1 else 0 end)                                                                              as feed_count_has_place,\n        count(distinct case when (statusType = 'shared_story') or (status_type = 'shared_story') then id else null end)                 as feed_number_of_shared_story_category,\n        count(distinct case when (statusType = 'added_photos') or (status_type = 'added_photos') then id else null end)                 as feed_number_of_added_photos_category,\n        count(distinct case when (statusType is not null and statusType <> 'shared_story' and statusType <> 'added_photos') \n                or (status_type is not null and status_type <> 'shared_story' and status_type <> 'added_photos') then id else null end) as feed_number_of_other_categories,\n        count(distinct case when statusType is null and status_type is null then id else null end)                                      as feed_number_of_null_category,\n        avg(sharesCount)                                                                                                                as feed_avg_shares_cnt,\n        max(sharesCount)                                                                                                                as feed_max_shares_cnt,\n        min(sharesCount)                                                                                                                as feed_min_shares_cnt,\n        std(sharesCount)                                                                                                                as feed_std_shares_cnt\nfrom feeds_raw f\ngroup by page_id)\nselect p.*,\n      c.avg_likes_per_comment as feed_avg_likes_per_comment\nfrom posts p\njoin posts_comments c\non p.page_id = c.page_id\n\"\"\").repartition(1).write.mode(\"overwrite\").json(\"s3a://zeppelindata/staging/hw/feeds070317\")\nsqlContext.read.json(\"s3a://zeppelindata/staging/hw/feeds070317\").createOrReplaceTempView(\"facebook_homework_feeds_analysis\")\n"},{"title":"Create Feed Table (old)","text":"// sqlContext.sql(\"\"\"\n// select page_id,\n//         count(distinct id) as post_count,\n//         from_unixtime(min(createdTime/1000))                                                                                            as feed_first_post_time,\n//         from_unixtime(max(createdTime/1000))                                                                                            as feed_last_post_time,\n//         count(distinct from_unixtime(createdTime/1000, 'yyyy-MM'))                                                                      as feed_number_of_different_months_for_post,\n//         datediff(from_unixtime(max(createdTime/1000)), from_unixtime(min(createdTime/1000)))                                            as feed_number_of_days_between_first_and_last_posts,\n//         sum(case when updatedTime is not null then 1 else 0 end)                                                                        as feed_count_post_updated,\n//         sum(case when updatedTime is not null then 1 else 0 end) / count(id)                                                            as feed_post_updated_prc,\n//         avg(comments.summary.total_count)                                                                                               as feed_avg_comments,\n//         max(comments.summary.total_count)                                                                                               as feed_max_comments,\n//         min(comments.summary.total_count)                                                                                               as feed_min_comments,\n//         std(comments.summary.total_count)                                                                                               as feed_std_comments,\n//         avg(likes.summary.total_count)                                                                                                  as feed_avg_likes,\n//         max(likes.summary.total_count)                                                                                                  as feed_max_likes,\n//         min(likes.summary.total_count)                                                                                                  as feed_min_likes,\n//         std(likes.summary.total_count)                                                                                                  as feed_std_likes,\n//         avg(shares.count)                                                                                                               as feed_avg_shares,\n//         max(shares.count)                                                                                                               as feed_max_shares,\n//         min(shares.count)                                                                                                               as feed_min_shares,\n//         std(shares.count)                                                                                                               as feed_std_shares,\n//         sum(case when is_hidden = true or isHidden = true then 1 else 0 end)                                                            as feed_is_hidden_count,\n//         sum(case when is_published = true or isPublished = true then 1 else 0 end)                                                      as feed_is_published_count,\n//         avg(size(messageTags))                                                                                                          as feed_avg_people_tagged_per_post,\n//         avg(case when size(messageTags) > 0 then size(messageTags) else null end)                                                       as feed_avg_people_tagged_per_post_with_more_than_zero,\n//         max(size(messageTags))                                                                                                          as feed_post_max_people_tagged,\n//         sum(size(messageTags))                                                                                                          as feed_sum_people_tagged_count,\n//         avg(size(withTags))                                                                                                             as feed_avg_with_tagged_per_post,\n//         avg(case when size(withTags) > 0 then size(withTags) else null end)                                                             as feed_avg_with_tagged_per_post_with_more_than_zero,\n//         max(size(withTags))                                                                                                             as feed_post_max_with_tagged,\n//         sum(size(withTags))                                                                                                             as feed_sum_with_tagged_count,\n//         sum(case when place is not null then 1 else 0 end)                                                                              as feed_count_has_place,\n//         count(distinct case when (statusType = 'shared_story') or (status_type = 'shared_story') then id else null end)                 as feed_number_of_shared_story_posts,\n//         count(distinct case when (statusType = 'added_photos') or (status_type = 'added_photos') then id else null end)                 as feed_number_of_added_photos_posts,\n//         count(distinct case when (statusType is not null and statusType <> 'shared_story' and statusType <> 'added_photos') \n//                 or (status_type is not null and status_type <> 'shared_story' and status_type <> 'added_photos') then id else null end) as feed_number_of_other_posts,\n//         count(distinct case when statusType is null and status_type is null then id else null end)                                      as feed_number_of_null_albums,\n//         avg(sharesCount)                                                                                                                as feed_avg_shares_cnt,\n//         max(sharesCount)                                                                                                                as feed_max_shares_cnt,\n//         min(sharesCount)                                                                                                                as feed_min_shares_cnt,\n//         std(sharesCount)                                                                                                                as feed_std_shares_cnt\n// from feeds_raw\n// group by page_id\n// \"\"\").repartition(1).write.mode(\"overwrite\").json(\"s3a://zeppelindata/staging/hw/feeds060317\")\nsqlContext.read.json(\"s3a://zeppelindata/staging/hw/feeds060317\").createOrReplaceTempView(\"facebook_homework_feeds_analysis\")\n","user":"plancky","dateUpdated":"2017-03-07T14:15:07+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true,"editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1488807666668_695236271","id":"20170306-134106_1860783748","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"2017-03-06T13:41:06+0000","dateStarted":"2017-03-06T14:49:26+0000","dateFinished":"2017-03-06T14:49:27+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1001","focus":true},{"text":"%sql\n\ndesc facebook_homework_feeds_analysis","user":"plancky","dateUpdated":"2017-03-07T14:28:35+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/sql","title":true,"editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1488808307362_-150334018","id":"20170306-135147_1327989460","result":{"code":"SUCCESS","type":"TABLE","msg":"col_name\tdata_type\tcomment\nfeed_avg_comments\tdouble\tnull\nfeed_avg_likes\tdouble\tnull\nfeed_avg_people_tagged_per_post\tdouble\tnull\nfeed_avg_people_tagged_per_post_with_more_than_zero\tdouble\tnull\nfeed_avg_shares\tdouble\tnull\nfeed_avg_shares_cnt\tdouble\tnull\nfeed_avg_with_tagged_per_post\tdouble\tnull\nfeed_avg_with_tagged_per_post_with_more_than_zero\tdouble\tnull\nfeed_count_has_place\tbigint\tnull\nfeed_count_post_updated\tbigint\tnull\nfeed_first_post_time\tstring\tnull\nfeed_is_hidden_count\tbigint\tnull\nfeed_is_published_count\tbigint\tnull\nfeed_last_post_time\tstring\tnull\nfeed_max_comments\tbigint\tnull\nfeed_max_likes\tbigint\tnull\nfeed_max_shares\tbigint\tnull\nfeed_max_shares_cnt\tbigint\tnull\nfeed_min_comments\tbigint\tnull\nfeed_min_likes\tbigint\tnull\nfeed_min_shares\tbigint\tnull\nfeed_min_shares_cnt\tbigint\tnull\nfeed_number_of_added_photos_posts\tbigint\tnull\nfeed_number_of_days_between_first_and_last_posts\tbigint\tnull\nfeed_number_of_different_months_for_post\tbigint\tnull\nfeed_number_of_null_albums\tbigint\tnull\nfeed_number_of_other_posts\tbigint\tnull\nfeed_number_of_shared_story_posts\tbigint\tnull\nfeed_post_max_people_tagged\tbigint\tnull\nfeed_post_max_with_tagged\tbigint\tnull\nfeed_post_updated_prc\tdouble\tnull\nfeed_std_comments\tstring\tnull\nfeed_std_likes\tstring\tnull\nfeed_std_shares\tstring\tnull\nfeed_std_shares_cnt\tstring\tnull\nfeed_sum_people_tagged_count\tbigint\tnull\nfeed_sum_with_tagged_count\tbigint\tnull\npage_id\tstring\tnull\npost_count\tbigint\tnull\n","comment":"","msgTable":[[{"key":"data_type","value":"feed_avg_comments"},{"key":"data_type","value":"double"},{"key":"data_type","value":"null"}],[{"key":"comment","value":"feed_avg_likes"},{"key":"comment","value":"double"},{"key":"comment","value":"null"}],[{"value":"feed_avg_people_tagged_per_post"},{"value":"double"},{"value":"null"}],[{"value":"feed_avg_people_tagged_per_post_with_more_than_zero"},{"value":"double"},{"value":"null"}],[{"value":"feed_avg_shares"},{"value":"double"},{"value":"null"}],[{"value":"feed_avg_shares_cnt"},{"value":"double"},{"value":"null"}],[{"value":"feed_avg_with_tagged_per_post"},{"value":"double"},{"value":"null"}],[{"value":"feed_avg_with_tagged_per_post_with_more_than_zero"},{"value":"double"},{"value":"null"}],[{"value":"feed_count_has_place"},{"value":"bigint"},{"value":"null"}],[{"value":"feed_count_post_updated"},{"value":"bigint"},{"value":"null"}],[{"value":"feed_first_post_time"},{"value":"string"},{"value":"null"}],[{"value":"feed_is_hidden_count"},{"value":"bigint"},{"value":"null"}],[{"value":"feed_is_published_count"},{"value":"bigint"},{"value":"null"}],[{"value":"feed_last_post_time"},{"value":"string"},{"value":"null"}],[{"value":"feed_max_comments"},{"value":"bigint"},{"value":"null"}],[{"value":"feed_max_likes"},{"value":"bigint"},{"value":"null"}],[{"value":"feed_max_shares"},{"value":"bigint"},{"value":"null"}],[{"value":"feed_max_shares_cnt"},{"value":"bigint"},{"value":"null"}],[{"value":"feed_min_comments"},{"value":"bigint"},{"value":"null"}],[{"value":"feed_min_likes"},{"value":"bigint"},{"value":"null"}],[{"value":"feed_min_shares"},{"value":"bigint"},{"value":"null"}],[{"value":"feed_min_shares_cnt"},{"value":"bigint"},{"value":"null"}],[{"value":"feed_number_of_added_photos_posts"},{"value":"bigint"},{"value":"null"}],[{"value":"feed_number_of_days_between_first_and_last_posts"},{"value":"bigint"},{"value":"null"}],[{"value":"feed_number_of_different_months_for_post"},{"value":"bigint"},{"value":"null"}],[{"value":"feed_number_of_null_albums"},{"value":"bigint"},{"value":"null"}],[{"value":"feed_number_of_other_posts"},{"value":"bigint"},{"value":"null"}],[{"value":"feed_number_of_shared_story_posts"},{"value":"bigint"},{"value":"null"}],[{"value":"feed_post_max_people_tagged"},{"value":"bigint"},{"value":"null"}],[{"value":"feed_post_max_with_tagged"},{"value":"bigint"},{"value":"null"}],[{"value":"feed_post_updated_prc"},{"value":"double"},{"value":"null"}],[{"value":"feed_std_comments"},{"value":"string"},{"value":"null"}],[{"value":"feed_std_likes"},{"value":"string"},{"value":"null"}],[{"value":"feed_std_shares"},{"value":"string"},{"value":"null"}],[{"value":"feed_std_shares_cnt"},{"value":"string"},{"value":"null"}],[{"value":"feed_sum_people_tagged_count"},{"value":"bigint"},{"value":"null"}],[{"value":"feed_sum_with_tagged_count"},{"value":"bigint"},{"value":"null"}],[{"value":"page_id"},{"value":"string"},{"value":"null"}],[{"value":"post_count"},{"value":"bigint"},{"value":"null"}]],"columnNames":[{"name":"col_name","index":0,"aggr":"sum"},{"name":"data_type","index":1,"aggr":"sum"},{"name":"comment","index":2,"aggr":"sum"}],"rows":[["feed_avg_comments","double","null"],["feed_avg_likes","double","null"],["feed_avg_people_tagged_per_post","double","null"],["feed_avg_people_tagged_per_post_with_more_than_zero","double","null"],["feed_avg_shares","double","null"],["feed_avg_shares_cnt","double","null"],["feed_avg_with_tagged_per_post","double","null"],["feed_avg_with_tagged_per_post_with_more_than_zero","double","null"],["feed_count_has_place","bigint","null"],["feed_count_post_updated","bigint","null"],["feed_first_post_time","string","null"],["feed_is_hidden_count","bigint","null"],["feed_is_published_count","bigint","null"],["feed_last_post_time","string","null"],["feed_max_comments","bigint","null"],["feed_max_likes","bigint","null"],["feed_max_shares","bigint","null"],["feed_max_shares_cnt","bigint","null"],["feed_min_comments","bigint","null"],["feed_min_likes","bigint","null"],["feed_min_shares","bigint","null"],["feed_min_shares_cnt","bigint","null"],["feed_number_of_added_photos_posts","bigint","null"],["feed_number_of_days_between_first_and_last_posts","bigint","null"],["feed_number_of_different_months_for_post","bigint","null"],["feed_number_of_null_albums","bigint","null"],["feed_number_of_other_posts","bigint","null"],["feed_number_of_shared_story_posts","bigint","null"],["feed_post_max_people_tagged","bigint","null"],["feed_post_max_with_tagged","bigint","null"],["feed_post_updated_prc","double","null"],["feed_std_comments","string","null"],["feed_std_likes","string","null"],["feed_std_shares","string","null"],["feed_std_shares_cnt","string","null"],["feed_sum_people_tagged_count","bigint","null"],["feed_sum_with_tagged_count","bigint","null"],["page_id","string","null"],["post_count","bigint","null"]]},"dateCreated":"2017-03-06T13:51:47+0000","dateStarted":"2017-03-06T14:49:39+0000","dateFinished":"2017-03-06T14:49:39+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1002","title":"Feed Schema"},{"title":"","text":"%md\n\n##Events","user":"plancky","dateUpdated":"2017-03-07T14:43:18+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","title":false,"editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485119363698_2135666502","id":"20170122-210923_1206403716","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>Events</h2>\n"},"dateCreated":"2017-01-22T09:09:23+0000","dateStarted":"2017-03-07T14:43:12+0000","dateFinished":"2017-03-07T14:43:12+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1003","focus":true},{"title":"Get page events (TODO)","text":"// @RequestMapping(value = \"/user/{userId}/events/{objectId}\", method = RequestMethod.GET)\n// public Paged<Event> getOtherEvents(@PathVariable(\"userId\") String userId,\n//                                   @PathVariable(\"objectId\") String objectId,\n//                                   @RequestParam(value = \"limit\", required = false, defaultValue = \"50\") int limit,\n//                                   @RequestParam(value = \"next\", required = false, defaultValue = \"\") String next) \n\n\n","dateUpdated":"2017-03-07T14:39:38+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true,"editorHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485136280402_2103567213","id":"20170123-015120_74996071","dateCreated":"2017-01-23T01:51:20+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:1004"}],"name":"/projects/facebook directory homework 2nd try","id":"2C9QEBDHK","angularObjects":{"2BRWU4WXC:shared_process":[],"2AM1YV5CU:shared_process":[],"2C4WZ8CF7:shared_process":[],"2AJXGMUUJ:shared_process":[],"2AKK3QQXU:shared_process":[]},"config":{"looknfeel":"default"},"info":{}}